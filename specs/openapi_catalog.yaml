openapi: 3.0.1
info:
  title: Kibo Catalog API Services Documentation
  version: v1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  description: OpenAPI Spec for Kibo Catalog API Services
servers:
  - url: https://t{tenantId}.{env}.mozu.com/api
    description: Tenant Level Api
    variables:
      tenantId:
        default: "0"
        description: Id of the Tenant
      env:
        default: sb
        enum:
          - sb
          - tp1
          - tp2
          - tp3
          - tp4
          - tp5
          - stg1
          - perf1
  - url: https://t{tenantId}-s{siteId}.{env}.mozu.com/api
    description: Site Level Api
    variables:
      tenantId:
        default: "0"
        description: Id of the Tenant
      siteId:
        default: "0"
        description: Id of the Site
      env:
        default: sb
        enum:
          - sb
          - tp1
          - tp2
          - tp3
          - tp4
          - tp5
          - stg1
          - perf1
  - url: https://home.mozu.com/api
    description: HomePod Api
paths:
  /commerce/catalog/admin/attributedefinition/attributes:
    get:
      tags:
        - Attribute
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Attribute
      summary: Add / Create Attribute
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
      description: Add / Create Attribute
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}":
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Attribute
      summary: Update attribute
      parameters:
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttribute"
      description: Update attribute
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Attribute
      summary: Delete attribute
      parameters:
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete attribute
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent/{localeCode}":
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent":
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}":
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Attribute
      summary: Update attribute vocabulary value
      parameters:
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      description: Update attribute vocabulary value
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Attribute
      summary: Delete Attribute Vocabulary Value
      parameters:
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete Attribute Vocabulary Value
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent/{localeCode}":
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent":
    post:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues":
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Attribute
      summary: Add attribute vocabulary value
      parameters:
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      description: Add attribute vocabulary value
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Attribute
      summary: Update attribute vocabulary values
      parameters:
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      description: Update attribute vocabulary values
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/localizedContent":
    post:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/attributedefinition/attributes/typerules:
    get:
      tags:
        - Attribute
      summary: Retrieves a paged list of attribute type rules according to any
        specified filter criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeRuleCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeRuleCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeTypeRuleCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/categories:
    get:
      tags:
        - Category
      summary: Retrieves a list of categories according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. The
            default value is 0.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: responseGroups
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategoryPagedCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategoryPagedCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminCategoryPagedCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Category
      summary: Adds a new category to the catalog's category hierarchy
      parameters:
        - name: incrementSequence
          in: query
          description: Sets the sequence number of the category to the current max
            sequence value plus 1 (e.g. 5 + 1 = 6)
          schema:
            type: boolean
            default: false
        - name: useProvidedId
          in: query
          description: If true, the provided Id value will be used as the CategoryId. If
            omitted or false, the system will generate a CategoryId
          schema:
            type: boolean
            default: false
      requestBody:
        description: Properties of the new category. Required properties
          ParentCategoryID and Content.Name.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminCategory"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
      description: Specify a ParentCategoryID to determine where to locate the
        category in the hierarchy; if not specified it becomes a top-level
        category.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/categories/{categoryId}":
    get:
      tags:
        - Category
      summary: Retrieves the details of a single category
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Category
      summary: Modifies a category such as moving it to another location in the
        category tree, or changing whether it is visible on the storefront
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want to modify. Required.
          required: true
          schema:
            type: integer
            format: int32
        - name: cascadeVisibility
          in: query
          description: If true, when changing the display option for the category, change
            it for all subcategories also. Optional.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Properties of the category that you want to modify. Required
          properties ParentCategoryID and Content.Name.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminCategory"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminCategory"
      description: This PUT replaces the existing resource, so be sure to include all
        the information that you want to maintain for the category. Any
        unspecified properties are set to null.
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Category
      summary: Deletes the category specified by its category ID
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want to delete.
          required: true
          schema:
            type: integer
            format: int32
        - name: cascadeDelete
          in: query
          description: If true, any subcategories of a category are deleted when this
            category is deleted. Otherwise only the given category is deleted.
            Default is false.
          schema:
            type: boolean
            default: false
        - name: forceDelete
          in: query
          description: If true, category (and optionally subcategories) will be deleted
            even if there are products referecing them.  Default is false.
          schema:
            type: boolean
            default: false
        - name: reassignToParent
          in: query
          description: If true, and child categories of the given category will be
            reassigned to the parent of the given category. Only applies if
            cascadeDelete is false. Default is false.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/categories/{categoryId}/children":
    get:
      tags:
        - Category
      summary: Retrieves the immediate subcategories of a category
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category whose subcategories you want to
            get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategoryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCategoryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminCategoryCollection"
      description: "\r

        This is a list of subcategories at the same level (siblings). \r

        You can use a list of siblings, for example, to display the
        categories in a horizontal list."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/categories/ValidateDynamicExpression:
    post:
      tags:
        - Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicExpression"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicExpression"
            text/json:
              schema:
                $ref: "#/components/schemas/DynamicExpression"
            text/plain:
              schema:
                $ref: "#/components/schemas/DynamicExpression"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/categories/ValidateRealTimeDynamicExpression:
    post:
      tags:
        - Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicExpression"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicExpression"
            text/json:
              schema:
                $ref: "#/components/schemas/DynamicExpression"
            text/plain:
              schema:
                $ref: "#/components/schemas/DynamicExpression"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/categories/{categoryId}/remove-products":
    post:
      tags:
        - Category
      summary: Removes the products in the provided product code list from the
        specified category
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want products removed
            from.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A list of products to be removed from the category.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/categories/{categoryId}/add-products":
    post:
      tags:
        - Category
      summary: Adds the products in the provided product code list to the specified
        category
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want produts added to.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A list of products to be added to the category.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/corefields/search:
    get:
      tags:
        - CoreFields
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/corefields/search/product:
    get:
      tags:
        - CoreFields
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/corefields/search/category:
    get:
      tags:
        - CoreFields
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/corefields/search/boost:
    get:
      tags:
        - CoreFields
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CoreFieldCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/couponsets/unique-code:
    get:
      tags:
        - CouponSet
      summary: Returns a random 4 character code that is unique as a coupon set code
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/couponsets/validate-unique-code:
    post:
      tags:
        - CouponSet
      summary: Tests code for uniqueness and validity
      parameters:
        - name: code
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Tests code for uniqueness and validity
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/couponsets/{couponSetCode}":
    get:
      tags:
        - CouponSet
      summary: Returns a single Mozu
      parameters:
        - name: couponSetCode
          in: path
          description: CouponSetCode for the requested CouponSet
          required: true
          schema:
            type: string
        - name: includeCounts
          in: query
          description: Include the redemption counts and coupon counts
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          description: '"counts" includes the number of redemptions, coupon codes, and
            assigned discounts.'
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponSet"
            text/json:
              schema:
                $ref: "#/components/schemas/CouponSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/CouponSet"
      description: roductAdmin.Contracts.CouponSet
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CouponSet
      summary: Update a Mozu
      parameters:
        - name: couponSetCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CouponSet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponSet"
            text/json:
              schema:
                $ref: "#/components/schemas/CouponSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/CouponSet"
      description: "roductAdmin.Contracts.CouponSet representation.\r

        You can not update the Code or ID once the set is created."
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/couponsets:
    get:
      tags:
        - CouponSet
      summary: Returns a paged collection of CouponSets
      parameters:
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
        - name: includeCounts
          in: query
          description: Include coupon and redemption counts
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          description: '"counts" returns discount and couponCode counts'
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponSetCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CouponSetCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CouponSetCollection"
      description: Returns a paged collection of CouponSets
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CouponSet
      summary: Adds a single Mozu
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CouponSet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponSet"
            text/json:
              schema:
                $ref: "#/components/schemas/CouponSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/CouponSet"
      description: roductAdmin.Contracts.CouponSet
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes":
    get:
      tags:
        - CouponSet
      summary: Returns a paged collection of Coupons
      parameters:
        - name: couponSetCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
        - name: includeCounts
          in: query
          description: Includes coupon redemption counts
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          description: counts
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CouponCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CouponCollection"
      description: Returns a paged collection of Coupons
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Coupon"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}":
    get:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          required: true
          schema:
            type: string
        - name: includeCounts
          in: query
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
            text/json:
              schema:
                $ref: "#/components/schemas/Coupon"
            text/plain:
              schema:
                $ref: "#/components/schemas/Coupon"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/remove":
    post:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts":
    get:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedDiscount"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedDiscount"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignedDiscount"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignedDiscount"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts/{discountId}":
    delete:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/currency:
    post:
      tags:
        - Currency
      summary: Adds a new product sort definition
      requestBody:
        description: "Properties of the currency-localization to create.\r

          Required properties: CurrencyCode"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyLocalization"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
            text/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
            text/plain:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Currency
      summary: Gets all currency-localizations
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalizationCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalizationCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CurrencyLocalizationCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/currency/{currencyCode}":
    delete:
      tags:
        - Currency
      summary: Deletes the currency-localization specified by its currency code
      parameters:
        - name: currencyCode
          in: path
          description: Currency code.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Currency
      summary: Gets a single currency-localization
      parameters:
        - name: currencyCode
          in: path
          description: Currency code.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
            text/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
            text/plain:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Currency
      summary: Updates the details of a currency-localization
      parameters:
        - name: currencyCode
          in: path
          description: Currency code.
          required: true
          schema:
            type: string
      requestBody:
        description: Properties of the currency-localization to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyLocalization"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
            text/json:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
            text/plain:
              schema:
                $ref: "#/components/schemas/CurrencyLocalization"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/currency/{currencyCode}/exchangerates":
    post:
      tags:
        - Currency
      summary: Add multiple exchange rates for a specified currency-code
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
      requestBody:
        description: Exchange rates for the currency
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminCurrencyExchangeRate"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Currency
      summary: Retrieves a list of exchange rates for a specified currency-code and
        filter criteria
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyExchangeRateCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CurrencyExchangeRateCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CurrencyExchangeRateCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Currency
      summary: Update multiple exchange rates for a specified currency-code
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
      requestBody:
        description: Exchange rates for the currency
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminCurrencyExchangeRate"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}":
    delete:
      tags:
        - Currency
      summary: Delete a single exchange rate for a specified currency-code and target
        currency-code
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
        - name: toCurrencyCode
          in: path
          description: C
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Currency
      summary: Retrieves a single exchange rate for a specified currency-code and
        target-currency-code
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
        - name: toCurrencyCode
          in: path
          description: Target currency code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCurrencyExchangeRate"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminCurrencyExchangeRate"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminCurrencyExchangeRate"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/discounts/generate-random-coupon:
    get:
      tags:
        - Discount
      summary: Generates a random code for a coupon
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/discounts:
    get:
      tags:
        - Discount
      summary: Retrieves a list of discounts according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/DiscountCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/DiscountCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Discount
      summary: Creates a discount
      requestBody:
        description: "Properties of the discount to create. Required properties:
          Content.Name, AmountType, StartDate, and Target.Type."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminDiscount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/discounts/{discountId}":
    get:
      tags:
        - Discount
      summary: Retrieves the details of a single discount
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Discount
      summary: Modifies a discount
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: "Properties of the discount to update. \r

          \            Required properties: Content.Name, AmountType,
          StartDate, and Target.Type. \r

          \            Any unspecified properties are set to null and
          boolean variables are set to false."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminDiscount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Discount
      summary: Deletes a discount specified by its discount ID
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/discounts/{discountId}/content":
    get:
      tags:
        - Discount
      summary: Retrieves the localized content specified for the specified discount
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/DiscountLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/DiscountLocalizedContent"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Discount
      summary: Modifies the localized content for the specified discount
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: "New Name and/or LocaleCode. Properties of the content to update.
          Required property: Name."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/DiscountLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/DiscountLocalizedContent"
      description: Allows you to rename the discount without modifying any other
        discount properties.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/discounts/{discountId}/target":
    get:
      tags:
        - Discount
      summary: Retrieves the discount target, that is which products, categories, or
        shipping methods are eligible for the discount
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscountTarget"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscountTarget"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscountTarget"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Discount
      summary: Modifies properties of the discount target, for example, the dollar
        amount, or precentage off the price
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: "Properties of the discount target to modify. \r

          \            Required properties: Target.Type. Any
          unspecified properties are set to null and boolean variables to
          false."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminDiscountTarget"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscountTarget"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscountTarget"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminDiscountTarget"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/discountsettings/{catalogId}":
    get:
      tags:
        - DiscountSettings
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/DiscountSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/DiscountSettings"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - DiscountSettings
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/DiscountSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/DiscountSettings"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/facets/{facetId}":
    get:
      tags:
        - Facet
      summary: Retrieves the details of a Facet Definition
      parameters:
        - name: facetId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: validate
          in: query
          description: ""
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
      description: Retrieves the details of a Facet Definition
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Facet
      summary: Modifies a Facet definition
      parameters:
        - name: facetId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminFacet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
      description: Modifies a Facet definition
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Facet
      summary: Deletes the Facet definition from the store
      parameters:
        - name: facetId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: Deletes the Facet definition from the store
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/facets:
    post:
      tags:
        - Facet
      summary: Adds a new Facet to a category in a catalog
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminFacet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminFacet"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/facets/category:
    get:
      tags:
        - Facet
      summary: Retrieves a list of configured, and optionally available, Facet
        Configurations for the specified category
      parameters:
        - name: categoryId
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: categoryCode
          in: query
          schema:
            type: string
        - name: includeAvailable
          in: query
          description: ""
          schema:
            type: boolean
        - name: validate
          in: query
          description: ""
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FacetSet"
            text/json:
              schema:
                $ref: "#/components/schemas/FacetSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/FacetSet"
      description: Retrieves a list of configured, and optionally available, Facet
        Configurations for the specified category
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/facets/category/{categoryId}":
    get:
      tags:
        - Facet
      summary: Retrieves a list of configured, and optionally available, Facet
        Configurations for the specified category
      parameters:
        - name: categoryId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: includeAvailable
          in: query
          description: ""
          schema:
            type: boolean
        - name: validate
          in: query
          description: ""
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FacetSet"
            text/json:
              schema:
                $ref: "#/components/schemas/FacetSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/FacetSet"
      description: Retrieves a list of configured, and optionally available, Facet
        Configurations for the specified category
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/locationinventory/{locationCode}":
    get:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: filterFunctions
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventoryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventoryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventoryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
        - name: performUpserts
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LocationInventoryAdjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/locationinventory/{locationCode}/{productCode}":
    get:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/mastercatalogs:
    get:
      tags:
        - MasterCatalog
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterCatalogCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/MasterCatalogCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/MasterCatalogCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/mastercatalogs/{masterCatalogId}":
    get:
      tags:
        - MasterCatalog
      summary: Get a MasterCatalog
      parameters:
        - name: masterCatalogId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminMasterCatalog"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminMasterCatalog"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminMasterCatalog"
      description: Get a MasterCatalog
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - MasterCatalog
      summary: Update the publishingMode of a MasterCatalog
      parameters:
        - name: masterCatalogId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminMasterCatalog"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminMasterCatalog"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminMasterCatalog"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminMasterCatalog"
      description: Update the publishingMode of a MasterCatalog
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/pricelists:
    get:
      tags:
        - PriceList
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceListCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PriceListCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PriceListCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - PriceList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminPriceList"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/pricelists/{priceListCode}":
    get:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminPriceList"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminPriceList"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
        - name: cascadeDeleteEntries
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/pricelists/{priceListCode}/entries":
    get:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceListEntryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PriceListEntryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PriceListEntryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriceListEntry"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
            text/json:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
            text/plain:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}":
    get:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
            text/json:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
            text/plain:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriceListEntry"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
            text/json:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
            text/plain:
              schema:
                $ref: "#/components/schemas/PriceListEntry"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/pricelists/bulkaddentries:
    post:
      tags:
        - PriceList
      parameters:
        - name: publishEvents
          in: query
          schema:
            type: boolean
            default: true
        - name: invalidateCache
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/PriceListEntry"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/pricelists/bulkupdateentries:
    post:
      tags:
        - PriceList
      parameters:
        - name: publishEvents
          in: query
          schema:
            type: boolean
            default: true
        - name: invalidateCache
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/PriceListEntry"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/pricelists/bulkdeleteentries:
    post:
      tags:
        - PriceList
      parameters:
        - name: publishEvents
          in: query
          schema:
            type: boolean
            default: true
        - name: invalidateCache
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/PriceListEntry"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/products:
    get:
      tags:
        - Product
      summary: Retrieves a list of products according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a single query. The default value is 20 and
            the maximum value is 200.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: "The element to sort the results by and the order in which the
            results appear. Either ascending or descending order. For example,
            to sort the results by “ID” ascending then by “CreateDate”
            descending, use: id asc,createdate desc."
          schema:
            type: string
        - name: responseGroups
          in: query
          description: "Used to get more specific information from the request. For
            example to get discounts applied to a product use the
            AppliedProducts response group. Available response groups:
            ApplicableDiscounts, VariationOptions, and BaseProductCode."
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: qLimit
          in: query
          schema:
            type: integer
            format: int32
        - name: noCount
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      summary: Creates a new product
      requestBody:
        description: "Properties of the new product. Required properties: ProductCode,
          Content.ProductName, and Price.ListPrice.
          Mozu.ProductAdmin.Contracts.Product"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminProduct"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
      description: You supply a product name, product code, price and other product
        characteristics such as its attributes, categories where the product
        belongs, whether the product has configurable options, stand-alone
        options, and so on.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}":
    get:
      tags:
        - Product
      summary: Retrieves details about a product based on the specified response group
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          description: "Used to get more specific information from the request. For
            example to get discounts applied to a product use the
            AppliedProducts response group. Available response groups:
            ApplicableDiscounts, VariationOptions, and BaseProductCode."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
      description: For example, to get the BaseProductCode of a product.
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      summary: Modifies an existing product
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
      requestBody:
        description: "Properties of the product that you want to update. Required
          properties: ProductCode, Content.ProductName, and Price.ListPrice."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminProduct"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProduct"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      summary: Deletes the product specified by its product code
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/ProductInCatalogs/{catalogId}":
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInCatalogInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/ProductInCatalogs":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInCatalogInfo"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInCatalogInfo"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInCatalogInfo"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductInCatalogInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInCatalogInfo"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInCatalogInfo"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInCatalogInfo"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInCatalogInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductInCatalogInfo"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/products/Actions/RenameProductCodes:
    post:
      tags:
        - Product
      summary: Action that allows productCodes to be Renamed
      requestBody:
        description: An array specifying the existing productCode and the new
          productCode it should be renamed to
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductCodeRename"
      responses:
        "200":
          description: Success
      description: Changing the resource identifier of a product could cause problems
        for established products.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/variations":
    get:
      tags:
        - Product
      summary: "Retrieves a paged list of product variations for a specific product
        according to any specified filter criteria and\r

        sort options"
      parameters:
        - name: productCode
          in: path
          description: Merchant-supplied code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set\r

            where the returned entities begin. For example, with a
            PageSize of 25, to get the 51st through the 75th items,\r

            startIndex=3. The default value is 0. Optional."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: "Used to page results from a query. Indicates the maximum number of
            entities to return from a\r

            query. The default value is 20 and the maximum value is
            200. Optional."
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: "The element to sort the results by and the order in which the
            results appear. Either ascending\r

            (a-z) or descending (z-a) order. Optional."
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not\r

            equals, gt=greater than, lt = less than or equals, gt =
            greater than or equals, lt = less than or equals, sw =\r

            starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationPagedCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationPagedCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationPagedCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      summary: Modifies multiple product variations for an existing product in one
        operation
      parameters:
        - name: productCode
          in: path
          description: Merchant-supplied code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
      requestBody:
        description: Properties of the product variations that you are modifying. Required.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariationCollection"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationCollection"
      description: "Use to set IsActive to true for\r

        variations that represent configurable options for sale. Also
        use to change the price or inventory count of an\r

        existing product variation. Read-only options are ignored."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}":
    get:
      tags:
        - Product
      summary: Retrieves an existing product variation for a specific product and
        variation key
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          description: Unique identifier for a single product variation. System-supplied
            and read-only.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariation"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariation"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariation"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      summary: Modifies an existing product variation specified by its variation key
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          description: Unique identifier for a single variation. System-supplied and
            read-only.
          required: true
          schema:
            type: string
      requestBody:
        description: Properties of the product variation that you are modifying. Required.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariation"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariation"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariation"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariation"
      description: "Typically used to change the price or\r

        inventory count of an existing product variation. Read-only
        options are ignored."
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      summary: Deletes an existing product variation
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          description: Unique identifier for a single product variation. System-supplied
            and read-only.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariationDeltaPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice/{currencyCode}":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariationDeltaPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationFixedPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductVariationFixedPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariationFixedPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice/{currencyCode}":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariationFixedPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationFixedPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Extras":
    get:
      tags:
        - Product
      summary: Get extras for the product
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtra"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtra"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtra"
      description: Get extras for the product
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      summary: Add extra
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductExtra"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExtra"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductExtra"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductExtra"
      description: Add extra
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}":
    get:
      tags:
        - Product
      summary: Get individual extra
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExtra"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductExtra"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductExtra"
      description: Get individual extra
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      summary: Update extra
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductExtra"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExtra"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductExtra"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductExtra"
      description: Update extra
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      summary: Delete extra
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete extra
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice/{currencyCode}":
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{ProductCode}/LocationInventory":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventoryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventoryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventoryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: performUpserts
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LocationInventoryAdjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminLocationInventory"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{ProductCode}/LocationInventory/{LocationCode}":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminLocationInventory"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Options":
    get:
      tags:
        - Product
      summary: Get options for the product
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminProductOption"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminProductOption"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminProductOption"
      description: Get options for the product
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      summary: Add option
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminProductOption"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
      description: Add option
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Options/{attributeFQN}":
    get:
      tags:
        - Product
      summary: Get individual option
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
      description: Get individual option
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      summary: Update option
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminProductOption"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductOption"
      description: Update option
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      summary: Delete option
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete option
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Properties":
    get:
      tags:
        - Product
      summary: Get properties for the product
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminProductProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminProductProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAdminProductProperty"
      description: Get properties for the product
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      summary: Add property
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminProductProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
      description: Add property
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}":
    get:
      tags:
        - Product
      summary: Get individual property
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
      description: Get individual property
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      summary: Update property
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAdminProductProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductAdminProductProperty"
      description: Update property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      summary: Delete property
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete property
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}":
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: path
          required: true
          schema:
            type: string
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/productsortdefinitions:
    get:
      tags:
        - ProductSortDefinition
      summary: Retrieves a list of product sort definitions according to any specified
        filter criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. The
            default value is 0.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinitionPagedCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinitionPagedCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSortDefinitionPagedCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ProductSortDefinition
      summary: Adds a new product sort definition
      parameters:
        - name: useProvidedId
          in: query
          description: If true, the provided Id value will be used as the
            ProductSortDefinitionId. If omitted or false, the system will
            generate a ProductSortDefinitionId
          schema:
            type: boolean
            default: false
      requestBody:
        description: Properties of the new product sort definition. Required properties
          of StartDate and Name.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductSortDefinition"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
      description: Adds a new product sort definition
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/productsortdefinitions/{productSortDefinitionId}":
    get:
      tags:
        - ProductSortDefinition
      summary: Gets a single product sort definition
      parameters:
        - name: productSortDefinitionId
          in: path
          description: Unique identifier of the product sort definition.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ProductSortDefinition
      summary: Updates the details of a product sort definition
      parameters:
        - name: productSortDefinitionId
          in: path
          description: Unique identifier of the product sort definition.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the product sort definition to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductSortDefinition"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSortDefinition"
      description: Updates the details of a product sort definition
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ProductSortDefinition
      summary: Deletes the product sort definition specified by its
        ProductSortDefinitionID
      parameters:
        - name: productSortDefinitionId
          in: path
          description: Unique identifier of the product sort definition.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/attributedefinition/producttypes:
    get:
      tags:
        - ProductType
      summary: Retrieves a list of product types according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a single query. The default value is 20 and
            the maximum value is 200.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: "The element to sort the results by and the order in which the
            results appear. Either ascending or descending order. For example,
            to sort the results by “ID” ascending then by “CreateDate”
            descending, use: id asc,createdate desc."
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: responseGroups
          in: query
          description: "Used to get more specific information from the request. For
            example to get discounts applied to a product use the
            AppliedProducts response group. Available response groups:
            ApplicableDiscounts, VariationOptions, and BaseProductCode."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductTypeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductTypeCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ProductType
      summary: Add or create product type
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductType"
      description: Add or create product type
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}":
    get:
      tags:
        - ProductType
      summary: Get product type by Id
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductType"
      description: Get product type by Id
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ProductType
      summary: Update product type
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductType"
      description: Update product type
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ProductType
      summary: Delete product type
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: Delete product type
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/variations":
    post:
      tags:
        - ProductType
      parameters:
        - name: productTypeId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: productCode
          in: query
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductAdminProductOption"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVariationPagedCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductVariationPagedCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductVariationPagedCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras":
    get:
      tags:
        - ProductType
      summary: Get extras
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
      description: Get extras
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ProductType
      summary: Add extra
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Add extra
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}":
    get:
      tags:
        - ProductType
      summary: Get extra
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Get extra
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ProductType
      summary: Update extra
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Update extra
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ProductType
      summary: Delete extra
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete extra
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options":
    get:
      tags:
        - ProductType
      summary: Get options for the product type
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
      description: Get options for the product type
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ProductType
      summary: Add option
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Add option
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}":
    get:
      tags:
        - ProductType
      summary: Get individual option
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Get individual option
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ProductType
      summary: Update option
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Update option
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ProductType
      summary: Delete option
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete option
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties":
    get:
      tags:
        - ProductType
      summary: Get properties
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
      description: Get properties
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ProductType
      summary: Add or create property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Add or create property
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}":
    get:
      tags:
        - ProductType
      summary: Get property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Get property
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ProductType
      summary: Update property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Update property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ProductType
      summary: Delete property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete property
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties":
    get:
      tags:
        - ProductType
      summary: Get properties
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeInProductType"
      description: Get properties
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ProductType
      summary: Add or create property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Add or create property
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}":
    get:
      tags:
        - ProductType
      summary: Get property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Get property
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ProductType
      summary: Update property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeInProductType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/json:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
            text/plain:
              schema:
                $ref: "#/components/schemas/AttributeInProductType"
      description: Update property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ProductType
      summary: Delete property
      parameters:
        - name: productTypeId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete property
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/publishing/publishdrafts:
    post:
      tags:
        - Publishing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishingScope"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/publishing/discarddrafts:
    post:
      tags:
        - Publishing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishingScope"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/publishing/publishsets:
    get:
      tags:
        - Publishing
      summary: Retrieves a list of PublishSets including the product counts
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishSetCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PublishSetCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PublishSetCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Publishing
      summary: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishSet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishSet"
            text/json:
              schema:
                $ref: "#/components/schemas/PublishSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/PublishSet"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/publishing/publishsets/{publishSetCode}":
    get:
      tags:
        - Publishing
      summary: Retrieves the details of a single PublishSet
      parameters:
        - name: publishSetCode
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishSet"
            text/json:
              schema:
                $ref: "#/components/schemas/PublishSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/PublishSet"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Publishing
      summary: Removes all details about a PublishSet from the product service
      parameters:
        - name: publishSetCode
          in: path
          description: The code of the PublishSet to delete
          required: true
          schema:
            type: string
        - name: discardDrafts
          in: query
          description: Whether to also discard the drafts for this publish set.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
      description: |-
        
        If the discardDrafts param is true, it also deletes the product drafts.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/synonym-definitions/{localeCode}":
    get:
      tags:
        - Search
      parameters:
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Search
      parameters:
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SynonymDefinitionCollection"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/master-catalog-synonym-definitions/{languageCode}":
    get:
      tags:
        - Search
      parameters:
        - name: languageCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/synonyms:
    get:
      tags:
        - Search
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionPagedCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionPagedCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinitionPagedCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SynonymDefinition"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/synonyms/{synonymId}":
    get:
      tags:
        - Search
      parameters:
        - name: synonymId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      parameters:
        - name: synonymId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SynonymDefinition"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/SynonymDefinition"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      parameters:
        - name: synonymId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/searchtuningrules:
    get:
      tags:
        - Search
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchTuningRule"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}":
    get:
      tags:
        - Search
      parameters:
        - name: searchTuningRuleCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      parameters:
        - name: searchTuningRuleCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchTuningRule"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchTuningRule"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      parameters:
        - name: searchTuningRuleCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/searchtuningrulesortfields:
    get:
      tags:
        - Search
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleSortFields"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleSortFields"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleSortFields"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchTuningRuleSortFields"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleSortFields"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleSortFields"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchTuningRuleSortFields"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/campaigns:
    get:
      tags:
        - Search
      summary: Get site search campaign list
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignSettingsCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CampaignSettingsCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CampaignSettingsCollection"
      description: Get site search campaign list
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Campaign Settings for a specific site
      parameters:
        - name: fromSystemDefault
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CampaignSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
      description: Adds or Updates (Upsert) the Campaign Settings for a specific site
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/campaigns/{campaignId}":
    get:
      tags:
        - Search
      summary: Get site search campaign
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
      description: Get site search campaign
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Campaign Settings for a specific site and
        campaign
      parameters:
        - name: campaignId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CampaignSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
      description: Adds or Updates (Upsert) the Campaign Settings for a specific site
        and campaign
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Campaign Settings for a specific site and
        campaign
      parameters:
        - name: campaignId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/CampaignSettings"
      description: Adds or Updates (Upsert) the Campaign Settings for a specific site
        and campaign
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/{name}/categorysuggestsettings":
    get:
      tags:
        - Search
      summary: Get CategorySuggestSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
      description: Get CategorySuggestSettings for a specific SearchSettings
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the CategorySuggestSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuggestSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
      description: Adds or Updates (Upsert) the CategorySuggestSettings for a specific
        SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Deletes the CategorySuggestSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes the CategorySuggestSettings for a specific SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/{name}/listingsettings":
    get:
      tags:
        - Search
      summary: Get ListingSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/ListingSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/ListingSettings"
      description: Get ListingSettings for a specific SearchSettings
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/ListingSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/ListingSettings"
      description: Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Deletes the ListingSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes the ListingSettings for a specific SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/{name}/productsuggestsettings":
    get:
      tags:
        - Search
      summary: Get ProductSuggestSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SuggestSettings"
      description: Get ProductSuggestSettings for a specific SearchSettings
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the ProductSuggestSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductSuggestSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSuggestSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSuggestSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSuggestSettings"
      description: Adds or Updates (Upsert) the ProductSuggestSettings for a specific
        SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Deletes the ProductSuggestSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes the ProductSuggestSettings for a specific SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/redirect:
    get:
      tags:
        - Search
      summary: Get search redirect list
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRedirectCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchRedirectCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchRedirectCollection"
      description: Get search redirect list
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Search
      summary: Adds a search redirect for a specific site
      parameters:
        - name: fromSystemDefault
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRedirect"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
      description: Adds a search redirect for a specific site
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/redirect/{redirectId}":
    get:
      tags:
        - Search
      summary: Get a search redirect
      parameters:
        - name: redirectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
      description: Get a search redirect
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) a specific search redirect for a site
      parameters:
        - name: redirectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRedirect"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
      description: Adds or Updates (Upsert) a specific search redirect for a site
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Deletes a specific redirect for a site
      parameters:
        - name: redirectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchRedirect"
      description: Deletes a specific redirect for a site
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/settings:
    get:
      tags:
        - Search
      summary: Get site search settings list
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSettingsCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSettingsCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSettingsCollection"
      description: Get site search settings list
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Search Settings for a specific site
      parameters:
        - name: fromSystemDefault
          in: query
          schema:
            type: boolean
            default: false
        - name: name
          in: query
          schema:
            type: string
        - name: makeDefault
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSettings"
      description: Adds or Updates (Upsert) the Search Settings for a specific site
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/settings/{name}":
    get:
      tags:
        - Search
      summary: Get site search settings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSettings"
      description: Get site search settings
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Search Settings for a specific site
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSettings"
      description: Adds or Updates (Upsert) the Search Settings for a specific site
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Search Settings for a specific site
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSettings"
      description: Adds or Updates (Upsert) the Search Settings for a specific site
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/search/settings/systemdefault:
    get:
      tags:
        - Search
      summary: Get the System Default search settings
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSettings"
      description: Get the System Default search settings
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/search/{name}/sitesearchsettings":
    get:
      tags:
        - Search
      summary: Get SiteSearchSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SiteSearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SiteSearchSettings"
      description: Get SiteSearchSettings for a specific SearchSettings
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the SiteSearchSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteSearchSettings"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSearchSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/SiteSearchSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/SiteSearchSettings"
      description: Adds or Updates (Upsert) the SiteSearchSettings for a specific
        SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Search
      summary: Deletes the SiteSearchSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes the SiteSearchSettings for a specific SearchSetting
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/campaigns/all:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCampaign
      summary: Returns list of campaigns
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CampaignResult"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CampaignResult"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CampaignResult"
      description: Returns list of campaigns
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/campaigns/{campaignId}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCampaign
      summary: Returns specific campaign
      parameters:
        - name: campaignId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignResult"
            text/json:
              schema:
                $ref: "#/components/schemas/CampaignResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/CampaignResult"
      description: Returns specific campaign
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/currencies/exchangerates:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCurrency
      summary: Retrieves a list of currency exchange rates based on the context's
        currency code
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoreFrontProductCurrencyExchangeRate"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoreFrontProductCurrencyExchangeRate"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoreFrontProductCurrencyExchangeRate"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/pricelists/resolved:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontPriceList
      parameters:
        - name: customerAccountId
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolvedPriceList"
            text/json:
              schema:
                $ref: "#/components/schemas/ResolvedPriceList"
            text/plain:
              schema:
                $ref: "#/components/schemas/ResolvedPriceList"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontPriceList
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolvedPriceList"
            text/json:
              schema:
                $ref: "#/components/schemas/ResolvedPriceList"
            text/plain:
              schema:
                $ref: "#/components/schemas/ResolvedPriceList"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/pricelists/{priceListCode}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontPriceList
      summary: Retrieves the price list for the given priceListCode
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductPriceList"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductPriceList"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductPriceList"
      description: Retrieves the price list for the given priceListCode
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/categories/tree:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductCategory
      summary: Retrieves the list of product categories that appear on the storefront
        organized in a hierarchical format
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategoryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategoryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategoryCollection"
      description: Hidden categories do not appear in the list.
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/categories:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductCategory
      summary: Retrieves a list of product categories that appear on the storefront as
        a flat list
      parameters:
        - name: filter
          in: query
          description: "Optional. A set of filter expressions representing the search
            parameters for a query:\r

            \            eq=equals, ne=not equals, gt=greater than,
            lt = less than, gt = greater than or equals, le = less than or
            equals,\r

            \            sw = starts with, or cont = contains."
          schema:
            type: string
        - name: startIndex
          in: query
          description: "Optional. Used to page results from a query.\r

            \            Indicates the zero-based offset in the
            complete result set where the returned entities begin.\r

            \            For example, with a pageSize of 25, to get
            the 51st through the 75th items, startIndex=3.\r

            \            The default value is 0."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: "Optional. Used to page results from a query.\r

            \            Indicates the maximum number of entities to
            return from a query. Default value: 20. Maximum value: 200."
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: "The element to sort the results by and the order in which the
            results appear.\r

            \            Either ascending order (a-z) which accepts
            'asc' or 'ASC' or descending order (z-a) which accepts 'desc' or
            'DESC'.\r

            \            The sortBy parameter follows an available
            property.\r

            \            For example, to sort results by category ID
            ascending, use sortBy=categoryId asc."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategoryPagedCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategoryPagedCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategoryPagedCollection"
      description: |-
        
        Hidden categories do not appear in the list.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/categories/{categoryId}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductCategory
      summary: Retrieves the name and details of a category that appears on the
        storefront
      parameters:
        - name: categoryId
          in: path
          description: Required. Unique identifier of the category whose details you want
            to get.
          required: true
          schema:
            type: integer
            format: int32
        - name: allowInactive
          in: query
          description: Optional. Allow the return of items with the IsDisplayed flag set
            to false.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategory"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategory"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductCategory"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/products:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      summary: Retrieves a list of products that appear on the storefront according to
        any specified filter criteria and sort options
      parameters:
        - name: filter
          in: query
          description: "Optional. A set of filter expressions representing the search
            parameters for a query: eq=equals, ne=not equals, gt=greater than,
            lt = less than, gt = greater than or equals, le = less than or
            equals, sw = starts with, or cont = contains."
          schema:
            type: string
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a pageSize of 25, to get the 51st through the 75th
            items, startIndex=3. Default value: 0."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: "Used to page results from a query. Indicates the maximum number of
            entities to return from a single query. Default value: 20. Maximum
            value: 200."
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: "Optional. Sort the results by and the order in which the results
            appear. Either ascending order (a-z) which accepts 'asc' or 'ASC' or
            descending order (z-a) which accepts 'desc' or 'DESC'. The sortBy
            parameter follows an available property. For example, to sort the
            results by “ID” ascending then by “CreateDate” descending, use: id
            asc,createdate desc."
          schema:
            type: string
        - name: responseGroups
          in: query
          description: Optional. Response groups to be determined.
          schema:
            type: string
        - name: responseOptions
          in: query
          description: ""
          schema:
            type: string
        - name: cursorMark
          in: query
          description: Pass in * to begin a deep page operation. The response will include
            a nextCursorMark value. Pass this into the next call. Continue with
            this pattern until nextCursorMark is null.
          schema:
            type: string
        - name: defaultSort
          in: query
          schema:
            type: string
        - name: mid
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductProductCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductProductCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductProductCollection"
      description: |-
        
        The following filter criteria can be applied: @FilterSet1@
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/products/{productCode}/locationinventory":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: locationCodes
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductLocationInventoryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductLocationInventoryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductLocationInventoryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/products/locationinventory:
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationInventoryQuery"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductLocationInventoryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductLocationInventoryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductLocationInventoryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/products/costs:
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCostQuery"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCostCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductCostCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductCostCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/products/{productCode}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      summary: Retrieves information about a single product given its product code
      parameters:
        - name: productCode
          in: path
          description: "Required. Merchant-created code associated with the product, for
            example, a SKU. Max length: 30."
          required: true
          schema:
            type: string
        - name: variationProductCode
          in: query
          description: "Optional. Merchant-created code associated with a specific product
            variation. Max length: #."
          schema:
            type: string
        - name: responseGroups
          in: query
          description: Optional. Response groups to be determined.
          schema:
            type: string
        - name: allowInactive
          in: query
          description: Optional. If true, return a product if it is located but inactive.
          schema:
            type: boolean
        - name: skipInventoryCheck
          in: query
          description: Determines whether or not to check inventory on an item when
            validating
          schema:
            type: boolean
            default: false
        - name: supressOutOfStock404
          in: query
          description: Optional. If true, will still return the product, even if product
            is out of stock and the out of stock behavior is set to “Hide
            Product in Store”. If false or omitted, the same product will return
            a 404 not found. Suppressing the 404 not found is useful for site
            SEO.
          schema:
            type: boolean
            default: false
        - name: quantity
          in: query
          description: Optional.  If specified, will be used for returning pricing based
            on volume if applicable.  Defaults to 1 if not specified.
          schema:
            type: integer
            format: int32
        - name: acceptVariantProductCode
          in: query
          schema:
            type: boolean
            default: false
        - name: purchaseLocation
          in: query
          schema:
            type: string
        - name: variationProductCodeFilter
          in: query
          schema:
            type: string
        - name: sliceValue
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductProduct"
            text/json:
              schema:
                $ref: "#/components/schemas/StoreFrontProductProduct"
            text/plain:
              schema:
                $ref: "#/components/schemas/StoreFrontProductProduct"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/products/indexing/{productCode}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      summary: Retrieves information about a single product given its product code for
        Mozu to index in the search engine
      parameters:
        - name: productCode
          in: path
          description: "Required. Merchant-created code associated with the product, for
            example, a SKU. Max length: 30."
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          description: Optional. Response groups to be determined.
          schema:
            type: string
        - name: productVersion
          in: query
          description: "Optional. The current version of the product to use for latency
            checking. \r

            \            \tIf this instance of Product Runtime is
            configured to run against a replicated database node that has a
            lesser version than this value, it will read from the primary
            database node to prevent stale data."
          schema:
            type: integer
            format: int64
        - name: lastModifiedDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductForIndexing"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductForIndexing"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductForIndexing"
      description: Retrieves information about a single product given its product code
        for Mozu to index in the search engine
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/products/{productCode}/configure":
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      summary: Creates a new product selection
      parameters:
        - name: productCode
          in: path
          description: "Merchant-created code for the product being configured, for
            example, a SKU. Max length: 30."
          required: true
          schema:
            type: string
        - name: includeOptionDetails
          in: query
          description: If true, the response returns product details such as. If false,
            returns a product summary such as the product name, price, and sale
            price.
          schema:
            type: boolean
        - name: skipInventoryCheck
          in: query
          description: Determines whether or not to check inventory on an item when
            validating
          schema:
            type: boolean
            default: false
        - name: quantity
          in: query
          description: Optional.  If specified, will be used for returning pricing based
            on volume if applicable.  Defaults to 1 if not specified.
          schema:
            type: integer
            format: int32
        - name: purchaseLocation
          in: query
          schema:
            type: string
        - name: variationProductCodeFilter
          in: query
          schema:
            type: string
      requestBody:
        description: Shopper-selected options.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOptionSelections"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfiguredProduct"
            text/json:
              schema:
                $ref: "#/components/schemas/ConfiguredProduct"
            text/plain:
              schema:
                $ref: "#/components/schemas/ConfiguredProduct"
      description: A create occurs each time a shopper selects a product option as
        they configure a product. Once all the required product options are
        configured, the product can be added to a cart.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/products/{productCode}/validate":
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      summary: Validate the final state of shopper-selected options
      parameters:
        - name: productCode
          in: path
          description: Merchant-created code of product being validated.
          required: true
          schema:
            type: string
        - name: skipInventoryCheck
          in: query
          description: Determines whether or not to check inventory on an item when
            validating
          schema:
            type: boolean
            default: false
        - name: quantity
          in: query
          description: Optional.  If specified, will be used for returning pricing based
            on volume if applicable.  Defaults to 1 if not specified.
          schema:
            type: integer
            format: int32
        - name: skipDefaults
          in: query
          description: Determines whether or not to add configured default-extras on an
            item when validating
          schema:
            type: boolean
            default: false
        - name: purchaseLocation
          in: query
          schema:
            type: string
      requestBody:
        description: Final state of shopper selected options.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOptionSelections"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductValidationSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductValidationSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductValidationSummary"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/products/{productCode}/validateDiscounts":
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      summary: Validate if a collection of discounts is valid for a product
      parameters:
        - name: productCode
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: variationProductCode
          in: query
          description: ""
          schema:
            type: string
        - name: customerAccountId
          in: query
          description: Customer Id may be set in the querystring or in the user claims bag
            if the caller context is a shopper.
          schema:
            type: integer
            format: int32
        - name: allowInactive
          in: query
          description: ""
          schema:
            type: boolean
        - name: skipInventoryCheck
          in: query
          description: ""
          schema:
            type: boolean
            default: false
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountSelections"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountValidationSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/DiscountValidationSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/DiscountValidationSummary"
      description: " This includes discounts that would normally be considered order
        level discounts."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/productsearch/suggest:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      summary: Suggests possible search terms as the shopper enters search text
      parameters:
        - name: query
          in: query
          description: Comma delimited list of suggestion groups that should be returned.
            The default is everything
          schema:
            type: string
        - name: groups
          in: query
          description: ""
          schema:
            type: string
        - name: pageSize
          in: query
          description: Indicates the maximum number of entities to return from a query.
            The default value is 10 and the maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: mid
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSuggestionResult"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSuggestionResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSuggestionResult"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/productsearch/suggest2:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      summary: Suggests possible search terms as the shopper enters search text
      parameters:
        - name: query
          in: query
          description: Comma delimited list of suggestion groups that should be returned.
            The default is everything
          schema:
            type: string
        - name: groups
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          description: Indicates the maximum number of entities to return from a query.
            The default value is 10 and the maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: searchSettingsName
          in: query
          schema:
            type: string
        - name: mid
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSuggestionResult"
            text/json:
              schema:
                $ref: "#/components/schemas/SearchSuggestionResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/SearchSuggestionResult"
      description: " Utlizes new SearchSettings resource to drive search."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/productsearch/visualsearch:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      parameters:
        - name: SearchTerm
          in: query
          required: true
          schema:
            minLength: 2
            type: string
        - name: Filters
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RequestFilter"
        - name: Returnfields
          in: query
          schema:
            type: array
            items:
              type: string
        - name: Searchfields
          in: query
          schema:
            type: array
            items:
              type: string
        - name: Ignoregrouping
          in: query
          schema:
            type: boolean
        - name: NumResults
          in: query
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
        - name: PageNumber
          in: query
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
        - name: ApplicationId
          in: query
          schema:
            maxLength: 50
            minLength: 1
            type: string
        - name: CatalogId
          in: query
          schema:
            maxLength: 50
            minLength: 1
            type: string
        - name: SessionId
          in: query
          schema:
            maxLength: 100
            type: string
        - name: TrackingId
          in: query
          schema:
            maxLength: 100
            type: string
        - name: ApiKey
          in: query
          schema:
            type: string
        - name: Revision
          in: query
          schema:
            type: string
        - name: Cip
          in: query
          schema:
            type: string
        - name: DisplayDebug
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VisualSearchResult"
            text/json:
              schema:
                $ref: "#/components/schemas/VisualSearchResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/VisualSearchResult"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/productsearch/randomAccessCursor:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      summary: Generate a cursor that then allows you to retrieve all products with
        efficient deep paging
      parameters:
        - name: query
          in: query
          description: Optional terms to search on. Only matching products will be
            included in the cursor.
          schema:
            type: string
        - name: filter
          in: query
          description: Optional set of filter expressions to filter on. Only matching
            products will be included in the cursor.
          schema:
            type: string
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchRandomAccessCursor"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSearchRandomAccessCursor"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSearchRandomAccessCursor"
      description: "

        Optionally provide a query and/or filter to generate a cursor
        for a subset of products.\r

        After retrieving the cursor, provide a cursorMark to the
        cursorMark argument of the /search or /getProducts operations.\r

        You may provide cursorMarks in any order or even in parallel
        operations."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/productsearch/search:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      summary: Searches the categories displayed on the storefront for products or
        product options that the shopper types in a search query
      parameters:
        - name: query
          in: query
          description: The terms to search on.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: facetTemplate
          in: query
          schema:
            type: string
        - name: facetTemplateSubset
          in: query
          schema:
            type: string
        - name: facet
          in: query
          schema:
            type: string
        - name: facetFieldRangeQuery
          in: query
          schema:
            type: string
        - name: facetHierPrefix
          in: query
          schema:
            type: string
        - name: facetHierValue
          in: query
          schema:
            type: string
        - name: facetHierDepth
          in: query
          schema:
            type: string
        - name: facetStartIndex
          in: query
          schema:
            type: string
        - name: facetPageSize
          in: query
          schema:
            type: string
        - name: facetSettings
          in: query
          schema:
            type: string
        - name: facetValueFilter
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 12 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. The
            default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: searchSettings
          in: query
          schema:
            type: string
        - name: enableSearchTuningRules
          in: query
          schema:
            type: boolean
            default: true
        - name: searchTuningRuleContext
          in: query
          schema:
            type: string
        - name: searchTuningRuleCode
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: facetTemplateExclude
          in: query
          schema:
            type: string
        - name: facetPrefix
          in: query
          schema:
            type: string
        - name: responseOptions
          in: query
          schema:
            type: string
        - name: cursorMark
          in: query
          description: Pass in * to begin a deep page operation. The response will include
            a nextCursorMark value. Pass this into the next call. Continue with
            this pattern until nextCursorMark is null.
          schema:
            type: string
        - name: facetValueSort
          in: query
          schema:
            type: string
        - name: defaultSort
          in: query
          schema:
            type: string
        - name: sortDefinitionName
          in: query
          schema:
            type: string
        - name: defaultSortDefinitionName
          in: query
          schema:
            type: string
        - name: shouldSlice
          in: query
          schema:
            type: boolean
        - name: mid
          in: query
          schema:
            type: string
        - name: omitNamespace
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/productsearch/siteSearch:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: facetTemplate
          in: query
          schema:
            type: string
        - name: facetTemplateSubset
          in: query
          schema:
            type: string
        - name: facet
          in: query
          schema:
            type: string
        - name: facetFieldRangeQuery
          in: query
          schema:
            type: string
        - name: facetHierPrefix
          in: query
          schema:
            type: string
        - name: facetHierValue
          in: query
          schema:
            type: string
        - name: facetHierDepth
          in: query
          schema:
            type: string
        - name: facetStartIndex
          in: query
          schema:
            type: string
        - name: facetPageSize
          in: query
          schema:
            type: string
        - name: facetSettings
          in: query
          schema:
            type: string
        - name: facetValueFilter
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: searchSettings
          in: query
          schema:
            type: string
        - name: enableSearchTuningRules
          in: query
          schema:
            type: boolean
            default: true
        - name: searchTuningRuleContext
          in: query
          schema:
            type: string
        - name: searchTuningRuleCode
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: facetTemplateExclude
          in: query
          schema:
            type: string
        - name: facetPrefix
          in: query
          schema:
            type: string
        - name: responseOptions
          in: query
          schema:
            type: string
        - name: cursorMark
          in: query
          schema:
            type: string
        - name: facetValueSort
          in: query
          schema:
            type: string
        - name: defaultSort
          in: query
          schema:
            type: string
        - name: sortDefinitionName
          in: query
          schema:
            type: string
        - name: defaultSortDefinitionName
          in: query
          schema:
            type: string
        - name: shouldSlice
          in: query
          schema:
            type: boolean
        - name: mid
          in: query
          schema:
            type: string
        - name: fieldList
          in: query
          schema:
            type: string
        - name: omitNamespace
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
            text/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/storefront/searchredirect/redirects:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSearchRedirect
      summary: Get all search redirect items
      responses:
        "200":
          description: Success
      description: Get all search redirect items
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/storefront/searchredirect/{redirectId}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSearchRedirect
      summary: Get  search redirect item by redirectId
      parameters:
        - name: redirectId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Get  search redirect item by redirectId
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/searchSchema/fieldTypes/{language}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontFieldTypeDefinition
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FieldTypeDefinitionRepositoryEntry"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FieldTypeDefinitionRepositoryEntry"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FieldTypeDefinitionRepositoryEntry"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/searchSchema/definition:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/searchSchema/definition/{language}":
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: published
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaDefinition"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
            text/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
            text/plain:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/searchSchema/definition/{language}/revert":
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            text/plain:
              schema:
                type: boolean
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/catalog/admin/searchSchema/definition/{language}/publish":
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: reindex
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            text/plain:
              schema:
                type: boolean
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/searchSchema/synonyms/reload:
    post:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSynonym
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            text/plain:
              schema:
                type: boolean
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/catalog/admin/searchSchema/synonyms:
    get:
      tags:
        - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSynonym
      parameters:
        - name: language
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []
          clientOauth2: []
tags:
  - name: Attribute
    x-displayName: Attribute
  - name: Category
    x-displayName: Category
  - name: CoreFields
    x-displayName: CoreFields
  - name: CouponSet
    x-displayName: CouponSet
  - name: Currency
    x-displayName: Currency
  - name: Discount
    x-displayName: Discount
  - name: DiscountSettings
    x-displayName: DiscountSettings
  - name: Facet
    x-displayName: Facet
  - name: LocationInventory
    x-displayName: LocationInventory
  - name: MasterCatalog
    x-displayName: MasterCatalog
  - name: PriceList
    x-displayName: PriceList
  - name: Product
    x-displayName: Product
  - name: ProductSortDefinition
    x-displayName: ProductSortDefinition
  - name: ProductType
    x-displayName: ProductType
  - name: Publishing
    x-displayName: Publishing
  - name: Search
    x-displayName: Search
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCampaign
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCampaign
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCurrency
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCurrency
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontPriceList
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontPriceList
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductCategory
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductCategory
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSearchRedirect
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSearchRedirect
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontFieldTypeDefinition
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontFieldTypeDefinition
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
  - name: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSynonym
    x-displayName: StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSynonym
x-tagGroups:
  - name: productadmin
    tags:
      - Attribute
      - Category
      - CoreFields
      - CouponSet
      - Currency
      - Discount
      - DiscountSettings
      - Facet
      - LocationInventory
      - MasterCatalog
      - PriceList
      - Product
      - ProductSortDefinition
      - ProductType
      - Publishing
      - Search
  - name: productruntime
    tags:
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCampaign
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontCurrency
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontPriceList
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductCategory
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProduct
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontProductSearch
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSearchRedirect
  - name: solrschemamanager
    tags:
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontFieldTypeDefinition
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSchemaDefinition
      - StoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontStoreFrontSynonym
components:
  schemas:
    ProductAdminAttributeMetadataItem:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
      description: Attribute Metadata Item.  It can be utilized for storing abitrary
        key/value pairs of data related to an attribute.
    ProductAdminAttributeLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: Language used for the attribute name and description. Currently,
            only en_US is supported.
          nullable: true
        name:
          type: string
          description: Name of the attribute in the language specified by LocaleCode.
          nullable: true
        description:
          type: string
          description: Description of the attribute in the language specified by LocaleCode.
          nullable: true
      additionalProperties: false
      description: Container for language-specific content to display on the
        storefront. You'll have a container for each supported language
        (LocaleCode). This enables you to display an attribute in multiple
        languages yet manage it as a single attribute internally.
    ProductAdminAttributeValidation:
      type: object
      properties:
        regularExpression:
          type: string
          description: Regular expression to run against the attribute value. This should
            follow JavaScript/EMCA's Regular Expression syntax.
          nullable: true
        minStringLength:
          type: integer
          description: For validating strings, minimum length allowed for a string.
          format: int32
          nullable: true
        maxStringLength:
          type: integer
          description: For validating strings, maximum length allowed for a string.
          format: int32
          nullable: true
        minNumericValue:
          type: number
          description: For validating Number attribute value, minimum number allowed.
          format: double
          nullable: true
        maxNumericValue:
          type: number
          description: For validating Number attribute value, maximum number allowed.
          format: double
          nullable: true
        minDateValue:
          type: string
          description: For validating a DateTime attribute value, minimum datetime allowed.
          format: date-time
          nullable: true
        maxDateValue:
          type: string
          description: For validating a DateTime attribute value, maximum datetime allowed.
          format: date-time
          nullable: true
      additionalProperties: false
      description: Used to validate attributes.
    AttributeVocabularyValueLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: Language used for the string attribute value. Currently, only en_US
            is supported.
          nullable: true
        stringValue:
          type: string
          description: Localized Value in the language of the locale code
          nullable: true
      additionalProperties: false
      description: Attribute Value Localized Resource
    ProductAdminAttributeVocabularyValue:
      type: object
      properties:
        valueSequence:
          type: integer
          description: Read only System generated monotonically increasing unique sequence.
          format: int32
          nullable: true
        value:
          description: "The actual value of the attribute vocabulary. This value must be
            unique within the vocabulary for a single attribute and match the
            datatype of the attribute. \r

            String data type requires a canonical value here or one
            will be system generated if null. The actual string content
            displayed to users should be stored as Content. \r

            String values require content to be present.\r

            Once this value is set it cannot be changed."
          nullable: true
        mappedGenericValues:
          type: array
          items: {}
          description: "The actual values of the related generic attribute. This value
            must match the datatype of the attribute and already exist \r

            within the Vocabulary values of the related
            ValueMappingAttribute. Only supporting string at this time."
          nullable: true
        productName:
          type: string
          description: The ProductName when the Attribute DataType is ProductCode.
          nullable: true
        content:
          $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
        localizedContent:
          type: array
          items:
            $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
          description: The Content of an attribute value. This content is in multiple
            locals supported by the master catalog and is only valid for String
            DataType.
          nullable: true
        displayOrder:
          type: integer
          description: The order in which the attribute value displays. If you omit a
            value for this property, Mozu infers the display order from the
            attribute value's position the list.
          format: int32
          nullable: true
      additionalProperties: false
      description: Value of an attribute
    AttributeSearchSettings:
      type: object
      properties:
        searchableInStorefront:
          type: boolean
          description: Indicates whether the attribute value should be searchable on the
            public storefront.
        searchableInAdmin:
          type: boolean
          description: Indicates whether the attribute value should be searchable in the
            merchant catalog admin.
        searchDisplayValue:
          type: boolean
          description: "If true, the system will index the display value of string
            attributes instead of the canonical value for searching. \r

            The canonical value will always be used for filtering.
            Does not apply for for non-string attributes."
        allowFilteringAndSortingInStorefront:
          type: boolean
          description: Indicates whether the attribute should be able to be used in
            filters, facets, and sorting on the public storefront.
          nullable: true
        indexValueWithCase:
          type: boolean
          description: "Indicates whether the attribute value is case sensative for
            filtering and faceting. This applies to Text Admin entered
            attributes. \r

            A null value means it is not case sensative"
          nullable: true
        customWeightInStorefrontSearch:
          type: boolean
          description: Indicates whether the attribute is indevidually stored as a
            tokenized field in search for custom term search weight
          nullable: true
      additionalProperties: false
      description: Attribute Search Settings. A container for all of the search and
        indexing settings of an Attribute
    AdminUserAuditInfo:
      type: object
      properties:
        updateDate:
          type: string
          format: date-time
          nullable: true
        createDate:
          type: string
          format: date-time
          nullable: true
        updateBy:
          type: string
          nullable: true
        createBy:
          type: string
          nullable: true
      additionalProperties: false
    ProductAdminAttribute:
      type: object
      properties:
        adminName:
          type: string
          description: Name of the product displayed in the admin, This field does not
            need to be unqiue, but is required. It can include spaces...and is
            limited to a length of 50.
          nullable: true
        namespace:
          type: string
          description: "NameSpace, each application creating attributes will have a uniqe
            namespace to avoid name (Code) collisions. The namespace provided
            must be a valid registered\r

            namespace. If no namespace is specified it is assumed to
            be the namespace of the Tenant."
          nullable: true
        attributeCode:
          type: string
          description: "Unique identifier of the Attribute. Must be unique within a
            namespace and cannot be changed once the attribute is created. This
            value will be generated and match the attribute\r

            sequence if not provided on create."
          nullable: true
        attributeFQN:
          type: string
          description: Attribute fully qualified name, Read only value that combines
            namespace and attribute code as NameSpace~AttributeCode
          nullable: true
        isValueMappingAttribute:
          type: boolean
          description: Specifies if this attribute can can be used to generalize values of
            another attribute
          nullable: true
        valueMappingAttributeFQN:
          type: string
          description: Attribute fully qualified name of a corresponding value mapping
            atribuite
          nullable: true
        attributeSequence:
          type: integer
          description: Read only System generated monotonically increasing unique sequence
            for each attribute created.
          format: int32
          nullable: true
        attributeDataTypeSequence:
          type: integer
          description: Read only System generated monotonically increasing unique sequence
            for each attribute,DataType created (this is used to optimize
            indexed field names in search).
          format: int32
          nullable: true
        masterCatalogId:
          type: integer
          description: Indentifier of the master that this attribute is a member of.
            System-supplied and read-only. Attributes will be created in the
            MasterCatalog of the supplied context.
          format: int32
          nullable: true
        inputType:
          maxLength: 20
          type: string
          description: "The InputType type of the attribute. Must be a valid value for
            InputType defined in InputTypeConst and the combination of types set
            must match an entry in the AttributeTypeRules resource. \r

            This value cannot be changed after create"
          nullable: true
        valueType:
          maxLength: 20
          type: string
          description: "The ValueType of the attribute.  Must be a valid value for
            ValueType defined in ValueTypeTypeConst and the combination of types
            set must match an entry in the AttributeTypeRules resource. \r

            This value cannot be changed after create"
          nullable: true
        dataType:
          maxLength: 20
          type: string
          description: "The DataType of the attribute.  Must be a valid value for DataType
            defined in DataTypeTypeConst and the combination of types set must
            match an entry in the AttributeTypeRules resource. \r

            This value cannot be changed after create"
          nullable: true
        isOption:
          type: boolean
          description: Specifies if this attribute can have a usage type of Option in a
            ProductType. This value can only be true when when it matches an
            AttributeTypeRule in the AttributeTypeRules resource.
          nullable: true
        isExtra:
          type: boolean
          description: Specifies if this attribute can have a usage type of Extra in a
            ProductType. This value can only be true when when it matches an
            AttributeTypeRule in the AttributeTypeRules resource.
          nullable: true
        isProperty:
          type: boolean
          description: Specifies if this attribute can have a usage type of Property in a
            ProductType. This value can only be true when when it matches an
            AttributeTypeRule in the AttributeTypeRules resource.
          nullable: true
        attributeMetadata:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminAttributeMetadataItem"
          description: Attribute Metadata. This list can contain opaque data (key value
            pairs) that can be used as a property bag for UI concerns.
          nullable: true
        content:
          $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
        localizedContent:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminAttributeLocalizedContent"
          description: The Content of an attribute. This content is always in the default
            language of the MasterCatalog.
          nullable: true
        validation:
          $ref: "#/components/schemas/ProductAdminAttributeValidation"
        vocabularyValues:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
          description: The list of Values for this attribute. Only available for
            ValueType:PredefinedVocabulary
          nullable: true
        searchSettings:
          $ref: "#/components/schemas/AttributeSearchSettings"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Attribute
    ProductAdminAttributeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminAttribute"
          nullable: true
      additionalProperties: false
      description: Collection of attributes.
    AttributeTypeRule:
      type: object
      properties:
        attributeInputType:
          type: string
          description: AttributeInputType identifier
          nullable: true
        attributeDataType:
          type: string
          description: AttributeDataType identifier
          nullable: true
        attributeValueType:
          type: string
          description: AttributeValueType identifier
          nullable: true
        attributeUsageType:
          type: string
          description: AttributeUsageType identifier
          nullable: true
      additionalProperties: false
      description: Attribute Value Localized Resource
    AttributeTypeRuleCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/AttributeTypeRule"
          nullable: true
      additionalProperties: false
      description: A collection of AttributeType rules
    CategoryLocalizedImage:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the image. System-supplied and read-only.
          format: int32
          nullable: true
        localeCode:
          type: string
          description: Language used for the image content.
          nullable: true
        imageLabel:
          type: string
          description: Image title that appears on the storefront.
          nullable: true
        altText:
          type: string
          description: Descriptive text associated with the image or video that appears on
            the storefront.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        videoUrl:
          type: string
          description: URL of a video associated with the category.
          nullable: true
        mediaType:
          type: string
          description: Type of media. Used by the client to determine how to render the
            image or video or what have you.
          nullable: true
        sequence:
          type: integer
          description: For categories with multiple images, the order in which this image
            appears on the storefront.
          format: int32
          nullable: true
      additionalProperties: false
      description: Contains the image label and alternate text for a category image or
        video in the language specified by LocalCode.
    CategoryLocalizedContent:
      type: object
      properties:
        categoryImages:
          type: array
          items:
            $ref: "#/components/schemas/CategoryLocalizedImage"
          description: List of images associated with the category.
          nullable: true
        name:
          type: string
          description: Name of the category.
          nullable: true
        description:
          type: string
          description: Description of the category to display on the storefront.
          nullable: true
        pageTitle:
          type: string
          description: Title that appears at the top of new pages.
          nullable: true
        localeCode:
          type: string
          description: Lanugage used for category content. Currently, only en_US is
            supported.
          nullable: true
        metaTagTitle:
          type: string
          description: Metadata title. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagDescription:
          type: string
          description: Metadata description. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagKeywords:
          type: string
          description: Metadata keywords. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        slug:
          type: string
          description: "Human-readable identifier that you can give to the category to
            create friendly URLs. For example, \r

            instead of \"http:
            //example.com/products?category=2&id=25,\" the friendly URL can be
            \"http: //example.com/products/category/2/25.\""
          nullable: true
      additionalProperties: false
      description: Container for language-specific content to display on the
        storefront. You'll have a container for each supported language
        (LocaleCode). This enables you to display a category in multiple
        languages yet manage it as a single category internally.
    Expression:
      type: object
      properties:
        type:
          type: string
          description: Container or Predicate
          nullable: true
        logicalOperator:
          type: string
          description: And or Or (if Container with More than one Node)
          nullable: true
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Expression"
          nullable: true
        left:
          type: string
          description: The field target of a predicate
          nullable: true
        operator:
          type: string
          description: The operator of a predicate
          nullable: true
        right:
          description: The literal values of a predicate
          nullable: true
      additionalProperties: false
    DynamicExpression:
      type: object
      properties:
        text:
          type: string
          nullable: true
        tree:
          $ref: "#/components/schemas/Expression"
      additionalProperties: false
      description: Category
    ProductAdminCategory:
      type: object
      properties:
        id:
          type: integer
          description: Internal unique identifier of the category. System-supplied and
            read-only.
          format: int32
          nullable: true
        categoryType:
          type: string
          description: The Type of Category Static, Dyanmic, DynamicPreComputed
          nullable: true
        catalogId:
          type: integer
          description: The CatalogId that the category belongs to.
          format: int32
          nullable: true
        parentCategoryId:
          type: integer
          description: Unique identifier of the category to which this category belongs.
            If nil, this is a top-level category. System-supplied and read-only.
          format: int32
          nullable: true
        parentCategoryCode:
          type: string
          nullable: true
        parentCategoryName:
          type: string
          nullable: true
        parentIsActive:
          type: boolean
          nullable: true
        categoryCode:
          type: string
          description: External unique identifier of the category.
          nullable: true
        isActive:
          type: boolean
          description: If false, the category is considered unavailable in runtime
            (default is true if not specified on create)
          nullable: true
        isDisplayed:
          type: boolean
          description: If true, the category appears to shoppers on the storefront.
          nullable: true
        sequence:
          type: integer
          description: Order in which categories appear when they are at the same level
            (siblings). For example, you could change the sequence of categories
            so that a specific category always appears first.
          format: int32
          nullable: true
        content:
          $ref: "#/components/schemas/CategoryLocalizedContent"
        dynamicExpression:
          $ref: "#/components/schemas/DynamicExpression"
        productCount:
          type: integer
          description: Number of products contained in this category. This count includes
            all products contained in any subcategories of this category.
          format: int32
          nullable: true
        childCount:
          type: integer
          description: Number of subcategories that belong to this category. These
            subcategories are at the same level (siblings).
          format: int32
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        shouldSlice:
          type: boolean
          description: If True, search displays sliced view
          nullable: true
      additionalProperties: false
      description: Category
    ProductAdminCategoryPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminCategory"
          nullable: true
      additionalProperties: false
      description: Collection of categories where categories are returned in a series
        of pages.
    ProductAdminCategoryCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminCategory"
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    CoreField:
      type: object
      properties:
        fieldName:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        entityTpe:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
      additionalProperties: false
    CoreFieldCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CoreField"
          nullable: true
      additionalProperties: false
    CouponSet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          description: Internal unique identifier of the couponset. System-supplied and
            read-only.
          format: int32
          nullable: true
        couponSetCode:
          maxLength: 32
          type: string
          description: "Unique tenant supplied identifier.\r

            Used as the prefix for generated sets.\r

            Required\r

            System generated if left null."
          nullable: true
        name:
          maxLength: 200
          type: string
          description: CouponSet Name
        couponCodeType:
          type: string
          description: "Determines if the coupon is a persisted list of codes (static) or
            a list based on generated specification\r

            (dynamic)."
          nullable: true
        status:
          type: string
          description: "CouponSet status which can be: Active, Expired,  Inactive\r

            System-supplied and read-only."
          nullable: true
        canBeDeleted:
          type: boolean
          description: "Signifies that the coupon has not been exported and can be
            updated\r

            ReadOnly"
        maxRedemptionsPerUser:
          type: integer
          description: "Maximum number of times any single user can redeem any code.\r

            Must be null, >=1 or -1.\r

            Defaults to 1 on creation if null.\r

            -1 indicates unlimited."
          format: int32
          nullable: true
        maxRedemptionsPerCouponCode:
          type: integer
          description: "Maximum number of times any code can de used.\r

            Must be null, >=1 or -1.\r

            Defaults to 1 on creation if null.\r

            -1 indicates unlimited."
          format: int32
          nullable: true
        endDate:
          type: string
          description: Date and time that the coupon codes becomes expired
          format: date-time
          nullable: true
        startDate:
          type: string
          description: Date and time that the coupon codes becomes active
          format: date-time
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        setSize:
          type: integer
          description: "Sets the number of codes to generate for dynamic coupons\r

            Required when CouponCodeType is \"Dynamic\""
          format: int32
          nullable: true
        couponCodeCount:
          type: integer
          description: "Count of associated couponCodes.\r

            Must use \"counts\" response group to get this value\r

            ReadOnly"
          format: int32
          nullable: true
        redemptionCount:
          type: integer
          description: ReadOnly count of all redemptions for this coupon set.
          format: int32
          nullable: true
        assignedDiscountCount:
          type: integer
          description: "ReadOnly sum of all redemptions for this coupon.\r

            Use \"counts\" response group."
          format: int32
          nullable: true
      additionalProperties: false
      description: Represents a claimable item that allows a user to use one or more
        discounts.
    CouponSetCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CouponSet"
          nullable: true
      additionalProperties: false
      description: Paged collection of Mozu.ProductAdmin.Contracts.CouponSet
    Coupon:
      required:
        - couponCode
      type: object
      properties:
        couponSetId:
          type: integer
          description: ReadOnly system id for releated couponset.
          format: int32
        couponSetCode:
          type: string
          description: Link to associated coupon
          nullable: true
        couponCode:
          type: string
          description: The code the customer uses to claim this coupon
        canBeDeleted:
          type: boolean
        redemptionCount:
          type: integer
          description: "Total number of times this code has been redeemed. ReadOnly,
            calculated.\r

            Only returned with response group includeCounts"
          format: int32
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Coupon in a coupon set.
    CouponCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Coupon"
          nullable: true
      additionalProperties: false
    AssignedDiscount:
      required:
        - discountId
      type: object
      properties:
        couponSetCode:
          type: string
          description: ReadOnly, CouponSetCode copied from URI
          nullable: true
        couponSetId:
          type: integer
          description: ReadOnly, CouponSetId
          format: int32
        discountId:
          type: integer
          description: Discount Id for the associated discount
          format: int32
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    CurrencyLocalization:
      type: object
      properties:
        currencyCode:
          type: string
          description: Currency Code
          nullable: true
        decimalPlaces:
          type: integer
          description: Number of decimal places to round to
          format: int32
          nullable: true
        roundingStrategy:
          type: integer
          description: The rounding strategy to use
          format: int32
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: A currency and some localization options
    CurrencyLocalizationCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CurrencyLocalization"
          nullable: true
      additionalProperties: false
      description: Non-pages collection of currency-localizations.
    ProductAdminCurrencyExchangeRate:
      required:
        - rate
      type: object
      properties:
        fromCurrencyCode:
          type: string
          description: The source currency code
          nullable: true
        toCurrencyCode:
          type: string
          description: The target currency code
          nullable: true
        rate:
          type: number
          description: The exchange rate
          format: double
        multiplier:
          type: number
          description: An additional multiplier to use in calculations
          format: double
          nullable: true
        referenceData:
          type: string
          description: Reference data for miscellaneous metadata from updates
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: The exchange rate between two currencies
    CurrencyExchangeRateCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminCurrencyExchangeRate"
          nullable: true
      additionalProperties: false
      description: Non-pages collection of currency-exchange-rates.
    DiscountLocalizedContent:
      required:
        - name
      type: object
      properties:
        localeCode:
          maxLength: 8
          minLength: 0
          type: string
          description: Lanugage used for the discount in the current catalog. Defaults
            setting for the active catalog.
          nullable: true
        name:
          maxLength: 200
          minLength: 0
          type: string
          description: Name of the discount.
        friendlyDescription:
          type: string
          description: Promotional text or HTML that can be utilized as friendly content
            like "Buy this product now and get X!"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Container for the language-specific name of the discount. You will
        have a container for each supported language\r

        (LocaleCode).\r

        This enables you to display the discount name in multiple
        languages yet manage it as a single discount internally."
    CategoryDiscountCondition:
      type: object
      properties:
        categoryId:
          type: integer
          description: Unique identifier of the category to which the discount condition
            applies.
          format: int32
      additionalProperties: false
      description: Represents a product category and quantity constraint
    ProductDiscountCondition:
      type: object
      properties:
        productCode:
          type: string
          description: Product code of the product to discount.
          nullable: true
      additionalProperties: false
      description: Represents a product and quantity constraint
    ProductAdminCustomerSegment:
      type: object
      properties:
        id:
          type: integer
          description: "The Customer segment Id.\r

            This is the  system Id not the code."
          format: int32
      additionalProperties: false
      description: Represents a customer segment
    ProductAdminDiscountCondition:
      type: object
      properties:
        maxRedemptionCount:
          type: integer
          description: Maximum number of times that the discount can be redeemed. Default
            is null (no limit to discount redemptions).
          format: int32
          nullable: true
        requiresCoupon:
          type: boolean
          description: If true, the shopper needs to enter a coupon code to redeem the
            discount.
        couponCode:
          type: string
          description: Code of the coupon associated with the discount (if a coupon code
            is required). The merchant can supply the code or the system can
            generate it.
          nullable: true
        requiresAuthenticatedUser:
          type: boolean
          description: "Determines is this discount can be used by an anonymous user \r

            Defaults to false to allow discounts for anonymous
            users."
        includedPaymentWorkflows:
          type: array
          items:
            type: string
          description: List of payment types that trigger this discount to be valid.
          nullable: true
        includedCategories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryDiscountCondition"
          description: List of categories that must be purchased in order for the discount
            to be valid.
          nullable: true
        excludedCategories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryDiscountCondition"
          description: List of categories to discount. When a discount applies to a
            category, all products in the category are discounted.
          nullable: true
        includedProducts:
          type: array
          items:
            $ref: "#/components/schemas/ProductDiscountCondition"
          description: List of products that are eligible for the discount.
          nullable: true
        excludedProducts:
          type: array
          items:
            $ref: "#/components/schemas/ProductDiscountCondition"
          description: List of products that are eligible for the discount.
          nullable: true
        customerSegments:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminCustomerSegment"
          description: List of customer groups for which the discount applies
          nullable: true
        minimumQuantityRequiredProducts:
          type: integer
          description: "Minimum quantity of products in the specified IncludedProducts
            that must be purchased to\r

            qualify for the associated discount.\r

            Defaults to 1 if  null and IncludedProducts has values."
          format: int32
          nullable: true
        minimumQuantityProductsRequiredInCategories:
          type: integer
          description: "Minimum quantity of products in the categories specified in
            IncludedCategories that must be purchased to\r

            qualify for the associated discount.\r

            Defaults to 1 if  null and IncludedCategories has
            values"
          format: int32
          nullable: true
        minimumOrderAmount:
          type: number
          description: "Only applies to order.\r

            Minimum order subtotal after discounts in order for the
            associated discount to be applied"
          format: double
          nullable: true
        maximumOrderAmount:
          type: number
          description: "Only applies to order.\r

            Maximum order subtotal after discounts in order for the
            associated discount to be applied"
          format: double
          nullable: true
        categoriesToExcludeFromMinOrderTotal:
          type: array
          items:
            $ref: "#/components/schemas/CategoryDiscountCondition"
          description: List of categories to discount. When a discount applies to a
            category, all products in the category are discounted.
          nullable: true
        productsToExcludeFromMinOrderTotal:
          type: array
          items:
            $ref: "#/components/schemas/ProductDiscountCondition"
          description: List of products that are eligible for the discount.
          nullable: true
        minimumLifetimeValueAmount:
          type: number
          description: Minimum lifetime value amount required for this discount to apply
          format: double
          nullable: true
        startDate:
          type: string
          description: Date when the discount can goes into effect, in the format
            yyyy-mm-dd.
          format: date-time
          nullable: true
        expirationDate:
          type: string
          description: Date when the discount expires. Default is null (no expiration date).
          format: date-time
          nullable: true
        minimumCategorySubtotalBeforeDiscounts:
          type: number
          description: "Minimum amount that must be purchased in the combined categories
            defined in \r

            IncludedCategories.  Amount is calculated before
            discounting.\r

            Not used if IncludedCategories is empty."
          format: double
          nullable: true
        minimumRequiredQuantityPerRedemption:
          type: integer
          description: Defines a minimum quantity that is required for a target only
            discount
          format: int32
          nullable: true
      additionalProperties: false
      description: "Specifies constraints that must be satified for a discount to be
        applied to a target.\r

        Constraints are Anded together"
    TargetedCategory:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the category to which the discount applies.
          format: int32
          nullable: true
      additionalProperties: false
      description: Category to discount. When a discount applies to a category, all
        products in the category are discounted.
    TargetedProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Product code of the product to discount.
          nullable: true
      additionalProperties: false
      description: Product to discount.
    TargetedShippingMethod:
      required:
        - code
      type: object
      properties:
        code:
          maxLength: 64
          minLength: 0
          type: string
          description: "Unique identifier of the shipping method as it appears in the
            SiteShippingMethod property of the Shipping Settings\r

            resource."
        name:
          type: string
          description: Name of the shipping method as it appears in
            SiteShippingMethodLocalizedContent of the Shipping Settings
            resource.
          nullable: true
      additionalProperties: false
      description: "Shipping method that is eligible for free shipping. This is the
        shipping method that is defined with the Shipping\r

        Settings resource."
    TargetedShippingZone:
      required:
        - zone
      type: object
      properties:
        zone:
          maxLength: 200
          minLength: 0
          type: string
          description: "Indicates the shipping zone that this discount is valid for.  If
            zone is provided the\r

            method selected must be valid for the zone and both
            populated in the order for the discount\r

            to be valid."
      additionalProperties: false
      description: "Shipping method that is eligible for free shipping. This is the
        shipping method that is defined with the Shipping\r

        Settings resource."
    ProductAdminDiscountTarget:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: "    Type of target to which the discount applies. Possible values:
            <pre>Product</pre> or <pre>Shipping</pre>. \r

            If this is a <pre>Product</pre> type, you can specify
            which products or categories that the discount applies to.\r

            \    If this is a <pre>Shipping</pre> type then you must
            specify which shipping methods apply."
        includeAllProducts:
          type: boolean
          description: If yes, the discount applies to all products sold on the storefront.
          nullable: true
        includedCategoriesOperator:
          type: string
          description: "Applies to Included categories\r

            When Any, the target product can belong to any specified
            category.\r

            When All, the target product must belong to all
            specified categories.\r

            Defaults to Any"
          nullable: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/TargetedCategory"
          description: List of categories to discount. When a discount applies to a
            category, all products in the category are discounted.
          nullable: true
        excludedCategoriesOperator:
          type: string
          description: "Applies to Included categories\r

            Defaults to Any"
          nullable: true
        excludedCategories:
          type: array
          items:
            $ref: "#/components/schemas/TargetedCategory"
          description: List of categories to exclude from the discount. Useful to exclude
            specific child categories.
          nullable: true
        products:
          type: array
          items:
            $ref: "#/components/schemas/TargetedProduct"
          description: List of products that are eligible for the discount.
          nullable: true
        excludedProducts:
          type: array
          items:
            $ref: "#/components/schemas/TargetedProduct"
          description: List of products that are excluded from the discount.
          nullable: true
        excludeItemsWithExistingShippingDiscounts:
          type: boolean
          description: "Prevents order scoped discounts from layering over items that
            already have a shipping discount with the \r

            same type."
          nullable: true
        excludeItemsWithExistingProductDiscounts:
          type: boolean
          description: "Prevents order scoped discounts from layering over items that
            already have a product discount with the \r

            same type."
          nullable: true
        shippingMethods:
          type: array
          items:
            $ref: "#/components/schemas/TargetedShippingMethod"
          description: Shipping method that is eligible for shipping discounts. This is a
            shipping method defined in Shipping Settings.
          nullable: true
        shippingZones:
          type: array
          items:
            $ref: "#/components/schemas/TargetedShippingZone"
          description: Shipping Zones that are applicable for this discount
          nullable: true
        maximumQuantityPerRedemption:
          type: integer
          description: "When a condition is specified, this property limits the number of
            items that can be targeted per discount redemption with an order.\r

            if multiple redemptions are allowed per order then
            multiples of this value would be allowed in multiples of the
            associated \r

            condition.\r

            If no condition is specified then this value is not
            used.  \r

            If null and condition exists, then defaults to 1."
          format: int32
          nullable: true
        appliesToLeastExpensiveProductsFirst:
          type: boolean
          description: "Determines which way the discount is optimized.  Consumers
            favor(default - false/null) or tenants favor (when this is set to
            true)\r

            Applies to discounts where target is not a specific
            product or list of products.  \r

            May also impact behavior of Buy X Get Y so that X is the
            most expensive items and Y the least expensive."
          nullable: true
      additionalProperties: false
      description: "What to discount. Specifies the type of discount (percentage off,
        monetary amount, or free shipping) and which products, categories, or
        shipping methods are eligible for the discount.\r

        Can also specify the minimum amount that the order must total
        for the discount to apply."
    ThresholdMessageLocalizedContent:
      required:
        - messageTemplate
      type: object
      properties:
        localeCode:
          maxLength: 8
          minLength: 0
          type: string
          description: Language used for the discount in the current catalog. Defaults
            setting for the active catalog.
          nullable: true
        messageTemplate:
          type: string
          description: Locale-based contents of the Threshold Message.
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    ProductAdminThresholdMessage:
      required:
        - content
        - discountId
        - thresholdValue
      type: object
      properties:
        discountId:
          type: integer
          description: Unique identifier of the discount. System-supplied and read-only.
          format: int32
        thresholdValue:
          type: number
          description: The cart total amount that must be met before the threshold message
            is displayed
          format: double
        isActive:
          type: boolean
          description: Indicates if threshold messages are active for this discount
        showInCart:
          type: boolean
          description: Indicates if the threshold message will display in the cart
        showOnCheckout:
          type: boolean
          description: Indicates if the threshold message will display on the checkout page
        requiresCouponCode:
          type: boolean
          description: Indicates if the threshold message will display when a promo code
            is evaluated
        content:
          $ref: "#/components/schemas/ThresholdMessageLocalizedContent"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    ProductAdminDiscount:
      required:
        - amountType
        - content
        - scope
        - target
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the discount. System-supplied and read-only.
          format: int32
          nullable: true
        content:
          $ref: "#/components/schemas/DiscountLocalizedContent"
        scope:
          type: string
          description: "Scope to which the discount applies, valid values are: Order,
            LineItem"
        conditions:
          $ref: "#/components/schemas/ProductAdminDiscountCondition"
        target:
          $ref: "#/components/schemas/ProductAdminDiscountTarget"
        currentRedemptionCount:
          type: integer
          description: How many times this discount has been redeemed. System-supplied and
            read-only.
          format: int32
          nullable: true
        amount:
          type: number
          description: "    Amount of the discount, as a percentage or monetary amount,
            for example 15% or $15.\r

            Must be either null or greater than zero."
          format: double
          nullable: true
        amountType:
          type: string
          description: "Type of discount, which can be either a percentage off the price,
            \r

            a specific monetary amount, or free. \r

            Possible values: \r

            \tPercentage \r

            \tAmount \r

            \tFree\r

            \tFixedPrice"
        status:
          type: string
          description: Discount status which can be "Active," "Scheduled," or "Expired."
            System-supplied and read-only.
          nullable: true
        canBeDeleted:
          type: boolean
          description: Signifies that the discount is not referenced and can be hard deleted
        doesNotApplyToSalePrice:
          type: boolean
          description: "Determines if the discount should apply to sale price or regular
            price only.\r

            Discounts will apply to sale prices by default.\r

            Only applies to LineItem product discounts."
          nullable: true
        doesNotApplyToProductsWithSalePrice:
          type: boolean
          description: "Determines whether or not a discount applies to a items with a
            sale price.  Applicable \r

            on order and line item discounts.  For line items, when
            this is true, the discount will \r

            be disqualified.  For order level discounts, when true,
            the discount will not be applied \r

            to those items have a sale price."
          nullable: true
        maximumUsesPerUser:
          type: integer
          description: "Maximum number of times a user can redeem this discount.\r

            \ Must be either null or greater than zero."
          format: int32
          nullable: true
        maximumDiscountImpactPerOrder:
          type: number
          description: "Maximum impact this discount can apply on a single order.\r

            \ Must be either null or greater than zero."
          format: double
          nullable: true
        maximumDiscountImpactPerRedemption:
          type: number
          description: "Maximum impact this discount can apply on a single line item.\r

            \ Must be either null or greater than zero."
          format: double
          nullable: true
        maximumRedemptionsPerOrder:
          type: integer
          description: "Maximum number of redemptions allowed per order.\r

            If null, defaults to unlimited."
          format: int32
          nullable: true
        includedPriceLists:
          type: array
          items:
            type: string
          description: "Products receiving a price from a price list specified here or a
            child of a specified \r

            price list can be discounted."
          nullable: true
        doesNotApplyToMultiShipToOrders:
          type: boolean
          description: "Flag to allow or prevent application to multi-ship-to orders,\r

            Only applicable to shipping discounts."
          nullable: true
        isBxGx:
          type: boolean
          description: "Readonly property indicating that the condition required purchase
            is the \r

            same as the target items.  Used in BxGx and BoGo type
            discounts."
          nullable: true
        canBeStackedUpon:
          type: boolean
          description: Indicates whether or not stacking is enabled for this discount
          nullable: true
        stackingLayer:
          type: integer
          description: Indicates which stacking layer this discount is a part of
          format: int32
          nullable: true
        thresholdMessage:
          $ref: "#/components/schemas/ProductAdminThresholdMessage"
        preventLineItemShippingDiscounts:
          type: boolean
          description: "Prevents Line Item Shipping discounts from being applied when a
            Line Item Product  \r

            discount has been applied"
          nullable: true
        preventOrderProductDiscounts:
          type: boolean
          description: "Prevents Order Product discounts from being applied when a Line
            Item Product  \r

            or Shipping discount has been applied"
          nullable: true
        preventOrderShippingDiscounts:
          type: boolean
          description: "Prevents Order Shipping discounts from being applied when a Line
            Item Product/Shipping  \r

            or Order Product discount has been applied"
          nullable: true
        hasPurchaseConditions:
          type: boolean
          description: "Indicates if this discount has purchase conditions that must be
            met before \r

            the discount is applied"
        purchaseRequirementType:
          type: string
          description: "The type of purchase requirement for this discount, either
            purchase conditions and targets which   \r

            Supports BoGo, and BxGx scenarios. Or Target only that
            only have a target and no purchase conditions"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Allows you to define and manage discounts to apply to your
        products, product categories, or orders. The discounts can be a
        specified monetary amount off the price, percentage off the price, or
        for free shipping.\r

        You can create a coupon code that applies to the discount."
    DiscountCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminDiscount"
          nullable: true
      additionalProperties: false
      description: Collection of discounts returned as a whole. A collection is not paged.
    StackingConfiguration:
      type: object
      properties:
        stackingEnabled:
          type: boolean
          description: Indicates if discount stacking is enabled for discounts in this
            catalog
        productOrderLayers:
          type: integer
          description: Number of Product Order discount layers
          format: int32
        productLineItemLayers:
          type: integer
          description: Number of Product Line Item discount layers
          format: int32
      additionalProperties: false
    DiscountSettings:
      type: object
      properties:
        stackingConfiguration:
          $ref: "#/components/schemas/StackingConfiguration"
        usePostDiscountedOrderValue:
          type: boolean
          description: Use the pre or post line item discounts order total to evaluate the
            order minimum constraint
          nullable: true
      additionalProperties: false
      description: Tenant level discount settings
    FacetSource:
      type: object
      properties:
        id:
          type: string
          description: Name of field, or FQN of attribute
          nullable: true
        type:
          type: string
          description: "The type of source field used by the facet. Allowable values are:
            Element, Attribute. \r

            Must be a valid value for DataType defined in
            FacetFieldTypeConst."
          nullable: true
        name:
          type: string
          description: Read-only system-generated label for the source field.
          nullable: true
        dataType:
          maxLength: 20
          type: string
          description: Read-only system-generated DataType of the Attribute or Element
            source field. Will be valid value for DataType defined in
            DataTypeConst.
          nullable: true
        allowsRangeQuery:
          type: boolean
          description: Read-only system-generated indicator of whether the source field
            supports RangeQuery type facets.
      additionalProperties: false
    FacetValidity:
      type: object
      properties:
        isValid:
          type: boolean
        reasonCode:
          type: string
          nullable: true
      additionalProperties: false
    FacetRangeQuery:
      type: object
      properties:
        rangeValueStart:
          nullable: true
        rangeValueEnd:
          nullable: true
      additionalProperties: false
    ProductAdminFacet:
      type: object
      properties:
        facetId:
          type: integer
          description: The unique identifier for the facet definition
          format: int32
          nullable: true
        source:
          $ref: "#/components/schemas/FacetSource"
        facetType:
          type: string
          description: "The type of facet. Allowable values are: Value, RangeQuery \r

            Must be a valid value for DataType defined in
            FacetTypeConst."
          nullable: true
        order:
          type: integer
          description: Used to order the display of the facets within a section
          format: int32
        categoryId:
          type: integer
          description: The category that the facet is being configured at
          format: int32
          nullable: true
        categoryCode:
          type: string
          description: The category that the facet is being configured at
          nullable: true
        valueSortType:
          type: string
          description: "Determines how the facet values will be sorted in the store. \r

            Must be a valid value for DataType defined in
            FacetValueSortTypeConst. \r

            Allowable values are: CountAscending, CountDescending,
            ValuesAscending, ValuesDescending, AttributeDefinition,
            AttributeDefinitionDescending.\r

            The default if no value is specified will be
            CountDescending."
          nullable: true
        overrideFacetId:
          type: integer
          description: The ID of a parent category's facet being overriden
          format: int32
          nullable: true
        isHidden:
          type: boolean
          description: Indicates whether the facet is hidden for the given category
        validity:
          $ref: "#/components/schemas/FacetValidity"
        rangeQueries:
          type: array
          items:
            $ref: "#/components/schemas/FacetRangeQuery"
          description: List of ranges if the Facet is of type Range
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: The definition of a Facet
    FacetSet:
      type: object
      properties:
        configured:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminFacet"
          description: Facets that are configured
          nullable: true
        available:
          type: array
          items:
            $ref: "#/components/schemas/FacetSource"
          description: Facets that are not configured, but COULD BE!
          nullable: true
      additionalProperties: false
    ProductAdminLocationInventory:
      type: object
      properties:
        locationCode:
          type: string
          nullable: true
        productCode:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        stockOnHand:
          type: integer
          format: int32
          nullable: true
        stockAvailable:
          type: integer
          format: int32
          nullable: true
        stockOnBackOrder:
          type: integer
          format: int32
          nullable: true
        baseProductCode:
          type: string
          nullable: true
        sku:
          type: string
          nullable: true
        mfgPartNumber:
          type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: The inventory for a product at a specific Location
    ProductAdminLocationInventoryCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminLocationInventory"
          nullable: true
      additionalProperties: false
      description: Collection of products returned as a whole. A collection is not paged.
    LocationInventoryAdjustment:
      type: object
      properties:
        productCode:
          type: string
          description: The ProductCode of the product to adjust only required when
            updating via locationInventory resource
          nullable: true
        locationCode:
          type: string
          description: The Location code of the product to adjust only required when
            updating via a sub resource of product
          nullable: true
        type:
          type: string
          description: The type of StockOnHandAdjustment, which can be either Absolute or
            Delta. Absolute means that Value is the exact number of stock on
            hand. Delta means that Value is added to or subtracted from the
            value of StockOnHand.
          nullable: true
        value:
          type: integer
          description: The absolute or delta value to be applied to StockOnHand.
          format: int32
      additionalProperties: false
      description: "Used to modify a product's inventory. This can be an absolute
        number (number of items in stock) or delta (increase or decrease number
        of items in stock). \r

        StockOnHandAdjustment applies only PUT operations. Possible
        values: \"Absolute\" or \"Delta.\""
    ProductAdminMasterCatalog:
      type: object
      properties:
        id:
          type: integer
          description: MasterCatalogId (readonly)
          format: int32
        name:
          type: string
          description: Name of the MasterCatalog (readonly)
          nullable: true
        productPublishingMode:
          type: string
          description: The product publishing mode of this MasterCatalog
          nullable: true
        enableLiveEdit:
          type: boolean
          description: If the publishingMode is Pending and LiveEditsEnabled = true,
            DataViewMode live can be passed in the header and live products can
            be directly edited.
          nullable: true
        isDeleted:
          type: boolean
          description: Indicates whether the MasterCatalog has been deleted and should no
            longer be used
      additionalProperties: false
    MasterCatalogCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminMasterCatalog"
          nullable: true
      additionalProperties: false
      description: Collection of MasterCatalogs
    ProductAdminPriceList:
      required:
        - name
        - priceListCode
      type: object
      properties:
        priceListCode:
          type: string
        priceListSequence:
          type: integer
          format: int32
        parentPriceListCode:
          type: string
          description: Parent PriceList code, Can be null for root level priceLists
          nullable: true
        parentPriceListName:
          type: string
          description: Parent PriceList name, Can be null for root level priceLists. Read
            only in contract.
          nullable: true
        name:
          type: string
          description: Name of the priceList. Max length is 100
        description:
          type: string
          description: Description of the price list. Max length is 300
          nullable: true
        enabled:
          type: boolean
          description: Is the price list enabled and valid in the storefront. Default is
            true.
          nullable: true
        filteredInStorefront:
          type: boolean
          description: When true, only products with valid price list entries will be
            visible in the storefront. Default is false
          nullable: true
        validForAllSites:
          type: boolean
          description: When true, no valid sites need to be specifiied. Price list is
            considered valid for all sites. Default is true
          nullable: true
        validSites:
          type: array
          items:
            type: integer
            format: int32
          description: When ValidForAllSites = false, a list of siteIDs that the price
            list is valid for should be supplied
          nullable: true
        defaultForSites:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        indexedSites:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        mappedCustomerSegments:
          type: array
          items:
            type: string
          description: "List of customer segment code associated with this price list.\r

            Used to resolve default price list"
          nullable: true
        rank:
          type: integer
          description: Used to prioritize price list resolution when more than 1 price
            list maps
          format: int32
          nullable: true
        resolvable:
          type: boolean
          description: "Determines if this price list can be resolved as the current price
            list \r

            within a session."
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Category
    PriceListCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminPriceList"
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    ProductAdminProductOptionValue:
      type: object
      properties:
        value:
          nullable: true
        attributeVocabularyValueDetail:
          $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      additionalProperties: false
      description: A value of a product option for this product. For example, a
        computer product may have an option called "Memory" that can have the
        values "6GB,"8GB," and "12GB."
    ProductAdminProductOption:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        isProductImageGroupSelector:
          type: boolean
          description: Defines whether or not this option can be used to segment product
            images
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductOptionValue"
          description: List of all the values for this product option.
          nullable: true
      additionalProperties: false
      description: "Product options for configurable or stand-alone products. A
        configurable option is one that the shopper chooses when ordering, for
        example, \r

        the color of a T-shirt. A stand-alone option is independent of
        the product and can be added to the product order. For example, a
        monogram."
    PriceListEntryPrice:
      type: object
      properties:
        minQty:
          type: integer
          format: int32
        listPriceMode:
          type: string
          nullable: true
        listPrice:
          type: number
          format: double
          nullable: true
        salePriceMode:
          type: string
          nullable: true
        salePrice:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PriceListEntryExtra:
      required:
        - attributeFQN
      type: object
      properties:
        attributeFQN:
          type: string
          description: "AttributeFQN of the extra\r\nReadOnly"
        value:
          description: "The value stored with the extra\r

            ReadOnly"
          nullable: true
        price:
          type: number
          description: PriceList price for the extra
          format: double
        attributeCode:
          type: string
          description: "AttributeCode.\r\nReadOnly"
          nullable: true
        displayValue:
          type: string
          description: "Value to display.  Currently only vaild when Value is a string
            type.\r

            ReadOnly"
          nullable: true
      additionalProperties: false
      description: Extra for an entry on a price list
    PriceListEntry:
      required:
        - currencyCode
        - productCode
      type: object
      properties:
        priceListCode:
          type: string
          description: "External unique identifier of the PriceList. Must be unique an
            only contain url sanitized characters. Max length is\r

            50"
          nullable: true
        priceListEntrySequence:
          type: integer
          format: int32
        productCode:
          type: string
        productName:
          type: string
          nullable: true
        isVariation:
          type: boolean
        options:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductOption"
          nullable: true
        currencyCode:
          type: string
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        priceListEntryMode:
          type: string
          nullable: true
        priceListEntryTypeCode:
          type: string
          nullable: true
        discountsRestrictedMode:
          type: string
          nullable: true
        discountsRestricted:
          type: boolean
          nullable: true
        discountsRestrictedStartDate:
          type: string
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          format: date-time
          nullable: true
        msrpMode:
          type: string
          nullable: true
        msrp:
          type: number
          format: double
          nullable: true
        mapMode:
          type: string
          nullable: true
        map:
          type: number
          format: double
          nullable: true
        mapStartDate:
          type: string
          format: date-time
          nullable: true
        mapEndDate:
          type: string
          format: date-time
          nullable: true
        costMode:
          type: string
          nullable: true
        cost:
          type: number
          format: double
          nullable: true
        priceEntries:
          type: array
          items:
            $ref: "#/components/schemas/PriceListEntryPrice"
          nullable: true
        extraEntries:
          type: array
          items:
            $ref: "#/components/schemas/PriceListEntryExtra"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Category
    PriceListEntryCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/PriceListEntry"
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    ProductLocalizedImage:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the image. System-supplied and read-only.
          format: int32
          nullable: true
        localeCode:
          type: string
          description: Language used for the image content.
          nullable: true
        imageLabel:
          type: string
          description: Image title that appears on the storefront.
          nullable: true
        altText:
          type: string
          description: Descriptive text associated with the image or video that appears on
            the storefront.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        videoUrl:
          type: string
          description: URL of a video associated with the product.
          nullable: true
        mediaType:
          type: string
          description: Type of media. Used by the client to determine how to render the
            image or video or what have you.
          nullable: true
        sequence:
          type: integer
          description: For products with multiple images, the order in which this image
            appears on the storefront.
          format: int32
          nullable: true
        productImageGroupId:
          type: string
          description: Image group to which this image belongs.  Default is null.
          nullable: true
      additionalProperties: false
      description: Contains the image label and alternate text for a product image or
        video in the language specified by LocalCode.
    ProductLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: Lanugage used for product content. Currently, only en_US is
            supported.
          nullable: true
        productName:
          type: string
          description: Name of the product.
          nullable: true
        productFullDescription:
          type: string
          description: Long description of the product typically used for a product
            details page.
          nullable: true
        productShortDescription:
          type: string
          description: Brief description of the product typically used when the product is
            displayed in a list or search results.
          nullable: true
        productImages:
          type: array
          items:
            $ref: "#/components/schemas/ProductLocalizedImage"
          description: List of images associated with the product.
          nullable: true
      additionalProperties: false
      description: Container for language-specific content to display on the
        storefront. You'll have a container for each supported language
        (LocaleCode). This enables you to display a product in multiple
        languages yet manage it as a single product internally.
    ProductAdminProductPrice:
      type: object
      properties:
        isoCurrencyCode:
          type: string
          description: Currency code.
          nullable: true
        price:
          type: number
          description: Price of the product. This is the price the merchant intends to
            sell the product if no sale price is present.
          format: double
          nullable: true
        salePrice:
          type: number
          description: Current sale price of the product. Sale price is a numeric
            (monetary) amount, not a percentage off.
          format: double
          nullable: true
        msrp:
          type: number
          description: Manufacturer Suggested Retail Price. +
          format: double
          nullable: true
        map:
          type: number
          description: Minimum Advertised Price
          format: double
          nullable: true
        mapStartDate:
          type: string
          description: Minimum Advertised Price effective start date (null = begining of
            time)
          format: date-time
          nullable: true
        mapEndDate:
          type: string
          description: Minimum Advertised Price effectivity end date (null = forever)
          format: date-time
          nullable: true
        creditValue:
          type: number
          description: Credit amt of the product
          format: double
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductLocalizedSEOContent:
      type: object
      properties:
        localeCode:
          type: string
          description: Lanugage used for product content. Currently, only en_US is
            supported.
          nullable: true
        metaTagTitle:
          type: string
          description: Metadata title. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagDescription:
          type: string
          description: Metadata description. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagKeywords:
          type: string
          description: Metadata keywords. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        titleTagTitle:
          type: string
          description: Used to customize the HTML title tag within the head section of the
            product details page
          nullable: true
        seoFriendlyUrl:
          type: string
          description: "Human-readable identifier that you can give to the product to
            create friendly URLs. For example, \r

            instead of \"http:
            //example.com/products?category=2&id=25,\" the friendly URL can be
            \"http: //example.com/products/category/2/25.\""
          nullable: true
      additionalProperties: false
      description: Container for language-specific content to display on the
        storefront. You'll have a container for each supported language
        (LocaleCode). This enables you to display a product in multiple
        languages yet manage it as a single product internally.
    ProductCategory:
      type: object
      properties:
        categoryId:
          type: integer
          description: Unique identifier of the category. System-supplied and read-only.
          format: int32
      additionalProperties: false
      description: Categories to which the product belongs.
    ProductAdminActiveDateRange:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
      description: Active Effectivity Dates
    ProductInCatalogInfo:
      type: object
      properties:
        catalogId:
          type: integer
          description: The CatalogId of the catalog that the product is associated with
            (The catalog must a valid catalog within the MasterCatalog that the
            product belongs to)
          format: int32
        isActive:
          type: boolean
          description: If true, the product is marked as available for sale in the
            catalog. Setting a product to IsActive = false will prevent it from
            being shown on the customer facing storefront.
          nullable: true
        isContentOverridden:
          type: boolean
          description: If true, the content for this product is overridden in the catalog.
            If false, the MasterCatalog level content will be used for the
            product.
          nullable: true
        content:
          $ref: "#/components/schemas/ProductLocalizedContent"
        isPriceOverridden:
          type: boolean
          description: If true, the price for this product is overridden in the catalog.
            If false, the MasterCatalog level price will be used for the
            product.
          nullable: true
        price:
          $ref: "#/components/schemas/ProductAdminProductPrice"
        isSeoContentOverridden:
          type: boolean
          description: If true, the SEO content for this product is overridden in the
            catalog. If false, the MasterCatalog level SEO content will be used
            for the product.
          nullable: true
        seoContent:
          $ref: "#/components/schemas/ProductLocalizedSEOContent"
        productCategories:
          type: array
          items:
            $ref: "#/components/schemas/ProductCategory"
          description: Categories to which the product belongs for this catalog.
          nullable: true
        primaryProductCategory:
          $ref: "#/components/schemas/ProductCategory"
        dateFirstAvailableInCatalog:
          type: string
          description: Date this product was first Available for sale in the catalog. This
            is utilized in expressions that reference DaysInCatloag.
          format: date-time
          nullable: true
        activeDateRange:
          $ref: "#/components/schemas/ProductAdminActiveDateRange"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Use the Products resource to create and manage products for your
        store. You can create products with options that a shopper configures
        (such as a T-shirt color and size). The system can manage inventory for
        all combinations of your product options, and can calculate tax and
        shipping costs.
    ProductAdminProductPricingBehaviorInfo:
      type: object
      properties:
        discountsRestricted:
          type: boolean
          nullable: true
        discountsRestrictedStartDate:
          type: string
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          format: date-time
          nullable: true
        variationPricingMethod:
          type: string
          description: Only used when product is a variation
          nullable: true
      additionalProperties: false
      description: Pricing behavior associated with the product
    ProductExtraValueDeltaPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Which currency to use.
          nullable: true
        deltaPrice:
          type: number
          description: Amount of money saved when discounts are applied.
          format: double
      additionalProperties: false
      description: How much a product option costs above the cost of the base product,
        if at all.
    ProductExtraValue:
      type: object
      properties:
        value:
          nullable: true
        deltaPrice:
          $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
        localizedDeltaPrice:
          type: array
          items:
            $ref: "#/components/schemas/ProductExtraValueDeltaPrice"
          nullable: true
        deltaWeight:
          type: number
          format: double
          nullable: true
        isDefaulted:
          type: boolean
          nullable: true
        quantity:
          type: integer
          format: int32
          nullable: true
        attributeVocabularyValueDetail:
          $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      additionalProperties: false
      description: A value of a product option for this product. For example, a
        computer product may have an option called "Memory" that can have the
        values "6GB,"8GB," and "12GB."
    ProductExtra:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        isRequired:
          type: boolean
          nullable: true
        isMultiSelect:
          type: boolean
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProductExtraValue"
          nullable: true
      additionalProperties: false
      description: "Product options for configurable or stand-alone products. A
        configurable option is one that the shopper chooses when ordering, for
        example, \r

        the color of a T-shirt. A stand-alone option is independent of
        the product and can be added to the product order. For example, a
        monogram."
    ProductPropertyValueLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: Language used for the string attribute value.
          nullable: true
        stringValue:
          type: string
          description: Localized Value in the language of the locale code
          nullable: true
      additionalProperties: false
      description: Attribute Value Localized Resource
    ProductAdminProductPropertyValue:
      type: object
      properties:
        value:
          nullable: true
        content:
          $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
        localizedContent:
          type: array
          items:
            $ref: "#/components/schemas/ProductPropertyValueLocalizedContent"
          nullable: true
        attributeVocabularyValueDetail:
          $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      additionalProperties: false
      description: A value of a product option for this product. For example, a
        computer product may have an option called "Memory" that can have the
        values "6GB,"8GB," and "12GB."
    ProductAdminProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductPropertyValue"
          nullable: true
      additionalProperties: false
      description: "Product options for configurable or stand-alone products. A
        configurable option is one that the shopper chooses when ordering, for
        example, \r

        the color of a T-shirt. A stand-alone option is independent of
        the product and can be added to the product order. For example, a
        monogram."
    ProductAdminProductInventoryInfo:
      type: object
      properties:
        manageStock:
          type: boolean
          description: If true, the Products service manages inventory for this product.
          nullable: true
        outOfStockBehavior:
          type: string
          description: The behvior when the ManageStock is true and the product is not in
            stock.
          nullable: true
      additionalProperties: false
      description: Use the Products resource to create and manage products for your
        store. You can create products with options that a shopper configures
        (such as a T-shirt color and size). The system can manage inventory for
        all combinations of your product options, and can calculate tax and
        shipping costs.
    ProductAdminProductCost:
      type: object
      properties:
        isoCurrencyCode:
          type: string
          description: Currency code.
          nullable: true
        cost:
          type: number
          description: Cost of the product. This is the price the merchant pays for the
            product.
          format: double
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductSupplierInfo:
      type: object
      properties:
        mfgPartNumber:
          type: string
          nullable: true
        distPartNumber:
          type: string
          nullable: true
        cost:
          $ref: "#/components/schemas/ProductAdminProductCost"
      additionalProperties: false
      description: Supplier info for the product
    CommerceRuntimeMeasurement:
      type: object
      properties:
        unit:
          type: string
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ProductVariationOption:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the product variation option. System-supplied
            and read-only.
          nullable: true
        value:
          description: Name of the product variation option used on the admin side
            independent of how it appears on the storefront. For example, the
            internal "SZ" attribute might appear as "size" on the storefront.
          nullable: true
        content:
          $ref: "#/components/schemas/AttributeVocabularyValueLocalizedContent"
      additionalProperties: false
      description: An option for a product variation. For example, a T-shirt with size
        and color configurable options, might have a product variation option of
        "size" or "color."
    ProductPublishingInfo:
      type: object
      properties:
        publishedState:
          type: string
          nullable: true
        lastPublishedBy:
          type: string
          nullable: true
        lastPublishedDate:
          type: string
          format: date-time
          nullable: true
        publishSetCode:
          type: string
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductAdminBundledProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Product Code
          nullable: true
        quantity:
          type: integer
          description: Qty of the bundled PRoduct
          format: int32
        price:
          $ref: "#/components/schemas/ProductAdminProductPrice"
        productName:
          type: string
          description: Read only Name of the BundledProduct
          nullable: true
        packageHeight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageWidth:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageLength:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageWeight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductAdminProductCollectionMemberKey:
      type: object
      properties:
        value:
          type: string
          description: Key to resolve a collection member product
          nullable: true
      additionalProperties: false
      description: Key to resolve a collection member
    ProductCollectionProduct:
      type: object
      properties:
        memberKey:
          $ref: "#/components/schemas/ProductAdminProductCollectionMemberKey"
        productUsage:
          type: string
          description: ReadOnly Indicates the usage type of this product. Must be one of
            the values in ProductUsageConst.
          nullable: true
        content:
          $ref: "#/components/schemas/ProductLocalizedContent"
        price:
          $ref: "#/components/schemas/ProductAdminProductPrice"
      additionalProperties: false
      description: List of products that belong to a product collection product.
    ProductAdminProductCollectionInfo:
      type: object
      properties:
        collectionProductCode:
          type: string
          description: Product code of the product that is the collection that the
            containing product belongs to
          nullable: true
        collectionName:
          type: string
          description: Collection name in the language of the master catalog
          nullable: true
        isPrimaryCollection:
          type: boolean
          description: True when this is the primary collection for the containing product.
          nullable: true
      additionalProperties: false
      description: "Information about the relationship between a
        Mozu.ProductAdmin.Contracts.Product and a productCollection (product
        with usagetype of collection)\r

        This is only represented on the product member side of the
        relationship."
    ProductAdminProductImageGroupTag:
      required:
        - fqn
      type: object
      properties:
        fqn:
          type: string
        values:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ProductAdminProductImageGroup:
      required:
        - productImageGroupId
      type: object
      properties:
        productImageGroupId:
          type: string
        productImageGroupTags:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductImageGroupTag"
          nullable: true
      additionalProperties: false
    SlicingSettings:
      type: object
      properties:
        slicingAttributeFqn:
          type: string
          description: Product option FQN to create slices on
          nullable: true
      additionalProperties: false
      description: Container class for Slicing Settings
    ProductAdminProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code indentifier associated with the product, for
            example, a SKU or product item number.
          nullable: true
        productUsage:
          type: string
          description: Indicates the usage type of this product. Must be one of the values
            in ProductUsageConst.
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        masterCatalogId:
          type: integer
          description: Indentifier of the Master Catalog that this product is a member of.
            System-supplied and read-only
          format: int32
          nullable: true
        productSequence:
          type: integer
          description: System generated monotonically increasing sequence
          format: int32
          nullable: true
        productTypeId:
          type: integer
          description: Unique identifier of the productType of the product. Refers to a
            valid ProductType that was previously created with the ProductType
            resource.
          format: int32
          nullable: true
        isValidForProductType:
          type: boolean
          description: Read only flag that indicates if the product meets the product type
            constraints (All adminRequired attributes have a valid value)
          nullable: true
        baseProductCode:
          type: string
          description: This is the base product ProductCode of a product that is a
            variation. It is read-only and only populated for products that are
            variations of a configurable base product.
          nullable: true
        productInCatalogs:
          type: array
          items:
            $ref: "#/components/schemas/ProductInCatalogInfo"
          description: Catalog specifc info for each catalog a product is valid in. There
            should always be one or more entries here.
          nullable: true
        content:
          $ref: "#/components/schemas/ProductLocalizedContent"
        price:
          $ref: "#/components/schemas/ProductAdminProductPrice"
        pricingBehavior:
          $ref: "#/components/schemas/ProductAdminProductPricingBehaviorInfo"
        seoContent:
          $ref: "#/components/schemas/ProductLocalizedSEOContent"
        options:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductOption"
          description: The Options defined in the product Type that are currently assigned
            to this product
          nullable: true
        extras:
          type: array
          items:
            $ref: "#/components/schemas/ProductExtra"
          description: The Extras defined in the product Type that are currently assigned
            to this product
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductProperty"
          description: The Properties defined in the product Type that are currently
            assigned to this product
          nullable: true
        isTaxable:
          type: boolean
          description: If true, the product is subject to tax.
          nullable: true
        inventoryInfo:
          $ref: "#/components/schemas/ProductAdminProductInventoryInfo"
        shippingClassId:
          type: integer
          format: int32
          nullable: true
        isRecurring:
          type: boolean
          description: If true, the product can be purchased or fulfilled at regular
            intervals, for example, monthly billing or a subscription.
          nullable: true
        upc:
          type: string
          description: UPC code of the product.
          nullable: true
        supplierInfo:
          $ref: "#/components/schemas/ProductSupplierInfo"
        isPackagedStandAlone:
          type: boolean
          description: Does this product need to be packaged on its own
          nullable: true
        standAlonePackageType:
          type: string
          description: When packaged alone this is the package type
          nullable: true
        packageHeight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageWidth:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageLength:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageWeight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        applicableDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminDiscount"
          description: Read only. List of discounts that are available for a product.
          nullable: true
        isVariation:
          type: boolean
          description: Read only. If true, this is a product variation of a product with
            configurable options. System-supplied and read-only.
        variationKey:
          type: string
          description: Read only. If IsVariation true, thish provides a unique key to
            manage the variation of the base product.
          nullable: true
        hasConfigurableOptions:
          type: boolean
          description: Read only. If true, this product has configurable options. The
            product is not purchasable until the shopper selects options that
            resolve to a product variation. System-supplied and read-only.
        hasStandAloneOptions:
          type: boolean
          description: Read only. If true, the product has stand-alone options that a
            shopper may select. System-supplied and read-only.
        variationOptions:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariationOption"
          description: Read only List of variations that exist for a product. This is only
            populated when IsVariation is true. To get the list of options, the
            GET request must include the VariationOptions response group.
          nullable: true
        publishingInfo:
          $ref: "#/components/schemas/ProductPublishingInfo"
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminBundledProduct"
          description: "list of other products that are included in a BundleProduct\r

            This requires that the ProductUsage be set to Bundle"
          nullable: true
        productCollectionProducts:
          type: array
          items:
            $ref: "#/components/schemas/ProductCollectionProduct"
          description: "list of other products that are members of a ProductCollection\r

            This requires that the ProductUsage be set to
            Collection"
          nullable: true
        productCollections:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductCollectionInfo"
          description: List of Mozu.ProductAdmin.Contracts.ProductCollectionInfo that this
            product belongs to
          nullable: true
        productImageGroups:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductImageGroup"
          description: "List of the image groups this product uses.\r

            Image groups are used to map different images to
            different product options.\r

            If the product doesn't have options then all images will
            be in the default\r

            image group."
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        slicingSettings:
          $ref: "#/components/schemas/SlicingSettings"
        primaryProductCollectionCode:
          type: string
          description: When this product belongs to a product collection this is the
            product id for the primary collection.
          nullable: true
      additionalProperties: false
      description: Use the Products resource to create and manage products for your
        store. You can create products with options that a shopper configures
        (such as a T-shirt color and size). The system can manage inventory for
        all combinations of your product options, and can calculate tax and
        shipping costs.
    ProductAdminProductCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProduct"
          nullable: true
      additionalProperties: false
      description: Collection of products returned as a whole. A collection is not paged.
    ProductCodeRename:
      type: object
      properties:
        existingProductCode:
          type: string
          description: The existing ProductCode that should be renamed
          nullable: true
        newProductCode:
          type: string
          description: The new ProductCode that will be the result of the rename
          nullable: true
      additionalProperties: false
      description: A tuple used to rename the productCode of a product
    ProductVariationDeltaPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Which currency is in use.
          nullable: true
        value:
          type: number
          description: How much more the variation costs above the cost of the base product.
          format: double
          nullable: true
        msrp:
          type: number
          description: Manufacturer Suggested Retail Price.
          format: double
          nullable: true
        creditValue:
          type: number
          description: Credit amt of the product
          format: double
          nullable: true
      additionalProperties: false
      description: How much more a product variation costs above the cost of the base
        product. If the price of the base product changes, this price is
        adjusted automatically.
    ProductVariationFixedPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Which currency is in use.
          nullable: true
        listPrice:
          type: number
          description: Variation price for fixed pricing
          format: double
          nullable: true
        salePrice:
          type: number
          description: Variation sale price whne fixed pricing
          format: double
          nullable: true
        msrp:
          type: number
          description: Manufacturer Suggested Retail Price.
          format: double
          nullable: true
        creditValue:
          type: number
          description: Credit amt of the product
          format: double
          nullable: true
      additionalProperties: false
    ProductVariationProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProductAdminProductPropertyValue"
          nullable: true
      additionalProperties: false
      description: ""
    ProductVariation:
      type: object
      properties:
        isActive:
          type: boolean
          description: If true, the merchant accepts the variation generated from the
            configurable options as a product offering. If IsActive is false
            then the product variation is not for sale--either because it was
            never a product offering or it was permanently dropped. IsActive is
            not intended for temporary unavailability. Default is false.
          nullable: true
        isOrphan:
          type: boolean
          description: If true, the variation is no longer possible. The system sets
            IsOrphan to true when the merchant has changed something to make
            this variation impossible. For example, if the merchant stopped
            selling all "small" shirts, all product variations with the "small"
            option are set to IsOrphan. System-supplied and read-only.
          nullable: true
        variationExists:
          type: boolean
          description: If true, the product variation exists. When the merchant sets
            IsActive to true, the system sets VariationExists to true and
            creates a Variation Key as a unique identifier for this variation.
            System-supplied and read-only.
          nullable: true
        variationkey:
          type: string
          description: Unique identifier for a single variation ("small" + "red" +
            "short-sleeved"). System-supplied and read-only.
          nullable: true
        variationProductCode:
          type: string
          description: Descriptive code to refer to a single variation. Typically this is
            a sequence appended to the base ProduceCode. A merchant can create
            this code to easily recognize a product variation. By default, the
            system creates this code by appending a number to the base product.
            After the merchant supplies this code, it becomes read-only.
          nullable: true
        deltaPrice:
          $ref: "#/components/schemas/ProductVariationDeltaPrice"
        localizedDeltaPrice:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariationDeltaPrice"
          description: "How much more the variation costs above the cost of the base
            product. If the price of the base product changes, this price is
            adjusted accordingly.\r

            This collection allows for multiple currencies."
          nullable: true
        fixedPrice:
          $ref: "#/components/schemas/ProductVariationFixedPrice"
        localizedFixedPrice:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariationFixedPrice"
          description: "Price of the variation using fixed per currency\r

            This collection allows for multiple currencies."
          nullable: true
        deltaWeight:
          type: number
          description: Weight of the product with this variation.
          format: double
          nullable: true
        fixedWeight:
          type: number
          description: Fixed weight of the product with this variation.
          format: double
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariationOption"
          description: 'List of values for this product variation: such as "small, "red..
            these are read only here as the variationKey defines the values "'
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariationProperty"
          description: List of properties specific to this variation
          nullable: true
        upc:
          type: string
          description: Price Lookup Unit code for the product
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        supplierInfo:
          $ref: "#/components/schemas/ProductSupplierInfo"
      additionalProperties: false
      description: The ProductVariation resource helps merchants manage their products
        with configurable options. Using this reasource, the system creates a
        matrix of all possible combinations of the product options and the
        merchant confirms which variations match products for sale. For example,
        a T-shirt with three color and three size options has nine possible
        product variations. The system keeps track of inventory for each
        variation.
    ProductVariationPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariation"
          nullable: true
      additionalProperties: false
      description: Collection of product variations where the variations are returned
        in a series of pages.
    ProductVariationCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariation"
          nullable: true
      additionalProperties: false
      description: Collection of product variations returned as a whole. A collection
        is not paged.
    ProductSortExpression:
      required:
        - field
      type: object
      properties:
        field:
          type: string
          description: "The name of the field to sort on.\r

            Must be a known sort field or sortable attribute"
        direction:
          type: string
          description: ASC or DESC
          nullable: true
      additionalProperties: false
    ProductSortOverride:
      required:
        - productCode
      type: object
      properties:
        productCode:
          type: string
          description: The product code of the product being overridden
        sliceValue:
          type: string
          description: The slicing value of the product being overridden
          nullable: true
        position:
          type: integer
          description: "Indicates the relative position of the product to other overridden
            products.\r

            Position is absolute if IsPinned is true.\r

            Not applicable to buried products. Buried products will
            be given a default\r

            position of -1"
          format: int32
          nullable: true
        isPinned:
          type: boolean
          description: "Flag to indicate that the product is pinned at the specified
            position.\r

            Not applicable to buried products"
          nullable: true
      additionalProperties: false
      description: "Represents a product that is positioned out of its normal sort
        position.\r

        It can be boosted to the top of the list, positioned exactly or
        buried at the bottom"
    ProductSortDefinition:
      required:
        - name
        - sortExpressions
        - startDate
      type: object
      properties:
        productSortDefinitionId:
          type: integer
          description: System or user provided ID for the ProductSortDefinition
          format: int32
          nullable: true
        categoryId:
          type: integer
          description: ""
          format: int32
          nullable: true
        name:
          type: string
          description: Short Name for the sort definition. Required.
        startDate:
          type: string
          description: The Start Date when the sort definition becomes active
          format: date-time
        endDate:
          type: string
          description: Optional end date for a product sort definition
          format: date-time
          nullable: true
        sortExpressions:
          type: array
          items:
            $ref: "#/components/schemas/ProductSortExpression"
          description: "Sort expression to apply\r

            Max two expressions"
        boosted:
          type: array
          items:
            $ref: "#/components/schemas/ProductSortOverride"
          description: List of products being positioned
          nullable: true
        buried:
          type: array
          items:
            $ref: "#/components/schemas/ProductSortOverride"
          description: List of products being positioned
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Defines a default sort for a list of products and allows some
        products to be\r

        boosted to the top or pinned ot a specific position, or buried
        at the bottom of the\r

        list.  Only 10 items can be boosted or pinned and up to"
    ProductSortDefinitionPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductSortDefinition"
          nullable: true
      additionalProperties: false
      description: Collection of product sort definitions where product sort
        definitions are returned in a series of pages.
    AttributeInProductTypeDisplayInfo:
      type: object
      properties:
        displayIntention:
          type: string
          description: Defines the intended display of this Attribute in the storeFront
            (ex. DropDown, ImagePicker, RadioButtons....)
          nullable: true
      additionalProperties: false
    ProductAdminAttributeVocabularyValueDisplayInfo:
      type: object
      properties:
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        colorValue:
          type: string
          description: Hex Color value to display in a color picker
          nullable: true
      additionalProperties: false
    AttributeVocabularyValueInProductType:
      type: object
      properties:
        value:
          description: The actual value of the attribute vocabulary. This must be an
            existing value defined in the attribute vocabulary
          nullable: true
        order:
          type: integer
          description: Used to order the display of the attribute values in the
            storefront....
          format: int32
          nullable: true
        displayInfo:
          $ref: "#/components/schemas/ProductAdminAttributeVocabularyValueDisplayInfo"
        vocabularyValueDetail:
          $ref: "#/components/schemas/ProductAdminAttributeVocabularyValue"
      additionalProperties: false
    AttributeInProductType:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute. Must be an attribute fully
            qualilfied name that already exists. If no namespace is specified
            Tenant is assumed
          nullable: true
        isInheritedFromBaseType:
          type: boolean
          description: If True, the attribute is part of the base product type and can
            only have order modified.
          nullable: true
        order:
          type: integer
          description: Used to order the display of the attributes within a section
          format: int32
          nullable: true
        isRequiredByAdmin:
          type: boolean
          description: If True, the admin must include this attribute in products of this
            productType
          nullable: true
        isHiddenProperty:
          type: boolean
          description: If True, the property is hidden in the storefront. This field only
            applies to properties.
          nullable: true
        isAdminOnlyProperty:
          type: boolean
          description: If true, this property is not available on the storefront. If
            false, this property will be available on storefront. The
            IsHiddenProperty hides the property from the customer, but is still
            available from the API.
          nullable: true
        isProductDetailsOnlyProperty:
          type: boolean
          description: If True this property will not be returned  storefront product
            listings (Search,GetProduct) it will still be returned on
            GetProduct, ValidateProduct...)
          nullable: true
        isMultiValueProperty:
          type: boolean
          description: If True, the property can have multiple values selected on the
            product. Only applies to PredefinedVocabulary properties.
          nullable: true
        displayInfo:
          $ref: "#/components/schemas/AttributeInProductTypeDisplayInfo"
        vocabularyValues:
          type: array
          items:
            $ref: "#/components/schemas/AttributeVocabularyValueInProductType"
          description: The collection of vocabulary values included in this product type.
          nullable: true
        attributeDetail:
          $ref: "#/components/schemas/ProductAdminAttribute"
      additionalProperties: false
    ProductType:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the ProductType. System-supplied and read-only.
          format: int32
          nullable: true
        name:
          type: string
          description: Name of the productType
          nullable: true
        masterCatalogId:
          type: integer
          description: Indentifier of the Master Catalog that this ProductType is a member
            of. System-supplied and read-only.
          format: int32
          nullable: true
        isBaseProductType:
          type: boolean
          description: System supplied and read only. There is only one BaseProductType
            per MasterCatalog.
        productCount:
          type: integer
          description: Indicates the number of products currently using this Product Type.
            System-supplied and read-only.
          format: int32
          nullable: true
        productUsages:
          type: array
          items:
            type: string
          description: List of ProductUsages supported by the ProductType.
          nullable: true
        goodsType:
          type: string
          description: The TYpe of Goods of this product
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/AttributeInProductType"
          description: Collection of the Attributes that are Options in this productType
          nullable: true
        extras:
          type: array
          items:
            $ref: "#/components/schemas/AttributeInProductType"
          description: Collection of the Attributes that are Extras in this productType
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/AttributeInProductType"
          description: Collection of the Attributes that are Properties in this productType
          nullable: true
        variantProperties:
          type: array
          items:
            $ref: "#/components/schemas/AttributeInProductType"
          description: Collection of the Attributes that are VariantProperties in this
            productType
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    ProductTypeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductType"
          nullable: true
      additionalProperties: false
      description: Collection of attributes.
    PublishingScope:
      type: object
      properties:
        allPending:
          type: boolean
          description: True = scope to all pending products
          nullable: true
        productCodes:
          type: array
          items:
            type: string
          description: List of specific productCodes to scope publish operation against
          nullable: true
        publishSetCode:
          type: string
          description: The Publish Set to publish
          nullable: true
      additionalProperties: false
    PublishSet:
      type: object
      properties:
        code:
          type: string
          description: The PublishSet unique identifier
          nullable: true
        productCount:
          type: integer
          description: Number of product drafts that are included in the publish set
          format: int32
        productCodes:
          type: array
          items:
            type: string
          description: List of specific product codes that are included in the publish set
          nullable: true
      additionalProperties: false
    PublishSetCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/PublishSet"
          nullable: true
      additionalProperties: false
      description: Non-paged collection of PublishSets.
    SynonymDefinition:
      type: object
      properties:
        synonymId:
          type: integer
          description: The unique identifier for the synonym definition
          format: int32
          nullable: true
        key:
          type: string
          description: If key is defined then map is directed
          nullable: true
        synonyms:
          type: array
          items:
            type: string
          description: List of synonyms.  If no key is defined the matches are bidirectional
          nullable: true
      additionalProperties: false
    SynonymDefinitionCollection:
      type: object
      properties:
        tenantId:
          type: integer
          description: Read-only TenantId
          format: int32
        siteId:
          type: integer
          description: Read-only  Site Id
          format: int32
        localeCode:
          type: string
          description: The locale code to which this definition applies
          nullable: true
        synonymDefinitions:
          type: array
          items:
            $ref: "#/components/schemas/SynonymDefinition"
          description: List of mappings for this definition
          nullable: true
      additionalProperties: false
      description: Non-paged collection of all synonyms for a Site-Locale. Used for
        bulk operations
    SynonymDefinitionPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/SynonymDefinition"
          nullable: true
      additionalProperties: false
      description: Paged collection of synonyms for a Site-Locale.
    SearchTuningRuleFilter:
      type: object
      properties:
        field:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    SearchTuningRule:
      type: object
      properties:
        siteId:
          type: integer
          format: int32
        searchTuningRuleCode:
          type: string
          nullable: true
        searchTuningRuleName:
          type: string
          nullable: true
        searchTuningRuleDescription:
          type: string
          nullable: true
        keywords:
          type: array
          items:
            type: string
          nullable: true
        filters:
          type: array
          items:
            $ref: "#/components/schemas/SearchTuningRuleFilter"
          nullable: true
        active:
          type: boolean
        isDefault:
          type: boolean
        activeStartDate:
          type: string
          format: date-time
          nullable: true
        activeEndDate:
          type: string
          format: date-time
          nullable: true
        boostedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        blockedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    SearchTuningRuleCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/SearchTuningRule"
          nullable: true
      additionalProperties: false
    SearchTuningRuleSortFields:
      type: object
      properties:
        sortFields:
          type: array
          items:
            type: string
          nullable: true
        inclusionExclusionType:
          type: string
          nullable: true
      additionalProperties: false
    BoostValue:
      type: object
      properties:
        value:
          type: string
          nullable: true
        boost:
          type: integer
          format: int32
        operator:
          type: string
          nullable: true
      additionalProperties: false
    BoostField:
      type: object
      properties:
        fieldName:
          type: string
          nullable: true
        valueExpressions:
          type: array
          items:
            $ref: "#/components/schemas/BoostValue"
          nullable: true
      additionalProperties: false
    FieldValueBoost:
      type: object
      properties:
        boostType:
          type: string
          nullable: true
        fields:
          type: array
          items:
            $ref: "#/components/schemas/BoostField"
          nullable: true
      additionalProperties: false
    CampaignSiteSearchSettings:
      type: object
      properties:
        searchTermAssociations:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: "#/components/schemas/FieldValueBoost"
      additionalProperties: false
    CampaignProductSuggestSettings:
      type: object
      properties:
        searchTermAssociations:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: "#/components/schemas/FieldValueBoost"
      additionalProperties: false
    CampaignListingSettings:
      type: object
      properties:
        fieldValueBoost:
          $ref: "#/components/schemas/FieldValueBoost"
      additionalProperties: false
    CampaignSettings:
      type: object
      properties:
        campaignName:
          type: string
          nullable: true
        campaignId:
          type: string
          nullable: true
        json:
          type: string
          nullable: true
        campaignDescription:
          type: string
          nullable: true
        campaignStartDate:
          type: string
          format: date-time
          nullable: true
        campaignEndDate:
          type: string
          format: date-time
          nullable: true
        statusId:
          type: integer
          format: int32
          nullable: true
        siteSearchSettings:
          $ref: "#/components/schemas/CampaignSiteSearchSettings"
        productSuggestSettings:
          $ref: "#/components/schemas/CampaignProductSuggestSettings"
        listingSettings:
          $ref: "#/components/schemas/CampaignListingSettings"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Settings to control product search and indexing behavior
    CampaignSettingsCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CampaignSettings"
          nullable: true
      additionalProperties: false
    FieldWeight:
      type: object
      properties:
        searchFieldName:
          type: string
          description: field in the index to target
          nullable: true
        weight:
          type: integer
          description: weight to apply to boost field
          format: int32
      additionalProperties: false
    SuggestSettings:
      type: object
      properties:
        fieldWeights:
          type: array
          items:
            $ref: "#/components/schemas/FieldWeight"
          nullable: true
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
        returnFields:
          type: array
          items:
            type: string
          nullable: true
        crossFieldAdditiveScoreFactor:
          type: number
          format: double
      additionalProperties: false
    ListingSettings:
      type: object
      properties:
        customBoosts:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: "#/components/schemas/FieldValueBoost"
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ProductSuggestSettings:
      type: object
      allOf:
        - $ref: "#/components/schemas/SuggestSettings"
      properties:
        customBoosts:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: "#/components/schemas/FieldValueBoost"
        searchChildProductsByDefault:
          type: boolean
      additionalProperties: false
    SearchRedirect:
      type: object
      properties:
        redirectId:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        statusId:
          type: integer
          format: int32
          nullable: true
        searchTermList:
          type: array
          items:
            type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Redirects based on what is entered in site search
    SearchRedirectCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/SearchRedirect"
          nullable: true
      additionalProperties: false
      description: List of search redirects
    SiteSearchFieldWeight:
      type: object
      allOf:
        - $ref: "#/components/schemas/FieldWeight"
      properties:
        phraseWeight:
          type: integer
          description: weight to apply in phrase boosting
          format: int32
      additionalProperties: false
      description: A custom field and weight value for search relevancy
    SiteSearchSettings:
      type: object
      properties:
        fieldWeights:
          type: array
          items:
            $ref: "#/components/schemas/SiteSearchFieldWeight"
          nullable: true
        customBoosts:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: "#/components/schemas/FieldValueBoost"
        minimumMatchPercents:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        phraseSlop:
          type: integer
          format: int32
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
        searchChildProductsByDefault:
          type: boolean
        crossFieldAdditiveScoreFactor:
          type: number
          format: double
      additionalProperties: false
    SearchSettings:
      type: object
      properties:
        settingsName:
          type: string
          nullable: true
        isDefault:
          type: boolean
        siteSearchSettings:
          $ref: "#/components/schemas/SiteSearchSettings"
        productSuggestSettings:
          $ref: "#/components/schemas/ProductSuggestSettings"
        categorySuggestSettings:
          $ref: "#/components/schemas/SuggestSettings"
        listingSettings:
          $ref: "#/components/schemas/ListingSettings"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Settings to control product search and indexing behavior
    SearchSettingsCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/SearchSettings"
          nullable: true
      additionalProperties: false
    CampaignResult:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        siteId:
          type: integer
          format: int32
        campaignName:
          type: string
          nullable: true
        campaignId:
          type: string
          nullable: true
        json:
          type: string
          nullable: true
        campaignDescription:
          type: string
          nullable: true
        campaignStartDate:
          type: string
          format: date-time
          nullable: true
        campaignEndDate:
          type: string
          format: date-time
          nullable: true
        statusId:
          type: integer
          format: int32
          nullable: true
        siteSearchSettings:
          $ref: "#/components/schemas/CampaignSiteSearchSettings"
        productSuggestSettings:
          $ref: "#/components/schemas/CampaignProductSuggestSettings"
        listingSettings:
          $ref: "#/components/schemas/CampaignListingSettings"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Campaign result from db
    StoreFrontProductCurrencyExchangeRate:
      type: object
      properties:
        fromCurrencyCode:
          type: string
          description: The source currency code
          nullable: true
        toCurrencyCode:
          type: string
          description: The target currency code
          nullable: true
        rate:
          type: number
          description: The exchange rate
          format: double
          nullable: true
        multiplier:
          type: number
          description: An additional multiplier to use in calculations
          format: double
          nullable: true
        decimalPlaces:
          type: integer
          description: Number of decimal places
          format: int32
          nullable: true
        roundingStrategy:
          type: integer
          description: Rounding strategy
          format: int32
          nullable: true
        referenceData:
          type: string
          description: Reference data for miscellaneous metadata from updates
          nullable: true
      additionalProperties: false
      description: The currency exchange rates from one currency to another.
    ResolvedPriceList:
      type: object
      properties:
        priceListCode:
          type: string
          nullable: true
        priceListId:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    PriceListNode:
      type: object
      properties:
        priceListCode:
          type: string
          nullable: true
        priceListId:
          type: integer
          format: int32
        parentPriceListId:
          type: integer
          format: int32
          nullable: true
        priceListLevel:
          type: integer
          format: int32
      additionalProperties: false
    StoreFrontProductPriceList:
      type: object
      properties:
        priceListCode:
          type: string
          nullable: true
        priceListId:
          type: integer
          format: int32
        enabled:
          type: boolean
        name:
          type: string
          nullable: true
        resolvable:
          type: boolean
        isIndexed:
          type: boolean
          nullable: true
        filteredInStoreFront:
          type: boolean
        isSiteDefault:
          type: boolean
        description:
          type: string
          nullable: true
        ancestors:
          type: array
          items:
            $ref: "#/components/schemas/PriceListNode"
          nullable: true
        descendants:
          type: array
          items:
            $ref: "#/components/schemas/PriceListNode"
          nullable: true
        validSites:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    StoreFrontProductCategory:
      type: object
      properties:
        categoryId:
          type: integer
          description: Internal unique identifier of the category. System-supplied and
            read-only.
          format: int32
        parentCategory:
          $ref: "#/components/schemas/StoreFrontProductCategory"
        content:
          $ref: "#/components/schemas/CategoryContent"
        childrenCategories:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductCategory"
          description: List of subcategories that belong to this category.
          nullable: true
        sequence:
          type: integer
          description: Order in which categories appear when they are at the same level
            (siblings). For example, categories can be sequenced so that a
            specific category always appears first (or last).
          format: int32
          nullable: true
        isDisplayed:
          type: boolean
          description: Indicates whether the category should be displayed.
        categoryCode:
          type: string
          description: External unique identifier of the category.
          nullable: true
        count:
          type: integer
          description: Indicates whether the category should be displayed.
          format: int32
          nullable: true
        updateDate:
          type: string
          description: Last Modified Date Time
          format: date-time
        shouldSlice:
          type: boolean
          description: Indicates whether the category should be sliced
      additionalProperties: false
      description: The category hierarchy of your store as it appears on the
        storefront. This is the category heirarchy defined with the
        admin/category resource except for any categories with an IsDisplayed
        value set to false.
    CategoryImage:
      type: object
      properties:
        imageLabel:
          type: string
          description: Image title.  Unicode data with a maximum length of 50 characters.
          nullable: true
        altText:
          type: string
          description: Descriptive text associated with the image. Unicode data with a
            maximum length of 200 characters.
          nullable: true
        imageUrl:
          type: string
          description: Image URL. Unicode data with a maximum length of 4000 characters.
          nullable: true
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        videoUrl:
          type: string
          description: URL of the video. Unicode data with a maximum length of 4000
            characters.
          nullable: true
        mediaType:
          type: string
          description: Type of media. Used by the client to determine how to render the
            image or video or what have you.
          nullable: true
        sequence:
          type: integer
          description: For categories with multiple images, the sequence is the order in
            which this image appears. Whole number data. Required.
          format: int32
          nullable: true
      additionalProperties: false
      description: Image or video associated with a category.
    CategoryContent:
      type: object
      properties:
        categoryImages:
          type: array
          items:
            $ref: "#/components/schemas/CategoryImage"
          description: Images associated with the category.
          nullable: true
        name:
          type: string
          description: Name of the category as it appears on the storefront.
          nullable: true
        description:
          type: string
          description: Description of the category as it appears on the storefront.
          nullable: true
        pageTitle:
          type: string
          description: Title that appears at the top of new pages.
          nullable: true
        metaTagTitle:
          type: string
          description: Metadata title. Metadata can be used to manage information
            internally.
          nullable: true
        metaTagDescription:
          type: string
          description: Metadata description. Metadata can be used to manage information
            internally.
          nullable: true
        metaTagKeywords:
          type: string
          description: Metadata keywords. Metadata can be used to manage information
            internally.
          nullable: true
        slug:
          type: string
          description: Human-readable identifier given to the category to create friendly
            URLs.
          nullable: true
      additionalProperties: false
      description: Name of the category and optionally, a description, page title,
        friendly URL, associated images, and any metadata.
    StoreFrontProductCategoryCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductCategory"
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    StoreFrontProductCategoryPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductCategory"
          nullable: true
      additionalProperties: false
      description: Collection of categories where categories are returned in a series
        of pages.
    StoreFrontProductPackageMeasurements:
      type: object
      properties:
        packageHeight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageWidth:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageLength:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        packageWeight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
      additionalProperties: false
      description: Physical dimensions of the package required to ship the product and
        its weight.
    StoreFrontProductProductInventoryInfo:
      type: object
      properties:
        manageStock:
          type: boolean
          description: If true, the Products service manages inventory for this product.
          nullable: true
        outOfStockBehavior:
          type: string
          description: The behvior when the ManageStock is true and the product is not in
            stock.
          nullable: true
        onlineStockAvailable:
          type: integer
          description: Number of product items currently available for purchase.
          format: int32
          nullable: true
        onlineSoftStockAvailable:
          type: integer
          description: Number of product items currently available for purchase.
          format: int32
          nullable: true
        onlineLocationCode:
          type: string
          description: Directship location code for OnlineStockAvailable
          nullable: true
        availableDate:
          type: string
          description: Date the item will become available for back order if out of stock
          format: date-time
          nullable: true
      additionalProperties: false
      description: Use the Products resource to create and manage products for your
        store. You can create products with options that a shopper configures
        (such as a T-shirt color and size). The system can manage inventory for
        all combinations of your product options, and can calculate tax and
        shipping costs.
    BundledProductBase:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code associated with the product, for example, a
            SKU.
          nullable: true
        goodsType:
          type: string
          description: The GoodsType of this product (Physical, Digital, DigitalCredit)
          nullable: true
        quantity:
          type: integer
          description: The quantity of the bundled product
          format: int32
        measurements:
          $ref: "#/components/schemas/StoreFrontProductPackageMeasurements"
        isPackagedStandAlone:
          type: boolean
          description: Is this product shipped in its own package
          nullable: true
        inventoryInfo:
          $ref: "#/components/schemas/StoreFrontProductProductInventoryInfo"
        optionAttributeFQN:
          type: string
          description: Fully Qualified Name of the selected option's attribute (only
            applies to Products as extras)
          nullable: true
        optionValue:
          description: Value of the selected option (only applies to Products as extras)
          nullable: true
        creditValue:
          type: number
          description: Credit Value applicable to this product. Should only be present on
            DigitalCredit goodsType....
          format: double
          nullable: true
        productType:
          type: string
          nullable: true
      additionalProperties: false
      description: Details of a product, including its product code, name,
        description, options (if any), and current state--whether the product
        can be purchased given the options selected currently.
    ProductImage:
      type: object
      properties:
        imageLabel:
          type: string
          description: Image title.  Unicode data with a maximum length of 50 characters.
          nullable: true
        altText:
          type: string
          description: Descriptive text associated with the image. Unicode data with a
            maximum length of 200 characters.
          nullable: true
        imageUrl:
          type: string
          description: Image URL. Unicode data with a maximum length of 4000 characters.
          nullable: true
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        videoUrl:
          type: string
          description: URL of the video. Unicode data with a maximum length of 4000
            characters.
          nullable: true
        mediaType:
          type: string
          description: Type of media. Used by the client to determine how to render the
            image or video or what have you.
          nullable: true
        sequence:
          type: integer
          description: For products with multiple images, the sequence is the order in
            which this image appears. Whole number data. Required.
          format: int32
          nullable: true
        productImageGroupId:
          type: string
          nullable: true
      additionalProperties: false
      description: Image or video associated with a product.
    ProductContent:
      type: object
      properties:
        productName:
          type: string
          description: Name of the product.
          nullable: true
        productFullDescription:
          type: string
          description: Detailed description of the product typically used for a product
            details page.
          nullable: true
        productShortDescription:
          type: string
          description: Brief description of the product typically used when the product is
            displayed in a list or search results.
          nullable: true
        metaTagTitle:
          type: string
          description: Metadata title used to manage information internally.
          nullable: true
        metaTagDescription:
          type: string
          description: Metadata description used to manage information internally.
          nullable: true
        metaTagKeywords:
          type: string
          description: Metadata keywords used to manage information internally.
          nullable: true
        seoFriendlyUrl:
          type: string
          description: Human-readable identifier defined for the product to create
            friendly URLs.
          nullable: true
        productImages:
          type: array
          items:
            $ref: "#/components/schemas/ProductImage"
          description: Images associated with the product.
          nullable: true
      additionalProperties: false
      description: Name of the product and, if supplied, description, metatags,
        friendly URL, and associated images.
    StoreFrontProductBundledProduct:
      type: object
      allOf:
        - $ref: "#/components/schemas/BundledProductBase"
      properties:
        content:
          $ref: "#/components/schemas/ProductContent"
      additionalProperties: false
    ValidationMessage:
      type: object
      properties:
        severity:
          type: string
          description: "Severity level of the validation failure.\r

            \ Must be one of the values in SeverityConst."
          nullable: true
        source:
          type: string
          description: What invoked the validation.  Must be one of the values in
            SourceTypeConst.
          nullable: true
        message:
          type: string
          description: Message displayed to the user when this validation failure occurred.
          nullable: true
        validationType:
          type: string
          description: "Type of validation error that occurred. This can be checked
            programatically. \r

            \ Must be one of the values in ValidationTypeConst."
          nullable: true
        sourceId:
          type: string
          description: Unique identifier of the source that invoked the validation failure.
          nullable: true
      additionalProperties: false
    ProductPurchasableState:
      type: object
      properties:
        isPurchasable:
          type: boolean
          description: If true, this product is currently available for purchase. For
            products with options, this is false until the shopper selects all
            required options.
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ValidationMessage"
          description: Message associated with this product if it is not ready to be
            purchased. For products with options, message contains which
            required options are missing.
          nullable: true
      additionalProperties: false
      description: Current state of the product purchase, that is, whether it is ready
        to be purchased. For products with configurable options,     /// the
        product is purchaseable if the shopper has selected all required
        options. If not, a message lists which required options are missing.
    StoreFrontProductDiscount:
      type: object
      properties:
        discountId:
          type: integer
          description: Unique identifier of the discount.
          format: int32
        expirationDate:
          type: string
          description: Date when the discount expires.
          format: date-time
          nullable: true
        name:
          type: string
          description: Name of the discount.
          nullable: true
        friendlyDescription:
          type: string
          description: Description of the discount.
          nullable: true
        impact:
          type: number
          description: The Impact of the individual Discount
          format: double
      additionalProperties: false
      description: Discount name and expiration date.
    StoreFrontProductAppliedDiscount:
      type: object
      properties:
        couponCode:
          type: string
          description: If the discount is a coupon, code associated with the coupon.
          nullable: true
        discount:
          $ref: "#/components/schemas/StoreFrontProductDiscount"
        discounts:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductDiscount"
          description: Discount name and expiration date.
          nullable: true
        impact:
          type: number
          description: The new calculated price of the product. That is, the product price
            minus the discount amount.
          format: double
      additionalProperties: false
      description: Discount applied to the product.
    StoreFrontProductProductPrice:
      type: object
      properties:
        msrp:
          type: number
          description: Manufacturer suggested Retail price, this may be null if one is not
            set in the catalog.
          format: double
          nullable: true
        price:
          type: number
          description: Listed Price of the product. This is the price that the merchant
            intends to sell the product for if no sale is active.
          format: double
          nullable: true
        priceType:
          type: string
          description: Futher clarification of what value is being returned in the Price
            field
          nullable: true
        salePrice:
          type: number
          description: Current sale price of the product. This can be either a specific
            numerical amount or it can be calculated based on an active
            discount. Optional.
          format: double
          nullable: true
        salePriceType:
          type: string
          nullable: true
        catalogSalePrice:
          type: number
          description: Current sale price of the product listed in the catalog. This is
            not typically dispalyed directly to the user as it will be listed in
            SalePrice if applicable.
          format: double
          nullable: true
        catalogListPrice:
          type: number
          description: Current Price Listed in the catalog.
          format: double
          nullable: true
        discount:
          $ref: "#/components/schemas/StoreFrontProductAppliedDiscount"
        creditValue:
          type: number
          description: Credit Value applicable to this product. Should only be present on
            DigitalCredit goodsType....
          format: double
          nullable: true
        effectivePricelistCode:
          type: string
          description: The priceList that was applied to this product
          nullable: true
        priceListEntryCode:
          type: string
          description: The specific PriceListCode that was applied (includes inheritence
          nullable: true
        priceListEntryMode:
          type: string
          description: IF a PriceList Entry was applied to this price it will be (simple,
            bulk...)
          nullable: true
      additionalProperties: false
      description: Price of the product with any sale and discounts applied.
    ProductPriceRange:
      type: object
      properties:
        lower:
          $ref: "#/components/schemas/StoreFrontProductProductPrice"
        upper:
          $ref: "#/components/schemas/StoreFrontProductProductPrice"
      additionalProperties: false
      description: For products with options that vary the cost of the product, the
        range between lowest and highest possible price of the product based on
        the current selection of options.
    ProductVolumePrice:
      type: object
      properties:
        isCurrent:
          type: boolean
        minQty:
          type: integer
          format: int32
        maxQty:
          type: integer
          format: int32
          nullable: true
        priceRange:
          $ref: "#/components/schemas/ProductPriceRange"
        price:
          $ref: "#/components/schemas/StoreFrontProductProductPrice"
      additionalProperties: false
    StoreFrontProductProductPricingBehaviorInfo:
      type: object
      properties:
        discountsRestricted:
          type: boolean
          nullable: true
        discountsRestrictedStartDate:
          type: string
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    AttributeDetail:
      type: object
      properties:
        valueType:
          type: string
          description: The ValueType of the attribute. Valid values for ValueType are
            defined in ValueTypeTypeConst.
          nullable: true
        inputType:
          type: string
          description: The InputType type of the attribute. Valid values for InputType are
            defined in InputTypeConst.
          nullable: true
        dataType:
          type: string
          description: The DataType of the attribute. Valid values for DataType are
            defined in DataTypeTypeConst.
          nullable: true
        usageType:
          type: string
          description: The UsageType of the attribute. Valid values for the usageType are
            defined in UsageTypeConst .
          nullable: true
        dataTypeSequence:
          type: integer
          description: A unique sequence of the attribute By dataType (used for common
            naming of fields in search index)
          format: int32
        name:
          type: string
          description: Name of the attribute in the language specified by LocaleCode.
          nullable: true
        description:
          type: string
          description: Description of the attribute in the language specified by LocaleCode.
          nullable: true
        validation:
          $ref: "#/components/schemas/ProductAdminAttributeValidation"
        searchableInStorefront:
          type: boolean
          description: Indicates whether the attribute value is searchable.
        searchDisplayValue:
          type: boolean
          description: "If true, the system will index the display value of string
            attributes instead of the canonical value for searching. \r

            The canonical value will always be used for filtering.
            Does not apply for for non-string attributes."
        allowFilteringAndSortingInStorefront:
          type: boolean
          description: Indicates whether the attribute should be able to be used in
            filters, facets, and sorting on the public storefront.
        indexValueWithCase:
          type: boolean
          description: Indicates whether the attribtue value is indexed with case or not
          nullable: true
        customWeightInStorefrontSearch:
          type: boolean
          description: Indicates whether the attribtue value is indexed so that it can
            have a custom relevency weight compared to other attributes in a
            tokenized text search
          nullable: true
        displayIntention:
          type: string
          description: Am optional hint to the theme about how this attribute should be
            displayed (what control to use)
          nullable: true
      additionalProperties: false
      description: Product Attribute properties common between a Product Propery,
        Option, and Extra
    StoreFrontProductAttributeVocabularyValueDisplayInfo:
      type: object
      properties:
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        colorValue:
          type: string
          description: Hex Color value to display in a color picker
          nullable: true
      additionalProperties: false
      description: Product Attribute properties common between a Product Propery,
        Option, and Extra
    StoreFrontProductProductPropertyValue:
      type: object
      properties:
        value:
          nullable: true
        stringValue:
          type: string
          description: Localized Value in the language of the locale code
          nullable: true
        displayInfo:
          $ref: "#/components/schemas/StoreFrontProductAttributeVocabularyValueDisplayInf\
            o"
      additionalProperties: false
      description: Value of product property
    StoreFrontProductProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Attribute fully qualified name
          nullable: true
        isHidden:
          type: boolean
          description: Indicates whether the product property should be hidden from the
            customer
          nullable: true
        isMultiValue:
          type: boolean
          description: Indicates whether it's possible for there to be more than one value
            in the Values field
          nullable: true
        attributeDetail:
          $ref: "#/components/schemas/AttributeDetail"
        values:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductPropertyValue"
          description: Value(s) of the product property
          nullable: true
        propertyType:
          type: string
          description: Property Type of the Property
          nullable: true
      additionalProperties: false
      description: An attribute used as a property of a product
    StoreFrontProductProductOptionValue:
      type: object
      properties:
        value:
          nullable: true
        attributeValueId:
          type: integer
          description: Unique Id for the Value
          format: int32
        stringValue:
          type: string
          description: Localized Value in the language of the locale code only available
            for dataType string
          nullable: true
        isEnabled:
          type: boolean
          description: If true, this option is enabled and can be selected. During
            configuration, this returns false of this option value is invalid
            with other current selected options.
          nullable: true
        isSelected:
          type: boolean
          description: If true, this is the option that is currently selected. It can be
            either the default value or one that the shopper has selected.
          nullable: true
        isDefault:
          type: boolean
          description: If true, this is the default value that the merchant supplied.
          nullable: true
        deltaWeight:
          type: number
          description: How much this option weighs above the weight of the product.
          format: double
          nullable: true
        deltaPrice:
          type: number
          description: How much this option costs above the cost of the product.
          format: double
          nullable: true
        shopperEnteredValue:
          description: How much this option costs above the cost of the product.
          nullable: true
        bundledProduct:
          $ref: "#/components/schemas/StoreFrontProductBundledProduct"
        displayInfo:
          $ref: "#/components/schemas/StoreFrontProductAttributeVocabularyValueDisplayInf\
            o"
      additionalProperties: false
      description: Value of product option..."red," "white," "blue."
    StoreFrontProductProductOption:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Attribute fully qualified name
          nullable: true
        isRequired:
          type: boolean
          description: If true, the shopper must provide a value for the option before it
            can be purchased.
          nullable: true
        isMultiValue:
          type: boolean
          description: If true, more than one value can be assigned to an option. Only
            possible with stand-alone options.
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductOptionValue"
          description: Possible choices for an option, for example, values of the option
            "Color" can be "red," "white," and "blue."
          nullable: true
        attributeDetail:
          $ref: "#/components/schemas/AttributeDetail"
        isProductImageGroupSelector:
          type: boolean
      additionalProperties: false
      description: An option for a product and its list of values, if any. Also
        includes whether the option is configurable or stand-alone, whether it
        is required, whether it can have mulitple values and whether the shopper
        can supply its value (for example, engraved initials).
    VariationOption:
      type: object
      properties:
        valueSequence:
          type: integer
          format: int32
        attributeFQN:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    VariationSummary:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code associated with the variation product, for
            example, a SKU.
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/VariationOption"
          description: The combination of options that resolve to this variation product
          nullable: true
        inventoryInfo:
          $ref: "#/components/schemas/StoreFrontProductProductInventoryInfo"
      additionalProperties: false
      description: Details of a product, including its product code, name,
        description, options (if any), and current state--whether the product
        can be purchased given the options selected currently.
    StoreFrontProductProductImageGroupTag:
      type: object
      properties:
        attributeFqn:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    StoreFrontProductProductImageGroup:
      required:
        - productImageGroupId
      type: object
      properties:
        productImageGroupId:
          type: string
        productImageGroupTags:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductImageGroupTag"
          nullable: true
      additionalProperties: false
    StoreFrontProductProductCollectionInfo:
      type: object
      properties:
        productCode:
          type: string
          description: Product Code of the collection
          nullable: true
        isPrimary:
          type: boolean
          description: True if the collection is the primary collection for the containing
            product.
      additionalProperties: false
    StoreFrontProductProductCollectionMemberKey:
      type: object
      properties:
        value:
          type: string
          nullable: true
      additionalProperties: false
      description: This is the key of the product collection member.  For now, it's
        just product code, but may expand in future
    ProductCollectionMember:
      type: object
      properties:
        memberKey:
          $ref: "#/components/schemas/StoreFrontProductProductCollectionMemberKey"
      additionalProperties: false
      description: List of products that belong to a product collection product.
    StoreFrontProductProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code associated with the product, for example, a
            SKU.
          nullable: true
        purchaseLocation:
          type: string
          description: "The location where the product is being purchased.. default is
            null. Products can have different prices\r

            by purchaseLocation via custom priceListResolution...."
          nullable: true
        productSequence:
          type: integer
          description: System generated monotonically increasing sequence
          format: int32
          nullable: true
        productUsage:
          type: string
          description: The UsageType of this product (Standard, Configurable, Bundle,
            Component, Collection)
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        goodsType:
          type: string
          description: The GoodsType of the product (Physical, Digital, DigitalCredit....)
          nullable: true
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductBundledProduct"
          description: The list of Bundled products included in this product. This is only
            populated when ProductUsage=Bundle
          nullable: true
        content:
          $ref: "#/components/schemas/ProductContent"
        purchasableState:
          $ref: "#/components/schemas/ProductPurchasableState"
        isActive:
          type: boolean
          description: If true, the product exists. If not, the product should not appear
            in search results.
          nullable: true
        publishState:
          type: string
          description: Represents the published state of the product returned. Valid
            values for ValueType are defined in PublishStateConst.
          nullable: true
        price:
          $ref: "#/components/schemas/StoreFrontProductProductPrice"
        priceRange:
          $ref: "#/components/schemas/ProductPriceRange"
        volumePriceBands:
          type: array
          items:
            $ref: "#/components/schemas/ProductVolumePrice"
          description: For products with bulk pricing... this will be populated with
            pricebands, depending on what options have been selected...
          nullable: true
        volumePriceRange:
          $ref: "#/components/schemas/ProductPriceRange"
        availableShippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductDiscount"
          description: List of potential shipping discounts available for this product.
          nullable: true
        productType:
          type: string
          nullable: true
        productTypeId:
          type: integer
          format: int32
          nullable: true
        isTaxable:
          type: boolean
          description: If true, the product is subject to tax.
        isRecurring:
          type: boolean
          description: If true, the product can be purchased or fulfilled at regular
            intervals, for example, monthly billing or a subscription.
        pricingBehavior:
          $ref: "#/components/schemas/StoreFrontProductProductPricingBehaviorInfo"
        inventoryInfo:
          $ref: "#/components/schemas/StoreFrontProductProductInventoryInfo"
        createDate:
          type: string
          description: When the product was created with the product admin resource.
          format: date-time
        updateDate:
          type: string
          description: When the product was last modified with the product admin resource.
          format: date-time
        dateFirstAvailableInCatalog:
          type: string
          format: date-time
          nullable: true
        catalogStartDate:
          type: string
          format: date-time
          nullable: true
        catalogEndDate:
          type: string
          format: date-time
          nullable: true
        daysAvailableInCatalog:
          type: integer
          format: int32
          nullable: true
        upc:
          type: string
          description: UPC code of the product.
          nullable: true
        upCs:
          type: array
          items:
            type: string
          description: UPC code of the products (populated for configurable products).
          nullable: true
        mfgPartNumber:
          type: string
          description: Manufacturer part number.
          nullable: true
        mfgPartNumbers:
          type: array
          items:
            type: string
          description: Manufacturer part numbers (populated for configurable products).
          nullable: true
        variationProductCode:
          type: string
          description: When a configurable product has IsPurchasable=true on a GetProduct,
            this property will be populated for submission to cart.
          nullable: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductCategory"
          description: List of categories to which this product belongs.
          nullable: true
        measurements:
          $ref: "#/components/schemas/StoreFrontProductPackageMeasurements"
        isPackagedStandAlone:
          type: boolean
          description: Is this product shipped in its own package
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductProperty"
          description: List of product properties. These are attributes that might apply
            to multiple products, for example, price, size, manufacturer. These
            attributes cannot be configured by the shopper.
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductOption"
          description: "List of the product's configurable options and extras. \r

            Includes whether an option is configurable (for example,
            a T-shirt) or an Extra (for example, monogram or gift-wrapping)."
          nullable: true
        variations:
          type: array
          items:
            $ref: "#/components/schemas/VariationSummary"
          nullable: true
        validPriceLists:
          type: array
          items:
            type: string
          nullable: true
        locationsInStock:
          type: array
          items:
            type: string
          nullable: true
        slicingAttributeFQN:
          type: string
          nullable: true
        productImageGroups:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductImageGroup"
          description: "List of the image groups this product uses.\r

            Image groups are used to map different images to
            different product options.\r

            If the product doesn't have options then all images will
            be in the default\r

            image group."
          nullable: true
        sliceValue:
          type: string
          description: Readonly value of the selected value of the option corresponding to
            the Mozu.ProductRuntime.Contracts.Product.SlicingAttributeFQN
          nullable: true
        productCollections:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductCollectionInfo"
          description: List of product codes of product collections that this product is a
            member of.
          nullable: true
        productCollectionMembers:
          type: array
          items:
            $ref: "#/components/schemas/ProductCollectionMember"
          description: "list of member products that are part of the collection\r

            This requires that the ProductUsage be set to
            Collection"
          nullable: true
        collectionMembersProductContent:
          type: array
          items:
            $ref: "#/components/schemas/ProductContent"
          description: Only used for indexing
          nullable: true
      additionalProperties: false
      description: Details of a product, including its product code, name,
        description, options (if any), and current state--whether the product
        can be purchased given the options selected currently.
    StoreFrontProductProductCollection:
      type: object
      properties:
        nextCursorMark:
          type: string
          description: "If a cursorMark is provided on the request, then the
            nextCursorMark will be populated on the response.\r

            Provide this value as the cursorMark argument on the
            next request. If a cursorMark is provided on the request and the
            nextCursorMark value is null, then the end of the resultset was
            reached"
          nullable: true
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProduct"
          nullable: true
      additionalProperties: false
    StoreFrontProductLocationInventory:
      type: object
      properties:
        productCode:
          type: string
          nullable: true
        locationCode:
          type: string
          nullable: true
        stockAvailable:
          type: integer
          format: int32
          nullable: true
        softStockAvailable:
          type: integer
          format: int32
          nullable: true
        sku:
          type: string
          nullable: true
        mfgPartNumber:
          type: string
          nullable: true
      additionalProperties: false
      description: The inventory for a product at a specific Location
    StoreFrontProductLocationInventoryCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductLocationInventory"
          nullable: true
      additionalProperties: false
    LocationInventoryQuery:
      type: object
      properties:
        locationCodes:
          type: array
          items:
            type: string
          nullable: true
        productCodes:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
      description: The inventory for a product at a specific Location
    ProductCostQuery:
      type: object
      properties:
        productCodes:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    StoreFrontProductProductCost:
      type: object
      properties:
        productCode:
          type: string
          nullable: true
        cost:
          type: number
          format: double
      additionalProperties: false
      description: The inventory for a product at a specific Location
    ProductCostCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductCost"
          nullable: true
      additionalProperties: false
    ProductForIndexing:
      type: object
      allOf:
        - $ref: "#/components/schemas/StoreFrontProductProduct"
      properties:
        slices:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProduct"
          nullable: true
      additionalProperties: false
    ProductOptionSelection:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Fully Qualified Name of the selected option's attribute
          nullable: true
        value:
          description: Value of the selected option
          nullable: true
        attributeValueId:
          type: integer
          description: The unique ValueId of the Attribute (this can be sent as an
            alternative the to the AttributeFqn and Value)
          format: int32
          nullable: true
        shopperEnteredValue:
          description: Value that shopper entered if this is an Extra of VaolueType
            ShopperEntered.  This allows shopper data entry (such as the
            shopper's initials).
          nullable: true
      additionalProperties: false
      description: Name of the option that has been selected, and, if this is a
        stand-alone option, the value that the shopper entered.
    ProductOptionSelections:
      type: object
      properties:
        variationProductCode:
          type: string
          description: For a product with options, the code of the product variation that
            represents the current selection of product options.
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/ProductOptionSelection"
          description: List of the product options that the shopper has currently selected.
          nullable: true
      additionalProperties: false
      description: If the product has configurable options, the current state of the
        shopper's selections.
    ConfiguredProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code associated with the product, for example, a
            SKU.
          nullable: true
        purchaseLocation:
          type: string
          description: "The location where the product is being purchased.. default is
            null. Products can have different prices\r

            by purchaseLocation via custom priceListResolution...."
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        variationProductCode:
          type: string
          description: "For a product with options, the code of the product variation that
            represents the current selection of product options. \r

            Question: is this right?"
          nullable: true
        upc:
          type: string
          description: UPC code of the product.
          nullable: true
        mfgPartNumber:
          type: string
          description: Manufacturer part number.
          nullable: true
        purchasableState:
          $ref: "#/components/schemas/ProductPurchasableState"
        priceRange:
          $ref: "#/components/schemas/ProductPriceRange"
        volumePriceBands:
          type: array
          items:
            $ref: "#/components/schemas/ProductVolumePrice"
          description: For products with bulk pricing... this will be populated with
            pricebands, depending on what options have been selected...
          nullable: true
        volumePriceRange:
          $ref: "#/components/schemas/ProductPriceRange"
        price:
          $ref: "#/components/schemas/StoreFrontProductProductPrice"
        availableShippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductDiscount"
          description: List of potential shipping discounts available for this product.
          nullable: true
        measurements:
          $ref: "#/components/schemas/StoreFrontProductPackageMeasurements"
        inventoryInfo:
          $ref: "#/components/schemas/StoreFrontProductProductInventoryInfo"
        options:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductOption"
          description: Remaining options and option values that can be selected given the
            shopper's current selection of options.
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductProperty"
          description: Remaining options and option values that can be selected given the
            shopper's current selection of options.
          nullable: true
        priceListEntryTypeProperty:
          $ref: "#/components/schemas/StoreFrontProductProductProperty"
        productImages:
          type: array
          items:
            $ref: "#/components/schemas/ProductImage"
          description: Images associated with the product.
          nullable: true
      additionalProperties: false
      description: Product as it is currently configured on the storefront. The
        configuration changes each time the shopper changes the product order.
    BundledProductSummary:
      type: object
      allOf:
        - $ref: "#/components/schemas/BundledProductBase"
      properties:
        productShortDescription:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
      additionalProperties: false
    ProductValidationSummary:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code associated with the product, for example, a
            SKU.
          nullable: true
        purchaseLocation:
          type: string
          description: "The location where the product is being purchased.. default is
            null. Products can have different prices\r

            by purchaseLocation via custom priceListResolution...."
          nullable: true
        productUsage:
          type: string
          description: The UsageType of this product (Standard, Configurable, Bundle,
            Component)
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        goodsType:
          type: string
          description: The GoodsType of the product (Physical, Digital, DigitalCredit....)
          nullable: true
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/BundledProductSummary"
          description: The list of Bundled products included in this product. This is only
            populated when ProductUsage=Bundle
          nullable: true
        upc:
          type: string
          description: UPC code of the product.
          nullable: true
        mfgPartNumber:
          type: string
          description: Manufacturer part number.
          nullable: true
        variationProductCode:
          type: string
          description: For a product with options, the code of the product variation that
            represents the current selection of product options.
          nullable: true
        purchasableState:
          $ref: "#/components/schemas/ProductPurchasableState"
        price:
          $ref: "#/components/schemas/StoreFrontProductProductPrice"
        measurements:
          $ref: "#/components/schemas/StoreFrontProductPackageMeasurements"
        isPackagedStandAlone:
          type: boolean
          description: Is this product shipped in its own package
          nullable: true
        image:
          $ref: "#/components/schemas/ProductImage"
        productShortDescription:
          type: string
          description: Brief description of the product typically used when the product is
            displayed in a list or search results.
          nullable: true
        productName:
          type: string
          description: Name of the product.
          nullable: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductCategory"
          description: Categories to which the product belongs.
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProductProperty"
          description: List of product Properties.
          nullable: true
        pricingBehavior:
          $ref: "#/components/schemas/StoreFrontProductProductPricingBehaviorInfo"
        inventoryInfo:
          $ref: "#/components/schemas/StoreFrontProductProductInventoryInfo"
        isTaxable:
          type: boolean
          description: If true, the product listed on the live order is subject to tax.
        productType:
          type: string
          nullable: true
      additionalProperties: false
    DiscountSelections:
      type: object
      properties:
        discountIds:
          type: array
          items:
            type: integer
            format: int32
          description: Discount Ids
          nullable: true
      additionalProperties: false
      description: Discount Selections
    DiscountValidationSummary:
      type: object
      properties:
        applicableDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductDiscount"
          description: Applicable/Valid Discounts
          nullable: true
      additionalProperties: false
      description: Provides a summary (more accurately it is a container) for valid
        discounts for potentially valid discounts for a product
    SearchSuggestion:
      type: object
      properties:
        suggestionType:
          type: string
          description: "The type of Suggestion (e.g. Term, Product, Category). \r

            Will be one of the values of the SuggestionTypeConst
            type."
          nullable: true
        suggestion:
          description: "A suggested entity based on the search query. Use the
            SuggestionType to determine the type of entity.\r

            Could be a SearchTerm, Product, or Category"
          nullable: true
      additionalProperties: false
      description: A suggested result based on the search query
    SearchSuggestionGroup:
      type: object
      properties:
        name:
          type: string
          description: Group Name
          nullable: true
        suggestions:
          type: array
          items:
            $ref: "#/components/schemas/SearchSuggestion"
          description: List of related SearchSuggestions
          nullable: true
      additionalProperties: false
    SearchSuggestionResult:
      type: object
      properties:
        query:
          type: string
          description: Text that the shopper types in a search query.
          nullable: true
        suggestionGroups:
          type: array
          items:
            $ref: "#/components/schemas/SearchSuggestionGroup"
          description: List of SearchSuggestionGroups
          nullable: true
      additionalProperties: false
      description: List of items to suggest to the shopper who is entering a search
        query, for example, a search box on the storefront.
    RequestFilter:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    VisualSearchResult:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
        trackingId:
          type: string
          nullable: true
        pageId:
          type: string
          nullable: true
      additionalProperties: false
    ProductSearchRandomAccessCursor:
      type: object
      properties:
        cursorMarks:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
      description: A calculated set of cursor marks for a given query that can be
        accessed in any order, providing the ability to page through all results
        in random/paralellized order
    FacetValue:
      type: object
      properties:
        label:
          type: string
          nullable: true
        isApplied:
          type: boolean
          description: True if this FacetValue was supplied as a facet value filter in the
            current search
          nullable: true
        count:
          type: integer
          description: Number of occurrences of FacetValue in result set.
          format: int32
        value:
          type: string
          description: String representation of Facet Value
          nullable: true
        filterValue:
          type: string
          description: Submit this as a facet value filter
          nullable: true
        rangeQueryValueStart:
          type: string
          description: When range query Facet
          nullable: true
        rangeQueryValueEnd:
          type: string
          description: When range query Facet
          nullable: true
        parentFacetValue:
          type: string
          description: When hierarchical Facet
          nullable: true
        isDisplayed:
          type: boolean
          description: Indicates whether the FacetValue should be displayed
        childrenFacetValues:
          type: array
          items:
            $ref: "#/components/schemas/FacetValue"
          description: When hierarchical Facet
          nullable: true
      additionalProperties: false
      description: ""
    StoreFrontProductFacet:
      type: object
      properties:
        label:
          type: string
          nullable: true
        facetType:
          type: string
          description: Value, RangeQuery, Hierarchy
          nullable: true
        field:
          type: string
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/FacetValue"
          nullable: true
      additionalProperties: false
      description: For faceted searches, name of the facet and list of facet values.
        For example, a facet called "Brands" may have the facet values "Apple,"
        "Motorola," and "Samsung."
    SolrDebugInfo:
      type: object
      properties:
        searchTuningRuleCode:
          type: string
          nullable: true
        boostedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        blockedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        boostQueries:
          type: array
          items:
            type: string
          nullable: true
        boostFunctions:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ProductSearchResult:
      type: object
      properties:
        searchEngine:
          type: string
          nullable: true
        facets:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductFacet"
          nullable: true
        solrDebugInfo:
          $ref: "#/components/schemas/SolrDebugInfo"
        nextCursorMark:
          type: string
          nullable: true
        searchRedirect:
          type: string
          nullable: true
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StoreFrontProductProduct"
          nullable: true
      additionalProperties: false
      description: Products and facets returned from search criteria supplied in a
        ProductSearch query.
    FieldTypeDefinitionRepositoryEntry:
      type: object
      properties:
        name:
          type: string
          nullable: true
        suffix:
          type: string
          nullable: true
        solrFieldType:
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    SchemaDefinitionField:
      required:
        - fieldDefinition
        - fieldName
      type: object
      properties:
        fieldName:
          type: string
        fieldDefinition:
          type: string
        friendlyName:
          type: string
          nullable: true
        searchFieldName:
          type: string
          nullable: true
        ingestFieldName:
          type: string
          nullable: true
      additionalProperties: false
    SchemaDefinition:
      required:
        - fields
        - language
      type: object
      properties:
        language:
          type: string
        isPublished:
          type: boolean
        fields:
          type: array
          items:
            $ref: "#/components/schemas/SchemaDefinitionField"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
