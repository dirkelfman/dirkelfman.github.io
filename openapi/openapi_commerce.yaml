openapi: 3.0.1
info:
  title: Kibo Commerce API Services Documentation
  version: v1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  description: OpenAPI Spec for Kibo Commerce API Services
servers:
  - url: https://t{tenantId}.{env}.mozu.com/api
    description: Tenant Level Api
    variables:
      tenantId:
        default: "0"
        description: Id of the Tenant
      env:
        default: sb
        enum:
          - sb
          - tp1
          - tp2
          - tp3
          - tp4
          - tp5
          - stg1
          - perf1
  - url: https://t{tenantId}-s{siteId}.{env}.mozu.com/api
    description: Site Level Api
    variables:
      tenantId:
        default: "0"
        description: Id of the Tenant
      siteId:
        default: "0"
        description: Id of the Site
      env:
        default: sb
        enum:
          - sb
          - tp1
          - tp2
          - tp3
          - tp4
          - tp5
          - stg1
          - perf1
  - url: https://home.mozu.com/api
    description: HomePod Api
paths:
  /commerce/carts/summary:
    get:
      tags:
        - Cart
      summary: Retrieves the number of items in the active cart, total cost of items
        in the cart, and whether the cart has expired
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartSummary"
      description: (Carts of anonymous shoppers expire in 14 days.)
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/user/{userId}/summary":
    get:
      tags:
        - Cart
      summary: Retrieves the number of items in the active cart, total cost of items
        in the cart, and whether the cart has expired.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartSummary"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/summary":
    get:
      tags:
        - Cart
      summary: Retrieves the number of items in the specified cart, total cost of
        items in the cart, and whether the cart has expired.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartSummary"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/user/{userId}":
    get:
      tags:
        - Cart
      summary: Retrieves the details of the user's cart specified by user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Get the current cart or create a new cart for the user specified by
        user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates the cart of the user specified by user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the cart to update. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current:
    get:
      tags:
        - Cart
      summary: Retrieves a cart's contents for the current shopper
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: |-
        
        If the shopper does not have an active cart on the site, one is created.
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates the cart of the current shopper
      requestBody:
        description: "All properties of the cart to update. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Deletes the cart of the current shopper
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}":
    get:
      tags:
        - Cart
      summary: Retrieves the details of the cart specified by cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: >-
        
        This is useful for managing carts, for example, locating abandoned carts.
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates the cart specified by cart ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the cart to update. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Deletes the cart specified by its cart ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{userId}":
    delete:
      tags:
        - Cart
      summary: Deletes the cart for the user specified by user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/rejectautodiscount/{discountId}":
    post:
      tags:
        - Cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/coupons/{couponCode}":
    delete:
      tags:
        - Cart
      summary: Removes a coupon that had been previously applied to the cart
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/coupons":
    delete:
      tags:
        - Cart
      summary: Removes all coupons that had been previously applied to the cart
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart with the coupon you want to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/coupons/{couponcode}":
    delete:
      tags:
        - Cart
      summary: Removes a coupon that had been previously applied to the cart
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/extendedproperties:
    get:
      tags:
        - Cart
      summary: Get extended properties on a cart
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Get extended properties on a cart
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Adds extended properties
      requestBody:
        description: Extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Adds extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updated extended properties
      parameters:
        - name: upsert
          in: query
          description: Allow insert or update
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Delete extended properties
      requestBody:
        description: Extended properties.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      description: Delete extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/extendedproperties/{key}":
    put:
      tags:
        - Cart
      summary: Updated extended property
      parameters:
        - name: key
          in: path
          description: Unique identifier of the cart item
          required: true
          schema:
            type: string
        - name: upsert
          in: query
          description: Extended property
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended property
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes a particular extended property
      parameters:
        - name: key
          in: path
          description: Unique identifier of the extended property
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Removes a particular extended property
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/items:
    get:
      tags:
        - Cart
      summary: "Retrieves the details of each cart item such as the product name,
        stock count, unit price, discounts, quantity ordered, and total price\r

        for the current shopper"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Clears all cart items from the cart of a current shopper
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Adds a product or other item to the cart of the current shopper
      requestBody:
        description: "All properties of the new cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/items":
    get:
      tags:
        - Cart
      summary: "Retrieves the details of each cart item such as the product name,
        stock count, unit price, discounts, quantity ordered, and total price\r

        for the cart specified by the cart ID"
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Clears all cart items from the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Adds a product or other item to the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the new cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/items/{cartItemId}":
    get:
      tags:
        - Cart
      summary: Retrieves an individual cart item from the cart of the current shopper
        specified by its cart ID
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates a particular cart item in the cart of the current shopper
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the updated cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes a particular cart item from the cart of the current shopper
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/items/{cartItemId}":
    get:
      tags:
        - Cart
      summary: Retrieves an individual cart item from the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates a particular cart item in the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the updated cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes a particular cart item from the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/bulkitems:
    post:
      tags:
        - Cart
      summary: Adds multiple items to the cart of the current shopper
      parameters:
        - name: throwErrorOnInvalidItems
          in: query
          description: When set to true none of the items will be added when some items
            are invalid. when set to false valid items are added and invalid
            items are removed
          schema:
            type: boolean
      requestBody:
        description: The items to add to the cart
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/bulkitems":
    post:
      tags:
        - Cart
      summary: Adds multiple items to the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: throwErrorOnInvalidItems
          in: query
          description: When set to true none of the items will be added when some items
            are invalid. when set to false valid items are added and invalid
            items are removed
          schema:
            type: boolean
      requestBody:
        description: The items to add to the cart
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/items/{cartItemId}/{quantity}":
    put:
      tags:
        - Cart
      summary: Updates the quantity of an individual cart item in the cart of the
        current shopper
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: New quantity for the specified cart item.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/items/{cartItemId}/{quantity}":
    put:
      tags:
        - Cart
      summary: Updates the quantity of an individual cart item in the cart specified
        by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: New quantity for the specified cart item.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/messages:
    get:
      tags:
        - Cart
      summary: Retrieves messages to and from the current shopper
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartChangeMessageCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CartChangeMessageCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartChangeMessageCollection"
      description: "These are messages supplied by the system to notify the shopper \r

        of price increases or decreases or product unavailability."
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes all messages associated with the cart of the current shopper
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/messages/{messageId}":
    delete:
      tags:
        - Cart
      summary: Removes a single message associated with the cart of the current shopper
      parameters:
        - name: messageId
          in: path
          description: Unique identifier of the message to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/channels:
    get:
      tags:
        - Channel
      summary: Retrieves a list of channels according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the channel in which the
            results appear. Either ascending (a-z) or descending (z-a) channel.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Channel
      summary: Creates a new channel
      requestBody:
        description: All properties of the channel to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/plain:
              schema:
                $ref: "#/components/schemas/Channel"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/channels/{code}":
    get:
      tags:
        - Channel
      summary: Retrieves the details of an channel specified by the channel ID
      parameters:
        - name: code
          in: path
          description: Unique identifier of the channel whose details you want.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/plain:
              schema:
                $ref: "#/components/schemas/Channel"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Channel
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      requestBody:
        description: All properties of the channel to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/plain:
              schema:
                $ref: "#/components/schemas/Channel"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Channel
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/channelgroups:
    get:
      tags:
        - ChannelGroup
      summary: Retrieves a list of channel groups according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the channel in which the
            results appear. Either ascending (a-z) or descending (z-a) channel.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroupCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroupCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroupCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ChannelGroup
      summary: Creates a new channel
      requestBody:
        description: All properties of the channel group to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelGroup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/channelgroups/{code}":
    get:
      tags:
        - ChannelGroup
      summary: Retrieves the details of an channel group specified by the channel ID
      parameters:
        - name: code
          in: path
          description: Unique identifier of the channel whose details you want.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ChannelGroup
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      requestBody:
        description: All properties of the channel group to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelGroup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ChannelGroup
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/attributes":
    post:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: removeMissing
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}":
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Updates the details of a checkout specified by the checkout ID
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose details you want.
          required: true
          schema:
            type: string
      requestBody:
        description: Checkout that needs update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Checkout"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/checkouts:
    get:
      tags:
        - Checkout
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: qLimit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CheckoutCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CheckoutCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Creates a new checkout from an existing cart, that is, when the
        customer chooses to proceed to checkout
      parameters:
        - name: cartId
          in: query
          description: Unique identifier of the cart. This is the original cart ID
            expressed as a GUID.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/shippingMethods":
    get:
      tags:
        - Checkout
      summary: Retrieves available shipping methods for groupings
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose shipping methods you want
            to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutGroupRates"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutGroupRates"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutGroupRates"
      description: Typically used to display available shipping method options on the
        checkout page.
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Sets the shipping method for specified groupings
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose shipping methods you want
            to set.
          required: true
          schema:
            type: string
      requestBody:
        description: Pairings of checkout group to shipping method
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CheckoutGroupShippingMethod"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/actions":
    get:
      tags:
        - Checkout
      summary: Retrieves available actions which depends on the status of the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose available actions you want
            to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Perform an action on the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout.
          required: true
          schema:
            type: string
      requestBody:
        description: The action to perform
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: Available actions depend on the current state of the checkout. If
        in doubt, get a list of available checkout actions first.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}":
    put:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: digitalWalletType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalWallet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/priceList":
    put:
      tags:
        - Checkout
      summary: Changes the pricelist associated with a checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout to change
          required: true
          schema:
            type: string
      requestBody:
        description: The code for the pricelist to apply
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: |-
        
        The desired price list code should be specified on the ApiContext.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/email/resend":
    post:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/coupons/{couponCode}":
    delete:
      tags:
        - Checkout
      summary: Removes a coupon that had been previously applied to the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/coupons":
    delete:
      tags:
        - Checkout
      summary: Removes all coupons that had been previously applied to the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/coupons/{couponcode}":
    delete:
      tags:
        - Checkout
      summary: Removes a coupon that had been previously applied to the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/destinations/{destinationId}":
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeDestination"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/destinations":
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeDestination"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items":
    post:
      tags:
        - Checkout
      summary: Adds a product or other item to the checkout of the current shopper
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout to add an item to.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the new item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/{itemId}":
    delete:
      tags:
        - Checkout
      summary: Removes a particular item from the checkout of the current shopper
      parameters:
        - name: checkoutId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: Unique identifier of the item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/{itemId}/split":
    post:
      tags:
        - Checkout
      summary: Splits an existing item into two
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout containing the item to split
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: The ID of the item to split
          required: true
          schema:
            type: string
        - name: quantity
          in: query
          description: What quantity to split off. Defaults to 1.
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: "The new item's quantity will be !:quantity, and the original
        item's\r

        quantity will be reduced accordingly."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}":
    put:
      tags:
        - Checkout
      summary: Associate an item to a destination
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: ID of the item to update
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          description: ID of the destination
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/destinations":
    post:
      tags:
        - Checkout
      summary: Associate an items to destinations in bulk
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout
          required: true
          schema:
            type: string
      requestBody:
        description: Pairings of destination IDs with their associated items by ID
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ItemsForDestination"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/payments/actions":
    post:
      tags:
        - Checkout
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose payment action you want to
            change.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions":
    post:
      tags:
        - Checkout
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose payment action you want to
            change.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/{paymentId}/actions":
    post:
      tags:
        - Order
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment action you want to
            change.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves available payment actions which depends on the status of the
        order's payment transaction
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose available payment actions you
            want to get.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: "\r

        Possible actions can be \"Create,\" \"Capture,\" \"Void,\"
        \"AuthCapture,\" or \"ReceiveCheck.\""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/{paymentId}":
    get:
      tags:
        - Order
      summary: Retrieves a specific payment transaction from the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment transaction you want
            to get.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: Unique identifier of the payment transaction you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/plain:
              schema:
                $ref: "#/components/schemas/Payment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments":
    get:
      tags:
        - Order
      summary: Retrieves payment transactions for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment transactions you want
            to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
      description: Allows filtering and sorting.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/autocapture":
    post:
      tags:
        - Order
      summary: Attempts to capture payments for any fulfilled shipments.
      description: Amount to capture is total of fulfilled shipments - order
        adjustment - amount already captured.
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order you want to auto capture.
          required: true
          schema:
            type: string
        - name: forceCapture
          in: query
          description: Also capture unfulfilled shipments (excluding backorder). Used when
            credit card auths are about to expire.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/pickups":
    post:
      tags:
        - Order
      summary: Apply a pickup to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
      requestBody:
        description: Pickup to create and add to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pickup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/plain:
              schema:
                $ref: "#/components/schemas/Pickup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/pickups/{pickupId}":
    put:
      tags:
        - Order
      summary: Delete an order pickup
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup to update on the order
          required: true
          schema:
            type: string
      requestBody:
        description: Pickup content to update on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pickup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/plain:
              schema:
                $ref: "#/components/schemas/Pickup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete an order pickup
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Get an order pickup
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/plain:
              schema:
                $ref: "#/components/schemas/Pickup"
      description: Get an order pickup
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/pickups/{pickupId}/actions":
    get:
      tags:
        - Order
      summary: Retrieves available fulfillment actions
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order on which to get a list of available
            actions.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup ID to get fulfillment actions for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/refunds":
    post:
      tags:
        - Order
      summary: Apply a refund to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
      requestBody:
        description: Refund to create on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Refund"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
            text/json:
              schema:
                $ref: "#/components/schemas/Refund"
            text/plain:
              schema:
                $ref: "#/components/schemas/Refund"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/refunds/{refundId}":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: refundId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/refunds/refundreasons:
    get:
      tags:
        - Order
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundReasonCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/RefundReasonCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/RefundReasonCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/returnableitems":
    get:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderReturnableItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderReturnableItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderReturnableItemCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments":
    post:
      tags:
        - Order
      summary: Creates a shipment by grouping together multiple packages into logical
        shipments
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order which is ready to be shipped.
          required: true
          schema:
            type: string
      requestBody:
        description: Package ids to use in creating shipments.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentId}":
    delete:
      tags:
        - Order
      summary: Deletes an existing order shipment
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes an existing order shipment
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Allows a shipment to be retrieved for the order
      parameters:
        - name: orderId
          in: path
          description: ID of the order
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: Shipment ID of the order.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/methods":
    get:
      tags:
        - Order
      summary: Retrieves available shipping methods
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose shipping methods you want to
            get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShippingRate"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShippingRate"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShippingRate"
      description: Typically used to display available shipping method options on the
        checkout page.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice":
    post:
      tags:
        - Order
      parameters:
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepriceShipmentObject"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments":
    post:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShipmentAdjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments":
    post:
      tags:
        - Order
      parameters:
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShipmentItemAdjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/split":
    post:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SplitShipmentsObject"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/validationresults":
    put:
      tags:
        - Order
      summary: Adds a validation result from an external system to an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a note.
          required: true
          schema:
            type: string
      requestBody:
        description: The order validation result.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderValidationResult"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Adds a validation result from an external system to an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a note.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderValidationResult"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderValidationResult"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderValidationResult"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/adjustment":
    put:
      tags:
        - Order
      summary: Apply a coupon to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Adjustment to apply to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Adjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: " coupon?"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: coupon?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/adjustment/shipping":
    put:
      tags:
        - Order
      summary: Apply a coupon to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Adjustment to apply to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Adjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: " coupon?"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: coupon?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/adjustment/handling":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Adjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/attributes":
    post:
      tags:
        - Order
      summary: Adds a attributeSet to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a
            attributeSet.
          required: true
          schema:
            type: string
      requestBody:
        description: Attributes to upsert.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      description: This is an internal attributeSet that the merchant might want to
        add to an order.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves a list of all attributeSets for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose attributeSets you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updates a specific order attributeSet for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose attributeSet you want to update.
          required: true
          schema:
            type: string
        - name: removeMissing
          in: query
          description: Indicates that items missing from the collection should be removed.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Attributes to upsert.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/billinginfo":
    get:
      tags:
        - Order
      summary: Retrieves the customer's billing address, and, if paying by credit
        card, the card's number, expiration date, card holder's name and billing
        address
      parameters:
        - name: orderId
          in: path
          description: Unique identifer of the order whose customer's payment source you
            want to get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Determines whether the draft version should be retrieved if one
            exists.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/BillingInfo"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Adds a payment source to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment source you want to
            update.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: All the properties that you want the payment source object to contain.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/BillingInfo"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/cancel/reasons:
    get:
      tags:
        - Order
      parameters:
        - name: category
          in: query
          schema:
            type: string
            default: SHOPPER
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelReasonCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CancelReasonCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CancelReasonCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/cancel/{orderId}":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeCanceledReason"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders:
    get:
      tags:
        - Order
      summary: Retrieves a list of orders according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: Text to perform a search on
          schema:
            type: string
        - name: qLimit
          in: query
          description: Limit of the records to include in a search, used for global search
          schema:
            type: integer
            format: int32
        - name: includeBin
          in: query
          description: Whether to include BIN numbers on credit card payments
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          description: Response groups to return or filter the order graph
          schema:
            type: string
        - name: mode
          in: query
          description: "'synthesized' to provide a synthesized order from shipment data"
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Order
      summary: Creates a new order for no-cart quick-ordering scenarios
      parameters:
        - name: cartId
          in: query
          description: Unique identifier of the cart. This is the original cart ID
            expressed as a GUID.
          schema:
            type: string
      requestBody:
        description: All properties of the order to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/users":
    put:
      tags:
        - Order
      summary: Changes the User ID associated with an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to change.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: (This will probably not be exposed.)
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/priceList":
    put:
      tags:
        - Order
      summary: Changes the pricelist associated with an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to change
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: The code for the pricelist to apply
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: |-
        
        The desired price list code should be specified on the ApiContext.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/email/resend":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderAction"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}":
    get:
      tags:
        - Order
      summary: Retrieves the details of an order specified by the order ID
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose details you want.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
        - name: includeBin
          in: query
          description: Whether to include BIN numbers on credit card payments
          schema:
            type: boolean
            default: false
        - name: mode
          in: query
          description: "'synthesized' to provide a synthesized order from shipment data"
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updates the billing and/or shipping information of an existing order
      parameters:
        - name: orderId
          in: path
          description: The order ID to update.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: All properties of the order to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: digitalWalletType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalWallet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/draft":
    put:
      tags:
        - Order
      summary: Deletes a draft version of an order
      parameters:
        - name: orderId
          in: path
          description: The order ID to update.
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/actions":
    post:
      tags:
        - Order
      summary: Set an action on the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to perform, which can be "Create," "Submit,"
          "SetAsProcessing," "Close," or "Cancel."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: Available actions depend on the current status of the order. If in
        doubt, get a list of available order actions first.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves available order actions which depends on the status of the
        order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose available order actions you
            want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: "\r

        Possible actions can be \"Create,\" \"Submit,\"
        \"SetAsProcessing,\" \"Close,\" or \"Cancel.\""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/taxableorders":
    get:
      tags:
        - Order
      summary: Gets an order divided up into "TaxableOrders" based on the source and
        delivery locations of the order items
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose taxable orders you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PricingTaxableOrder"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PricingTaxableOrder"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PricingTaxableOrder"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/discounts/{discountId}":
    put:
      tags:
        - Order
      summary: Apply a coupon to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          description: Identifies the discount to be updated.
          required: true
          schema:
            type: integer
            format: int32
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Discount information to use as the update source.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/price:
    post:
      tags:
        - Order
      parameters:
        - name: refreshShipping
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/sms/optout/{siteId}":
    put:
      tags:
        - Order
      parameters:
        - name: siteId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/coupons/{couponCode}":
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/coupons":
    delete:
      tags:
        - Order
      summary: Removes all coupons that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/coupons/{couponcode}":
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalpackages":
    post:
      tags:
        - Order
      summary: Apply a digital package to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the digital
            package.
          required: true
          schema:
            type: string
      requestBody:
        description: Digital Package to create and add to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalPackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}":
    put:
      tags:
        - Order
      summary: Delete an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Package to update on the order
          required: true
          schema:
            type: string
      requestBody:
        description: Package content to update on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalPackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete an order digital package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Digital package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Get an order digital package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Digital Package Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
      description: Get an order digital package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions":
    get:
      tags:
        - Order
      summary: Retrieves available fulfillment actions
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order on which to get a list of available
            actions.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Package ID to get fulfillment actions for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/extendedproperties":
    get:
      tags:
        - Order
      summary: Get extended properties on an order
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: ""
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Get extended properties on an order
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Order
      summary: Adds extended properties
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Extended properties.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Adds extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updated extended properties
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
        - name: upsert
          in: query
          description: Allow insert or update
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete extended properties
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Keys of extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      description: Delete extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/extendedproperties/{key}":
    put:
      tags:
        - Order
      summary: Updated extended property
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: Key
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
        - name: upsert
          in: query
          description: Allow insert or update
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended property
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a particular order item from the order of the current shopper
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/fulfillment/actions":
    post:
      tags:
        - Order
      summary: Sets the fulfillment action to "Ship
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order which is ready to be shipped.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to perform along with metadata about which packages, digital
          packages, or pickups to perform the action on
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: " To ship an order, the order must have a customer name, the
        \"Open\" or \"OpenAdProcessing\"\r

        status, full shipping address, and shipping method."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/fulfillment/email/resend":
    post:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/fulfillmentinfo":
    get:
      tags:
        - Order
      summary: Retrieves an order's fulfillment information specified by order ID
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Determines whether the draft version should be retrieved if one
            exists.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Modifies an order's fulfillment information
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose fulfillment information you
            want to change.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: All properties that you want the updated fulfillment information to
          have.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
      description: For example, to update the fulfillment address, estimated delivery
        date, or the merchant's fulfillment cost.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items":
    get:
      tags:
        - Order
      summary: Retrieves the details of all items in an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose items you want to get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Order
      summary: Adds a product or other item to the cart of the current shopper
      parameters:
        - name: orderId
          in: path
          description: ID of the order to add an item to.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
        - name: skipInventoryCheck
          in: query
          description: Determines wheter or not to check inventory on an item when adding
            an item to the order or when placing an order
          schema:
            type: boolean
      requestBody:
        description: "All properties of the new cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}":
    get:
      tags:
        - Order
      summary: Retrieves the details of a single order item
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose item you want to get.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item whose details you want to get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a particular order item from the order of the current shopper
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{lineId}":
    get:
      tags:
        - Order
      summary: Retrieves the details of a single order item via its line id
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose item you want to get.
          required: true
          schema:
            type: string
        - name: lineId
          in: path
          description: Line ID of the order item whose details you want to get.
          required: true
          schema:
            type: integer
            format: int32
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/price/{price}":
    put:
      tags:
        - Order
      summary: Updates the quantity of an individual cart item in the order of the
        current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: price
          in: path
          description: Price to update the item product to.
          required: true
          schema:
            type: number
            format: double
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: Quantity?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}":
    put:
      tags:
        - Order
      summary: Updates the quantity of an individual cart item in the order of the
        current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: New quantity for the specified order item.
          required: true
          schema:
            type: integer
            format: int32
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}":
    put:
      tags:
        - Order
      summary: Updates the quantity of an individual cart item in the order of the
        current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: dutyAmount
          in: path
          description: Duty amount to update the item product to.
          required: true
          schema:
            type: number
            format: double
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: Quantity?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/fulfillment":
    put:
      tags:
        - Order
      summary: Updates the fullfillment method and/or location of an individual order
        item in the order of the current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: The order item containing fulfilment information to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}":
    put:
      tags:
        - Order
      summary: Update a discount on the order item to ignore or unignore it
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          description: Identifies the discount to be updated.
          required: true
          schema:
            type: integer
            format: int32
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Discount information to use as the update source.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/notes":
    post:
      tags:
        - Order
      summary: Adds a note to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a note.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note. Maximum 256 characters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: This is an internal note that the merchant might want to add to an order.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves a list of all notes for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose notes you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/notes/{noteId}":
    get:
      tags:
        - Order
      summary: Retrieves a specific order note from an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose note you want to get.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updates a specific order note for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose note you want to update.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Deletes a specific order note on an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose note you want to delete.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages":
    post:
      tags:
        - Order
      summary: Apply a package to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
      requestBody:
        description: Package to create and add to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages/{packageId}":
    put:
      tags:
        - Order
      summary: Delete an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to update on the order
          required: true
          schema:
            type: string
      requestBody:
        description: Package content to update on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Get an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: Get an order package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages/{packageId}/label":
    get:
      tags:
        - Order
      summary: Get an order package label
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Get an order package label
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages/{packageId}/actions":
    get:
      tags:
        - Order
      summary: Retrieves available fulfillment actions
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order on which to get a list of available
            actions.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package ID to get fulfillment actions for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/actions":
    post:
      tags:
        - Order
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment action you want to
            change.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/attributedefinition/attributes:
    get:
      tags:
        - OrderAttribute
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - OrderAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/attributedefinition/attributes/{attributeFQN}/VocabularyValues":
    get:
      tags:
        - OrderAttribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/attributedefinition/attributes/{attributeFQN}":
    get:
      tags:
        - OrderAttribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - OrderAttribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  /ordervalidationcapability:
    post:
      tags:
        - OrderValidationCapability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/{quoteId}":
    get:
      tags:
        - Quote
      summary: Retrieves the details of a quote specified by the quote ID
      parameters:
        - name: quoteId
          in: path
          description: Unique identifier of the quote whose details you want.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Quote
      summary: Update quote
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Quote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Update quote
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Quote
      summary: Deletes a quote
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes a quote
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/quotes:
    get:
      tags:
        - Quote
      summary: Retrieves a list of Quotes according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: Text to perform a search on
          schema:
            type: string
        - name: qLimit
          in: query
          description: Limit of the records to include in a search, used for global search
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Quote
      summary: Create quote
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Quote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Create quote
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/customers/{customerAccountId}/{quoteName}":
    get:
      tags:
        - Quote
      summary: Retrieves quote by name
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: quoteName
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Retrieves quote by name
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/{quoteId}/items":
    get:
      tags:
        - Quote
      summary: Returns a listing of Quotes
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: Returns a listing of Quotes
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Quote
      summary: Adds an item to the Quote of the current shopper
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/customers/{customerAccountId}/{quoteName}/items":
    get:
      tags:
        - Quote
      summary: Returns a listing of Quotes
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: quoteName
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: Returns a listing of Quotes
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/{quoteId}/items/{quoteItemId}":
    get:
      tags:
        - Quote
      summary: Retrieves an individual Quote item from a Quote
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quoteItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: Retrieves an individual Quote item from a Quote
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Quote
      summary: Update Quote item
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quoteItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Update Quote item
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Quote
      summary: Delete / remove Quote item
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quoteItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete / remove Quote item
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns:
    get:
      tags:
        - Return
      summary: Provides a paged, collection of returns for a Site
      parameters:
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
        - name: q
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Return
      summary: Creates a new Return for an order or product list
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Return"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns/email/resend:
    put:
      tags:
        - Return
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnAction"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns/reasons:
    get:
      tags:
        - Return
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReasonCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReasonCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReasonCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}":
    put:
      tags:
        - Return
      summary: Updates a return
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Return"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: Updates a return
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Allows for retrieval for a return given only the return Id
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: " Further manipulation of that returns must be done off of the order."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns/actions:
    post:
      tags:
        - Return
      summary: Allows for batch processing of Returns easily
      requestBody:
        description: A ReturnAction instance that takes the name of the action to be
          performed and a list of Return Ids upon which to perform the action.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/ship":
    post:
      tags:
        - Return
      summary: Creates a child order for the return for processing replacments
      parameters:
        - name: returnId
          in: path
          description: The ID of the parent return
          required: true
          schema:
            type: string
      requestBody:
        description: Optionally specify which items to include and in what quantities
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ReturnItemSpecifier"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/actions":
    get:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments":
    get:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments/{paymentId}":
    get:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/plain:
              schema:
                $ref: "#/components/schemas/Payment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments/actions":
    post:
      tags:
        - Return
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to specify. Possible actions can be "Create," "Capture,"
          "Void," "AuthCapture," or "ReceiveCheck."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments/{paymentId}/actions":
    post:
      tags:
        - Return
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to specify. Possible actions can be "Create," "Capture,"
          "Void," "AuthCapture," or "ReceiveCheck."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Retrieves available payment actions which depends on the status of the
        order's payment transaction
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: "\r

        Possible actions can be \"AuthorizePayment\", \"RequestCheck\",
        \"CapturePayment\", \"CreditPayment\", \"DeclineCheck\",
        \"VoidPayment\", \"AuthAndCapture\", or \"ReceiveCheck\"."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/restock":
    post:
      tags:
        - Return
      summary: API to restock return item
      parameters:
        - name: returnId
          in: path
          description: Return ID
          required: true
          schema:
            type: string
      requestBody:
        description: List of return items with quantity to be restocked
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RestockableReturnItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/shipping/label":
    get:
      tags:
        - Return
      parameters:
        - name: returnId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarrierServiceGenerateLabelResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/CarrierServiceGenerateLabelResponse"
            text/plain:
              schema:
                $ref: "#/components/schemas/CarrierServiceGenerateLabelResponse"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/items":
    get:
      tags:
        - Return
      summary: Retrieves the details of all return items in an order
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose items you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Return
      summary: Adds a return item to the return
      parameters:
        - name: returnId
          in: path
          description: ID of the order to add an item to.
          required: true
          schema:
            type: string
      requestBody:
        description: All properties of the new return item.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/items/{returnItemId}":
    get:
      tags:
        - Return
      summary: Retrieves the details of a single return item
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose item you want to get.
          required: true
          schema:
            type: string
        - name: returnItemId
          in: path
          description: Unique identifier of the return item whose details you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnItem"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{orderId}/items/{orderItemId}":
    delete:
      tags:
        - Return
      summary: Removes a particular order item from the order of the current shopper
      parameters:
        - name: returnId
          in: query
          description: ""
          schema:
            type: string
        - name: returnItemId
          in: query
          description: Unique identifier of the order item.
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/notes":
    post:
      tags:
        - Return
      summary: Adds a note to the return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return to which you want to add a note.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note. Maximum 256 characters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: This is an internal note that the merchant might want to add to a return.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Retrieves a list of all notes for a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose notes you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/notes/{noteId}":
    get:
      tags:
        - Return
      summary: Retrieves a specific note from a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose note you want to get.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Return
      summary: Updates a specific note for a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose note you want to update.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Return
      summary: Deletes a specific note on a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose note you want to delete.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/packages":
    post:
      tags:
        - Return
      summary: Apply a package to the return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
      requestBody:
        description: Package to create and add to the return
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: " package?"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/packages/{packageId}":
    put:
      tags:
        - Return
      summary: Delete an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to update on the return
          required: true
          schema:
            type: string
      requestBody:
        description: Package content to update on the return
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Return
      summary: Delete an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Get an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: Get an order package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/packages/{packageId}/label":
    get:
      tags:
        - Return
      summary: Get an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the return
          required: true
          schema:
            type: string
        - name: returnAsBase64Png
          in: query
          description: Return as base64 png
          schema:
            type: boolean
      responses:
        "200":
          description: Success
      description: Get an order package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/shipments":
    post:
      tags:
        - Return
      summary: Creates a shipment by grouping together multiple packages into logical
        shipments
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the order which is ready to be shipped.
          required: true
          schema:
            type: string
      requestBody:
        description: Package ids to use in creating shipments.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/shipments/{shipmentId}":
    delete:
      tags:
        - Return
      summary: Deletes an existing return shipment
      parameters:
        - name: returnId
          in: path
          description: ID of the return
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: Shipment ID of the return.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes an existing return shipment
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Allows a shipment to be retrieved for the order
      parameters:
        - name: returnId
          in: path
          description: ID of the return
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: Shipment ID of the return.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/wishlists:
    get:
      tags:
        - Wishlist
      summary: Retrieves a list of wishlists according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: Text to perform a search on
          schema:
            type: string
        - name: qLimit
          in: query
          description: Limit of the records to include in a search, used for global search
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Wishlist
      summary: Create wishlist
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Create wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}":
    get:
      tags:
        - Wishlist
      summary: Retrieves the details of a wishlist specified by the wishlist ID
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Wishlist
      summary: Update Wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Update Wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Wishlist
      summary: Deletes a wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes a wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}":
    get:
      tags:
        - Wishlist
      summary: Retrieves wishlist by name
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: wishlistName
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Retrieves wishlist by name
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}/items":
    get:
      tags:
        - Wishlist
      summary: Returns a listing of wishlists
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
      description: Returns a listing of wishlists
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Wishlist
      summary: Clears all items in the wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Clears all items in the wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Wishlist
      summary: Adds an item to the wishlist of the current shopper
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WishlistItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}/items":
    get:
      tags:
        - Wishlist
      summary: Returns a listing of wishlists
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: wishlistName
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
      description: Returns a listing of wishlists
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}":
    get:
      tags:
        - Wishlist
      summary: Retrieves an individual wishlist item from a wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: Retrieves an individual wishlist item from a wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Wishlist
      summary: Update wishlist item
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WishlistItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: Update wishlist item
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Wishlist
      summary: Delete / remove wishlist item
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete / remove wishlist item
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}/{quantity}":
    put:
      tags:
        - Wishlist
      summary: Updates the quantity of an item in the wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: Updates the quantity of an item in the wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accountattributedefinition/attributes:
    get:
      tags:
        - AccountAttributeDefinition
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - AccountAttributeDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accountattributedefinition/attributes/{attributeFQN}/VocabularyValues":
    get:
      tags:
        - AccountAttributeDefinition
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accountattributedefinition/attributes/{attributeFQN}":
    get:
      tags:
        - AccountAttributeDefinition
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - AccountAttributeDefinition
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/addressvalidation:
    post:
      tags:
        - AddressValidation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressValidationRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressValidationResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/AddressValidationResponse"
            text/plain:
              schema:
                $ref: "#/components/schemas/AddressValidationResponse"
      security:
        - bearerAuth: []
          clientOauth2: []
  /addressvalidationcapability:
    post:
      tags:
        - AddressValidationCapability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAddress"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAddress"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAddress"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAddress"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/authtickets:
    post:
      tags:
        - StorefrontAuthTicket
      summary: Authenticates a user for a particular site given a set of user
        credentials
      requestBody:
        description: User's email address and password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerUserAuthInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/authtickets/refresh:
    put:
      tags:
        - StorefrontAuthTicket
      summary: Refreshes a user's authentication
      parameters:
        - name: refreshToken
          in: query
          description: The user's refresh token.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/authtickets/anonymousshopper:
    get:
      tags:
        - StorefrontAuthTicket
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/attributes":
    get:
      tags:
        - B2BAccount
      summary: Retrieves a list of notes added to an account according to any
        specified filter criteria and sort options
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose notes you want to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            default: ""
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttributeCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - B2BAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}":
    get:
      tags:
        - B2BAccount
      summary: Retrieves the contents of a particular attribute attached to a
        specified account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the b2b account that contains the attribute to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: Fully qualified name of the attribute that you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - B2BAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - B2BAccount
      summary: Modifies an existing attribute for a b2b account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account whose attribute you want to modify.
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The new content to replace the existing attribute.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/b2baccounts:
    get:
      tags:
        - B2BAccount
      summary: Retrieves a list of B2B accounts according to any filter criteria and
        sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.\r

            \            For example, applications can filter on
            UserId to get the single record of the current customer."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: fields
          in: query
          schema:
            type: string
        - name: q
          in: query
          description: a quick filter which will search a predefined set of fields for a
            match
          schema:
            type: string
        - name: qLimit
          in: query
          schema:
            type: integer
            format: int32
        - name: responseGroups
          in: query
          description: "Used to refine the default information returned from a request. To
            reduce amount of customer account information returned, use the
            valid response groups: Contacts, CustomerAccountNotes, and
            OrderSummary. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BAccountCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BAccountCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BAccountCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - B2BAccount
      summary: Creates a new B2B account
      requestBody:
        description: Properties of the new B2B account to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/B2BAccount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}":
    get:
      tags:
        - B2BAccount
      summary: Retrieves the details of a B2B account specified by its unique identifier
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the B2B account whose details you want to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - B2BAccount
      summary: Modifies an existing B2B account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the B2B account.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Properties of the B2B account to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/B2BAccount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BAccount"
      description: Modifies an existing B2B account
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/user":
    post:
      tags:
        - B2BAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/B2BUserAndAuthInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BUser"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BUser"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BUser"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/users":
    get:
      tags:
        - B2BAccount
      summary: Retrieves a list of user for a B2B account according to any filter
        criteria and sort options
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.\r

            \            For example, applications can filter on
            UserId to get the single record of the current customer."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: a quick filter which will search a predefined set of fields for a
            match
          schema:
            type: string
        - name: qLimit
          in: query
          description: limit on quick filter which will search a predefined set of fields
            for a match
          schema:
            type: integer
            format: int32
        - name: responseGroups
          in: query
          description: "Used to refine the default information returned from a request. To
            reduce amount of customer account information returned, use the
            valid response groups: Contacts, CustomerAccountNotes, and
            OrderSummary. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BUserCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BUserCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BUserCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/user/{userId}":
    put:
      tags:
        - B2BAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/B2BUser"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/B2BUser"
            text/json:
              schema:
                $ref: "#/components/schemas/B2BUser"
            text/plain:
              schema:
                $ref: "#/components/schemas/B2BUser"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/user/{userId}/remove":
    put:
      tags:
        - B2BAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles":
    get:
      tags:
        - B2BAccount
      summary: Retrieves all the roles for a specified user of a b2b account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerUserRoleCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerUserRoleCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerUserRoleCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}":
    post:
      tags:
        - B2BAccount
      summary: Adds a role to the specified User
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: Unique identifier of the user who receives the role.
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: Unique identifier of the role to add.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - B2BAccount
      summary: Removes a role from the specified user
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: Unique identifier of the user with the role to delete.
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: Unique identifer of the role to delete.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/credits/{code}/auditentries":
    get:
      tags:
        - Credit
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditAuditEntryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CreditAuditEntryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CreditAuditEntryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/credits:
    get:
      tags:
        - Credit
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CreditCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CreditCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Credit
      summary: Creates a new customer account
      parameters:
        - name: userId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credit"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Credit"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/credits/{code}":
    get:
      tags:
        - Credit
      summary: Get credit
      parameters:
        - name: code
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Credit"
      description: Get credit
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Credit
      summary: Modifies an existing credit item
      parameters:
        - name: code
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credit"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Credit"
      description: Modifies an existing credit item
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Credit
      summary: Delete credit
      parameters:
        - name: code
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete credit
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/credits/{code}/associate-to-shopper":
    put:
      tags:
        - Credit
      summary: Allows a shopper to associate a credit to themselves
      parameters:
        - name: code
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/json:
              schema:
                $ref: "#/components/schemas/Credit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Credit"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/credits/{code}/Resend-Email":
    put:
      tags:
        - Credit
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/credits/{code}/transactions":
    get:
      tags:
        - Credit
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditTransactionCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CreditTransactionCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CreditTransactionCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Credit
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditTransaction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditTransaction"
            text/json:
              schema:
                $ref: "#/components/schemas/CreditTransaction"
            text/plain:
              schema:
                $ref: "#/components/schemas/CreditTransaction"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/attributes":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves a list of notes added to an account according to any
        specified filter criteria and sort options
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose notes you want to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            default: ""
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
            default: ""
        - name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttributeCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves the contents of a particular attribute attached to a
        specified account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account that contains the attribute to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          description: Fully qualified name of the attribute that you want to retrieve.
          required: true
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CustomerAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Modifies an existing attribute for an account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account whose attribute you want to modify.
          required: true
          schema:
            type: integer
            format: int32
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      requestBody:
        description: The new content to replace the existing attribute.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/cards":
    get:
      tags:
        - CustomerAccount
      summary: "Retrieves a list of cards for the specified customer account "
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CardCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CardCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      summary: Creates a card on the specific customer account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Card"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
            text/json:
              schema:
                $ref: "#/components/schemas/Card"
            text/plain:
              schema:
                $ref: "#/components/schemas/Card"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/cards/{cardId}":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves a card for the specified customer account and card ID
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
            text/json:
              schema:
                $ref: "#/components/schemas/Card"
            text/plain:
              schema:
                $ref: "#/components/schemas/Card"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Updates a card on the specific customer account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Card"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
            text/json:
              schema:
                $ref: "#/components/schemas/Card"
            text/plain:
              schema:
                $ref: "#/components/schemas/Card"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CustomerAccount
      summary: Removes a card from the specified customer account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/contacts":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves a list of contacts for a customer according to any specified
        filter criteria and sort options
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose CustomerContact
            information you want to retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: userId
          in: query
          description: If provided, the primary markings on the contacts will be based on
            the user's preferred primary overrides
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerContactCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerContactCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerContactCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      summary: Creates a new CustomerContact for a customer account, for example, a
        new shipping address
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account to contain the new
            CustomerContact.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: "Properties of the new CustomerContact. Required properties:
          CustomerContact.Email, ContactType."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerContact"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerContact"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Creates a new CustomerContacts for a customer account in bulk to
        support adding multiple contacts in a multi-ship scenario
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account to contain the new
            CustomerContact.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: "List of CustomerContact objects : Properties of each new
          CustomerContact. Required properties: CustomerContact.Email,
          ContactType."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CustomerContact"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerContactCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerContactCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerContactCollection"
      description: Creates a new CustomerContacts for a customer account in bulk to
        support adding multiple contacts in a multi-ship scenario
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/contacts/{contactId}":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves the specified CustomerContact for a customer account, for
        example, a billing or shipping CustomerContact
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose CustomerContact
            information you want to retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: contactId
          in: path
          description: Unique identifier of the CustomerContact whose details you want to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          description: If provided, the primary markings on the contact will be based on
            the user's preferred primary overrides
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerContact"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Updates a CustomerContact for a specified customer account, for example
        to update addresses or change which CustomerContact is the primary
        CustomerContact for billing
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose CustomerContact
            information you want to update.
          required: true
          schema:
            type: integer
            format: int32
        - name: contactId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          description: If provided, the primary markings on the contact will be stored as
            the user's preferred primary override
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerContact"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerContact"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CustomerAccount
      summary: Deletes a CustomerContact for the specified customer account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose CustomerContact you
            want to delete.
          required: true
          schema:
            type: integer
            format: int32
        - name: contactId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts:
    get:
      tags:
        - CustomerAccount
      summary: Retrieves a list of customer accounts according to any filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.\r

            \            \r

            \            For example, applications can filter on
            UserId to get the single record of the current customer."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: We added this test to demo new publishing @test@. Used to page
            results from a query. Indicates the maximum number of entities to
            return from a query. The default value is 20 and the maximum value
            is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: fields
          in: query
          schema:
            type: string
        - name: q
          in: query
          description: a quick filter which will search a predefined set of fields for a
            match
          schema:
            type: string
        - name: qLimit
          in: query
          schema:
            type: integer
            format: int32
        - name: isAnonymous
          in: query
          schema:
            type: boolean
        - name: responseGroups
          in: query
          description: "Used to refine the default information returned from a request. To
            reduce amount of customer account information returned, use the
            valid response groups: Contacts, CustomerAccountNotes, and
            OrderSummary. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccountCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAccountCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAccountCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      summary: Creates a new customer account
      requestBody:
        description: Properties of the new customer account to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAccount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves the details of a customer account specified by its unique
        identifier
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose details you want to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Modifies an existing customer account, for example, to change the
        primary billing contact or change whether to accept marketing material
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Properties of the customer account to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAccount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CustomerAccount
      summary: Deletes a customer account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account to delete.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: A customer account cannot be deleted if any orders exist, past or
        present.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/transactions":
    get:
      tags:
        - CustomerAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
            text/json:
              schema:
                $ref: "#/components/schemas/Transaction"
            text/plain:
              schema:
                $ref: "#/components/schemas/Transaction"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/transactions/{transactionId}":
    delete:
      tags:
        - CustomerAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/recomputelifetimevalue":
    post:
      tags:
        - CustomerAccount
      summary: Triggers event to recompute customer lifetime value
      parameters:
        - name: accountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: " The lifetime value may not immediately be recalculated, but
        enters a queue."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/notes":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves a list of notes added to a customer account according to any
        specified filter criteria and sort options
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose notes you want to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            default: ""
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNoteCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerNoteCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerNoteCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      summary: Adds a new note to the specified customer account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account for which to create the
            note.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Contents of the new note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNote"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/notes/{noteId}":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves the contents of a particular note attached to a specified
        customer account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account that contains the note to
            retrieve.
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: Unique identifier of a particular note that you want to retrieve.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNote"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Modifies an existing note for a customer account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account whose note you want to
            modify.
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: Unique identifier of the note to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The new content to replace the existing note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNote"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CustomerAccount
      summary: Removes a note from the specified customer account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account that contains the note
            you want to delete.
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: Unique identifier of the note to delete.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/segments":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves a list of segments for the specified account according to any
        specified filter criteria and sort options
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account for which you want the list of
            groups.
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: "The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order. \r

            \            Optional."
          schema:
            type: string
            default: ""
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSegmentCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerSegmentCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerSegmentCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/AuditLog/Entries":
    get:
      tags:
        - CustomerAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAuditEntryCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAuditEntryCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAuditEntryCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/purchaseOrderAccount":
    get:
      tags:
        - CustomerAccount
      summary: Gets a customer's purchase order account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAccount
      summary: Creates a customer's purchase order account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAccount
      summary: Updates a customer's purchase order account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/internal/{accountId}/purchaseOrderAccount":
    delete:
      tags:
        - CustomerAccount
      summary: Updates a customer's purchase order account
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction":
    post:
      tags:
        - CustomerAccount
      summary: Creates a purchase order transaction log (for public api use)
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the customer account.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: transaction log that needs to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurchaseOrderTransaction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderTransaction"
            text/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderTransaction"
            text/plain:
              schema:
                $ref: "#/components/schemas/PurchaseOrderTransaction"
      description: Creates a purchase order transaction log (for public api use)
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - CustomerAccount
      summary: Gets a collection of Purchase order transaction logs associated with a
        customer account id
      parameters:
        - name: accountId
          in: path
          description: Customer Account Id for which transaction logs need to be retreived
          required: true
          schema:
            type: integer
            format: int32
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: "Used to page results from a query. \r

            \            Indicates the maximum number of entities to
            return from a query. The default value is 20 and the maximum value
            is 200. Optional."
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            default: ""
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderTransactionCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderTransactionCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PurchaseOrderTransactionCollection"
      description: Gets a collection of Purchase order transaction logs associated
        with a customer account id
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/purchaseOrderAccounts:
    post:
      tags:
        - CustomerAccount
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            default: ""
        - name: accountType
          in: query
          schema:
            type: string
            default: B2C
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccountCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccountCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerPurchaseOrderAccountCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/loginstatebyusername:
    post:
      tags:
        - CustomerAccount
      summary: Retrieves the log-in status details of a shopper specified by userName
      parameters:
        - name: userName
          in: query
          description: Unique userName of the customer whose details you want to view.
          schema:
            type: string
        - name: customerSetCode
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginState"
            text/json:
              schema:
                $ref: "#/components/schemas/LoginState"
            text/plain:
              schema:
                $ref: "#/components/schemas/LoginState"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/loginstatebyemailaddress:
    post:
      tags:
        - CustomerAccount
      summary: Retrieves the log-in status details of a shopper specified by emailAdress
      parameters:
        - name: emailAddress
          in: query
          schema:
            type: string
        - name: customerSetCode
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginState"
            text/json:
              schema:
                $ref: "#/components/schemas/LoginState"
            text/plain:
              schema:
                $ref: "#/components/schemas/LoginState"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/loginstate":
    get:
      tags:
        - CustomerAccount
      summary: Retrieves the log-in status details of a shopper specified by emailAdress
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          description: EmailAddress of the customer whose details you want to view.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginState"
            text/json:
              schema:
                $ref: "#/components/schemas/LoginState"
            text/plain:
              schema:
                $ref: "#/components/schemas/LoginState"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/Change-Password":
    post:
      tags:
        - CustomerAccount
      summary: Changes a shopper's password
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the shopper for whom to change the password.
          required: true
          schema:
            type: integer
            format: int32
        - name: unlockAccount
          in: query
          description: inidicates that the account should be unlocked on a successful
            password change.
          schema:
            type: boolean
            default: false
        - name: userId
          in: query
          schema:
            type: string
      requestBody:
        description: Old password and new password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerPasswordInfo"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/Change-Passwords:
    post:
      tags:
        - CustomerAccount
      summary: Changes a collection of shopper passwords
      requestBody:
        description: The collection of AccountPasswordInfo which are to be processed
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountPasswordInfoCollection"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResultCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResultCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChangePasswordResultCollection"
      description: Changes a collection of shopper passwords
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/Reset-Password:
    post:
      tags:
        - CustomerAccount
      summary: Resets the password for a shopper specified by username or emailAddress
      requestBody:
        description: Username or EmailAddress of the shopper who has requested a
          password reset.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerResetPasswordInfo"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/Create-Login":
    post:
      tags:
        - CustomerAccount
      summary: Creates a login for an existing customer and logs them in automatically
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerLoginInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/Add-Account-And-Login:
    post:
      tags:
        - CustomerAccount
      summary: Creates a new customer account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAccountAndAuthInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAuthTicket"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/Set-Login-Locked":
    post:
      tags:
        - CustomerAccount
      summary: Sets a flag indicating whether the customers login is locked or unlocked
      parameters:
        - name: accountId
          in: path
          description: The customer account id to operate on.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          schema:
            type: string
      requestBody:
        description: True for locking the login. False for unlocking the login (default).
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/accounts/{accountId}/Set-Password-Change-Required":
    post:
      tags:
        - CustomerAccount
      summary: Sets a flag indicating whether the customers must change their password
        before logging in again
      parameters:
        - name: accountId
          in: path
          description: The customer account id to operate on.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/accounts/Bulk:
    post:
      tags:
        - CustomerAccount
      summary: Creates multiple new shopper accounts for a specified site
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CustomerAccountAndAuthInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAccountCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerAccountCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerAccountCollection"
      description: Allows you to create a number of new shopper accounts at one time.
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/attributedefinition/attributes:
    get:
      tags:
        - CustomerAttributeDefinition
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerAttributeDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/attributedefinition/attributes/{attributeFQN}/VocabularyValues":
    get:
      tags:
        - CustomerAttributeDefinition
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/attributedefinition/attributes/{attributeFQN}":
    get:
      tags:
        - CustomerAttributeDefinition
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerAttributeDefinition
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/segments:
    get:
      tags:
        - CustomerSegment
      summary: Retrieves a list of all segments defined for the site according to any
        specified filter criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: "Used to page results from a query. \r

            \            Indicates the maximum number of entities to
            return from a query. The default value is 20 and the maximum value
            is 200. Optional."
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            default: ""
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, gt = greater than or equals, lt = less than or equals, sw
            = starts with, or cont = contains. Optional."
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSegmentCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerSegmentCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerSegmentCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - CustomerSegment
      summary: Creates a new segment
      requestBody:
        description: Name of the customer segment to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCustomerSegment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
      description: "Merchants create segments of customers, for example, \r

        to offer discounts to particular groups or assign VIP status to
        a set of customers."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/segments/{id}":
    get:
      tags:
        - CustomerSegment
      summary: Retrieves the name of a customer group specified the customer group ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - CustomerSegment
      summary: Update the code, name, or description of an existing segment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCustomerSegment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerCustomerSegment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - CustomerSegment
      summary: Deletes a segement specified by its unique code
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: Note that the group is deleted in all accounts that contain this segment.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/segments/{id}/accounts":
    post:
      tags:
        - CustomerSegment
      summary: Adds segments to an account
      parameters:
        - name: id
          in: path
          description: Unique identifer of the segment.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Unique identifiers of the accounts.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/segments/{id}/accounts/{accountId}":
    delete:
      tags:
        - CustomerSegment
      summary: Removes single account from a segment
      parameters:
        - name: id
          in: path
          description: Unique identifer of the segment.
          required: true
          schema:
            type: integer
            format: int32
        - name: accountId
          in: path
          description: Unique identifiers of the account.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/customerSets:
    get:
      tags:
        - CustomerSet
      summary: Retrieves a list of all customerSets defined for the site according to
        any specified filter criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: "Used to page results from a query. \r

            \            Indicates the maximum number of entities to
            return from a query. The default value is 20 and the maximum value
            is 200. Optional."
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            default: ""
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSetCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerSetCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerSetCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/customerSets/{code}":
    get:
      tags:
        - CustomerSet
      summary: Retrieves the name of a customer group specified the customer group ID
      parameters:
        - name: code
          in: path
          description: Unique identifier of a customer group.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSet"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomerSet"
            text/plain:
              schema:
                $ref: "#/components/schemas/CustomerSet"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/customer/visits:
    post:
      tags:
        - CustomerVisit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Visit"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visit"
            text/json:
              schema:
                $ref: "#/components/schemas/Visit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Visit"
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - CustomerVisit
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VisitCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/VisitCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/VisitCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/customer/visits/{visitId}":
    put:
      tags:
        - CustomerVisit
      parameters:
        - name: visitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Visit"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visit"
            text/json:
              schema:
                $ref: "#/components/schemas/Visit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Visit"
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - CustomerVisit
      parameters:
        - name: visitId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visit"
            text/json:
              schema:
                $ref: "#/components/schemas/Visit"
            text/plain:
              schema:
                $ref: "#/components/schemas/Visit"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/instocknotifications:
    get:
      tags:
        - InStockNotificationSubscription
      summary: Retrieves a list of inventory back in stock notification subscriptions
        according to any filter criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscriptionCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscriptionCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscriptionCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - InStockNotificationSubscription
      summary: Creates a new notification subscription
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InStockNotificationSubscription"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscription"
            text/json:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscription"
            text/plain:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscription"
      description: Creates a new notification subscription
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/instocknotifications/{id}":
    get:
      tags:
        - InStockNotificationSubscription
      summary: Retrieves the details of an inventory back in stock notification
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscription"
            text/json:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscription"
            text/plain:
              schema:
                $ref: "#/components/schemas/InStockNotificationSubscription"
      description: Retrieves the details of an inventory back in stock notification
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - InStockNotificationSubscription
      summary: Deletes an in stock notification subscription
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
      description: Deletes an in stock notification subscription
      security:
        - bearerAuth: []
          clientOauth2: []
tags:
  - name: Cart
    x-displayName: Cart
  - name: Channel
    x-displayName: Channel
  - name: ChannelGroup
    x-displayName: ChannelGroup
  - name: Checkout
    x-displayName: Checkout
  - name: Order
    x-displayName: Order
  - name: OrderAttribute
    x-displayName: OrderAttribute
  - name: OrderValidationCapability
    x-displayName: OrderValidationCapability
  - name: Quote
    x-displayName: Quote
  - name: Return
    x-displayName: Return
  - name: Wishlist
    x-displayName: Wishlist
  - name: AccountAttributeDefinition
    x-displayName: AccountAttributeDefinition
  - name: AddressValidation
    x-displayName: AddressValidation
  - name: AddressValidationCapability
    x-displayName: AddressValidationCapability
  - name: StorefrontAuthTicket
    x-displayName: StorefrontAuthTicket
  - name: B2BAccount
    x-displayName: B2BAccount
  - name: Credit
    x-displayName: Credit
  - name: CustomerAccount
    x-displayName: CustomerAccount
  - name: CustomerAttributeDefinition
    x-displayName: CustomerAttributeDefinition
  - name: CustomerSegment
    x-displayName: CustomerSegment
  - name: CustomerSet
    x-displayName: CustomerSet
  - name: CustomerVisit
    x-displayName: CustomerVisit
  - name: InStockNotificationSubscription
    x-displayName: InStockNotificationSubscription
x-tagGroups:
  - name: commerceruntime
    tags:
      - Cart
      - Channel
      - ChannelGroup
      - Checkout
      - Order
      - OrderAttribute
      - OrderValidationCapability
      - Quote
      - Return
      - Wishlist
  - name: customer
    tags:
      - AccountAttributeDefinition
      - AddressValidation
      - AddressValidationCapability
      - StorefrontAuthTicket
      - B2BAccount
      - Credit
      - CustomerAccount
      - CustomerAttributeDefinition
      - CustomerSegment
      - CustomerSet
      - CustomerVisit
      - InStockNotificationSubscription
components:
  schemas:
    CartSummary:
      type: object
      properties:
        itemCount:
          type: integer
          description: Number of items in the active cart.
          format: int32
          nullable: true
        totalQuantity:
          type: integer
          description: Total quantity of all items in the cart
          format: int32
          nullable: true
        total:
          type: number
          description: Total cost of items in the active cart.
          format: double
          nullable: true
        isExpired:
          type: boolean
          description: "If true, the cart has reached its expiration date
            (Cart.ExpirationDate) and considered abandoned. \r

            Carts of anonymous shoppers expire after 14 days of
            inactivity."
          nullable: true
        hasActiveCart:
          type: boolean
          description: If true, the cart is active. A shopper has added an item to a cart.
          nullable: true
      additionalProperties: false
      description: Cart summary, which is the number of items in the active cart,
        total cost of items in the cart, and whether the cart has expired.
    CommerceRuntimePhone:
      type: object
      properties:
        home:
          type: string
          nullable: true
        mobile:
          type: string
          nullable: true
        work:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeAddress:
      type: object
      properties:
        address1:
          type: string
          nullable: true
        address2:
          type: string
          nullable: true
        address3:
          type: string
          nullable: true
        address4:
          type: string
          nullable: true
        cityOrTown:
          type: string
          nullable: true
        stateOrProvince:
          type: string
          nullable: true
        postalOrZipCode:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        addressType:
          type: string
          nullable: true
        isValidated:
          type: boolean
          nullable: true
      additionalProperties: false
    CommerceRuntimeContact:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        email:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        middleNameOrInitial:
          type: string
          nullable: true
        lastNameOrSurname:
          type: string
          nullable: true
        companyOrOrganization:
          type: string
          nullable: true
        phoneNumbers:
          $ref: "#/components/schemas/CommerceRuntimePhone"
        address:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
    AdminUserAuditInfo:
      type: object
      properties:
        updateDate:
          type: string
          format: date-time
          nullable: true
        createDate:
          type: string
          format: date-time
          nullable: true
        updateBy:
          type: string
          nullable: true
        createBy:
          type: string
          nullable: true
      additionalProperties: false
    FulfillmentInfo:
      type: object
      properties:
        fulfillmentContact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        isDestinationCommercial:
          type: boolean
          description: Indicates that the destination is commercial
          nullable: true
        shippingMethodCode:
          type: string
          description: "Code that uniquely identifies the shipping method such as
            \"Ground,\" \"Overnight,\" or \"Digital.\"\r

            The site's shipping settings lists the valid shipping
            methods specified for this site."
          nullable: true
        shippingMethodName:
          type: string
          description: Readable name of the shipping method
          nullable: true
        data:
          type: object
          description: Custom data originated by the shipping service.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Shipment information, which includes the shipping address, price,
        estimated delivery date, tracking information, method (for example,
        Ground, Overnight, or Pick-up), \r

        carrier (for example, USPS, UPS, FedEx), and current status (for
        example, Not Shipped, In Transit, Delayed, or Returned To Sender)."
    CommerceRuntimeDiscount:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the discount.
          format: int32
        name:
          type: string
          description: Name of the discount in the language specified by LocaleCode.
          nullable: true
        itemIds:
          type: array
          items:
            type: string
          description: List of discounts for each order item.
          nullable: true
        expirationDate:
          type: string
          description: Date when the discount expires. Default is null (no expiration date).
          format: date-time
          nullable: true
        hasMultipleTargetProducts:
          type: boolean
          description: "Indicates that the discount targets more than a product.  Used\r

            primarily for BoGa discounts with multiple targets."
      additionalProperties: false
      description: "Discounts that apply to the order, if any. For example, when the
        \r

        subtotal of the order exceeds a certain amount, or for free
        shipping."
    CommerceRuntimeAppliedDiscount:
      type: object
      properties:
        impact:
          type: number
          description: Value of the discount applied. This is a negative number to be
            subtracted from the original price to get the final price.
          format: double
          nullable: true
        discount:
          $ref: "#/components/schemas/CommerceRuntimeDiscount"
        couponCode:
          type: string
          description: Code of the coupon associated with the discount if a coupon code is
            required to get the discount.
          nullable: true
        excluded:
          type: boolean
          description: Determines whether or not this discount is set up to be ignored by
            the pricing runtime.
          nullable: true
      additionalProperties: false
      description: "Discount applied to the order, which is a negative number to be
        subtracted from the original price to get the final price. \r

        If multiple discounts for the order exist, this is the value
        most advantageous to the shopper."
    SuggestedDiscount:
      type: object
      properties:
        productCode:
          type: string
          nullable: true
        autoAdd:
          type: boolean
        discountId:
          type: integer
          format: int32
        hasMultipleProducts:
          type: boolean
        hasOptions:
          type: boolean
      additionalProperties: false
    CommerceRuntimeChangeMessage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the  message. System-supplied. Read-only.
          nullable: true
        correlationId:
          type: string
          description: Correlation Id
          nullable: true
        userId:
          type: string
          description: User Id that identifies the user that performed the related change
          nullable: true
        userFirstName:
          type: string
          description: User First Name
          nullable: true
        userLastName:
          type: string
          description: User Last Name
          nullable: true
        userScopeType:
          type: string
          description: User Type (e.g. Shopper, Admin, etc.)
          nullable: true
        appId:
          type: string
          description: App Id that identifies the user that performed the related change
          nullable: true
        appKey:
          type: string
          description: App Key
          nullable: true
        appName:
          type: string
          description: App Name
          nullable: true
        subjectType:
          type: string
          description: Subject of the message, for example, "Product." System-supplied.
            Read-only.
          nullable: true
        success:
          type: boolean
          description: Indicates if the message is related to a success or failure.
          nullable: true
        identifier:
          type: string
          description: Unique identifier to what the message pertains, which can be a cart
            item, cart or another generic entity. System-supplied. Read-only.
          nullable: true
        subject:
          type: string
          description: Text on the subject line of the message, for example, the product
            name. System-supplied. Read-only.
          nullable: true
        verb:
          type: string
          description: "Action applicable to the message. This can be \"Increased,\" when
            the product price has increased, \"Decreased,\" when the \r

            product price has decreased, and \"Invalidated,\" when
            the product is no longer available. System-supplied. Read-only."
          nullable: true
        message:
          type: string
          description: Human readable message. System-supplied. Read-only.
          nullable: true
        metadata:
          description: Data. This property will be a JSON array that will contain 0-N
            items, when there is 1 item it will still be an array containing
            only one item. System-supplied. Read-only.
          nullable: true
        oldValue:
          type: string
          description: Original price of the item. System-supplied. Read-only.
          nullable: true
          deprecated: true
        newValue:
          type: string
          description: Current price of the item. System-supplied. Read-only.
          nullable: true
          deprecated: true
        amount:
          type: number
          description: Monetary amount that pertains to the change if applicable
          format: double
          nullable: true
          deprecated: true
        createDate:
          type: string
          description: When the message was created. System-supplied. Read-only.
          format: date-time
          nullable: true
      additionalProperties: false
      description: A message displayed by the system based on the last  action, for
        example, when a product price has changed. System-supplied and
        read-only.
    ExtendedProperty:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeThresholdMessage:
      type: object
      properties:
        discountId:
          type: integer
          format: int32
        message:
          type: string
          nullable: true
        thresholdValue:
          type: number
          format: double
        showOnCheckout:
          type: boolean
        showInCart:
          type: boolean
        requiresCouponCode:
          type: boolean
      additionalProperties: false
    CommerceAggregate:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the shopper who created the cart.
          nullable: true
        id:
          type: string
          description: Unique identifier of the CommerceAggregate object (e.g. order,
            cart, wishlist, etc.).
          nullable: true
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        currencyCode:
          type: string
          description: ISO Currency Code. Currently, only USD is supported.
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        fulfillmentInfo:
          $ref: "#/components/schemas/FulfillmentInfo"
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          description: The discount that has been applied to the cart itself. If multiple
            discounts exist, this is the discount that the system applies
            because it offers the best savings for the shopper. This is a
            negative number.
          nullable: true
        suggestedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/SuggestedDiscount"
          nullable: true
        rejectedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/SuggestedDiscount"
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        subtotal:
          type: number
          description: Combined price for all cart items, including all selected options
            but excluding any discounts.
          format: double
          nullable: true
        discountedSubtotal:
          type: number
          description: Combined price for all cart items, including all selected options
            as well as any discounts.
          format: double
          nullable: true
        discountTotal:
          type: number
          description: Amount of the discounts applied to all items in the cart. This is a
            negative number.  This also includes the order level discounts.
          format: double
          nullable: true
        discountedTotal:
          type: number
          description: Subtotal minus the discounted total
          format: double
          nullable: true
        shippingTotal:
          type: number
          description: Shipping does not appear on cart.
          format: double
          nullable: true
        shippingSubTotal:
          type: number
          description: Shipping total without discounts applied.
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          description: Not implemented. Tax does not appear on cart.
          format: double
          nullable: true
        handlingTaxTotal:
          type: number
          description: Total tax on handling
          format: double
          nullable: true
        itemTaxTotal:
          type: number
          description: Not implemented. Tax does not appear on cart.
          format: double
          nullable: true
        taxTotal:
          type: number
          description: Tax does not appear on cart.
          format: double
          nullable: true
        feeTotal:
          type: number
          description: Not implemented. Total cost of fees for all items in the cart.
          format: double
          nullable: true
        total:
          type: number
          description: Final total amount of the order including all discounts, shipping,
            and tax.
          format: double
          nullable: true
        lineItemSubtotalWithOrderAdjustments:
          type: number
          description: Line Item Subtotals with Order Adjustments
          format: double
          nullable: true
        shippingAmountBeforeDiscountsAndAdjustments:
          type: number
          description: Shipping Amount before discount and adjustements
          format: double
          nullable: true
        lastValidationDate:
          type: string
          description: "Occasionally the commerce runtime may validate that item/product
            names, descriptions, and prices have not changed. \r

            If changed, it updates LastValidationDate."
          format: date-time
          nullable: true
        expirationDate:
          type: string
          description: "When the order will no longer be active. That is, the order is
            considered abandoned. \r

            Orders of anonymous shoppers expire after 14 days of
            inactivity. \r

            An order never expires for shoppers who are logged into
            their account. \r

            Date in UTC Date/Time."
          format: date-time
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: List of messages displayed by the system based on the last cart
            action, for example, when a product price has changed or is
            out-of-stock. System-supplied and read-only.
          nullable: true
        extendedProperties:
          type: array
          items:
            $ref: "#/components/schemas/ExtendedProperty"
          description: Extra properties (key-value pairs) that extend the primary object.
            Think of this as a property bag of string keys and string values.
          nullable: true
        discountThresholdMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeThresholdMessage"
          description: List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage
            objects that are valid for the current value of the cart/order.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Base class for cart and order
    ProductStock:
      type: object
      properties:
        manageStock:
          type: boolean
        isOnBackOrder:
          type: boolean
        availableDate:
          type: string
          format: date-time
          nullable: true
        stockAvailable:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CommerceRuntimeMeasurement:
      type: object
      properties:
        unit:
          type: string
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    CommerceRuntimePackageMeasurements:
      type: object
      properties:
        height:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        width:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        length:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        weight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
      additionalProperties: false
      description: Physical dimensions of the package required to ship the product and
        its weight.
    ProductBase:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code that uniquely identifies the product.
          nullable: true
        name:
          type: string
          description: Name of the product, this is the current value of the product's
            name in the language specified by LocaleCode.
          nullable: true
        description:
          type: string
          description: Short description of the product in the language specified by
            LocaleCode.
          nullable: true
        goodsType:
          type: string
          description: Goods Type
          nullable: true
        isPackagedStandAlone:
          type: boolean
          description: Indicates that this product ships by itself.
        stock:
          $ref: "#/components/schemas/ProductStock"
        productReservationId:
          type: integer
          description: Reservation ID associated with this product in the bundle.
          format: int32
          nullable: true
        allocationId:
          type: integer
          description: Allocation ID associated with this product on this order.
          format: int32
          nullable: true
        allocationExpiration:
          type: string
          description: Allocation ID associated with this product on this order.
          format: date-time
          nullable: true
        measurements:
          $ref: "#/components/schemas/CommerceRuntimePackageMeasurements"
        fulfillmentStatus:
          type: string
          description: Fulfillment status of the product.
          nullable: true
      additionalProperties: false
    CommerceRuntimeProductOption:
      type: object
      properties:
        name:
          type: string
          description: Name of the product option that appears with the order item in the
            language specified by LocaleCode.
          nullable: true
        value:
          description: Value of the product option.
          nullable: true
        shopperEnteredValue:
          description: The value entered by the shopper if this is an option that requires
            shopper input, for example, a monogram.
          nullable: true
        attributeFQN:
          type: string
          description: Value of the product option.
          nullable: true
        dataType:
          type: string
          description: Value of the product option.
          nullable: true
        stringValue:
          type: string
          description: Value of the product option.
          nullable: true
      additionalProperties: false
      description: "Product option for the product listed on this order item. If the
        product contains \r

        configurable or stand-alone options, this is a product option
        that the shopper has selected."
    CommerceRuntimeProductPropertyValue:
      type: object
      properties:
        stringValue:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    CommerceRuntimeProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        isMultiValue:
          type: boolean
        values:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductPropertyValue"
          nullable: true
      additionalProperties: false
    CommerceRuntimeCategory:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the category. System-supplied and read-only.
          format: int32
          nullable: true
        parent:
          $ref: "#/components/schemas/CommerceRuntimeCategory"
      additionalProperties: false
      description: Categories to which the product belongs. Discounts can apply to
        categories where any product in the category is discounted.
    CommerceRuntimeProductPrice:
      type: object
      properties:
        price:
          type: number
          description: Price of the product. This is the price that the merchant intends
            to sell the product if no sale price is present.
          format: double
          nullable: true
        salePrice:
          type: number
          description: Current sale price of the product, which is a specific numerical
            amount (not a percentage off).
          format: double
          nullable: true
        tenantOverridePrice:
          type: number
          description: An override price applied on the product by the tenant.
          format: double
          nullable: true
        msrp:
          type: number
          description: MSRP of product.
          format: double
          nullable: true
        creditValue:
          type: number
          description: Credit Value when the product happens to be a gift card or similar
            product
          format: double
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the product
          nullable: true
        priceListEntryMode:
          type: string
          description: "Pricelist entry mode of the product.\r

            Note: possible values are below\r

            1. null : Product doesn't participate in pricelist\r

            2. Bulk : Bulk volume price available(unit price vary
            based on quantity)\r

            3. Simple:"
          nullable: true
      additionalProperties: false
      description: Price of the product with any sale and discounts applied.
    CommerceRuntimeBundledProduct:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductBase"
      properties:
        quantity:
          type: integer
          description: Quantity of the product included in the bundle.
          format: int32
        optionAttributeFQN:
          type: string
          description: Fully Qualified Name of the selected option's attribute
          nullable: true
        optionValue:
          description: Value of the selected option
          nullable: true
        creditValue:
          type: number
          description: Credit value.  Only populated if the bundled product is a gift card
            or digital credit
          format: double
          nullable: true
        deltaPrice:
          type: number
          description: Only populated for extras
          format: double
          nullable: true
      additionalProperties: false
      description: Describes products that are bundled inside of a main bundle product.
    CommerceRuntimeProduct:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductBase"
      properties:
        mfgPartNumber:
          type: string
          description: Manufacturing Part Number of the product.
          nullable: true
        upc:
          type: string
          description: Universal Product Code of the product.
          nullable: true
        sku:
          type: string
          description: Product Identifier specific to the store
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Types of fulfillment that are supported for this product.
          nullable: true
        imageAlternateText:
          type: string
          description: Descriptive text of the image associated with the product in the
            language specified by LocaleCode.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image that appears next to the product on the order
            item. Optional.
          nullable: true
        variationProductCode:
          type: string
          description: For configurable products, the unique identifier of the product
            variation that has been selected.
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductOption"
          description: If the product contains configurable or stand-alone options, the
            list of product options that the shopper selected for this product.
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductProperty"
          description: If the product contains properties, the list of properties that the
            shopper selected for this product.
          nullable: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeCategory"
          description: Categories to which this product belongs.
          nullable: true
        price:
          $ref: "#/components/schemas/CommerceRuntimeProductPrice"
        discountsRestricted:
          type: boolean
          description: Is the product discount restricted
          nullable: true
        discountsRestrictedStartDate:
          type: string
          description: Product discount restriction start date
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          description: Product discount restriction end date
          format: date-time
          nullable: true
        isRecurring:
          type: boolean
          description: If true, the product is purchased or fulfilled at regular
            intervals, for example, a monthly billing or a subscription.
          nullable: true
        isTaxable:
          type: boolean
          description: If true, the product is eligible for tax.
          nullable: true
        productType:
          type: string
          description: Type of product, which can be a product with configurable options,
            a product with stand-alone options, or a simple product with no
            options.
          nullable: true
        productUsage:
          type: string
          description: Usage of the product, primarily used to indicate a bundle in this
            context
          nullable: true
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeBundledProduct"
          description: Products bundled with this product (if the current product is a
            bundle)
          nullable: true
      additionalProperties: false
      description: The product as it appears on the order item.
    CommerceUnitPrice:
      type: object
      properties:
        extendedAmount:
          type: number
          description: "Extended amount, this is in order of precedence: OverrideAmount,
            SaleAmount, ListAmount"
          format: double
          nullable: true
        listAmount:
          type: number
          description: Product list amount.
          format: double
          nullable: true
        saleAmount:
          type: number
          description: Sale amount indicated on the product.
          format: double
          nullable: true
        overrideAmount:
          type: number
          description: Amount as manually overridden by the Merchant
          format: double
          nullable: true
      additionalProperties: false
      description: Pricing details for the product listed on a cart item, including
        the original price, discount amount, and final price.
    CommerceRuntimeAppliedProductDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      properties:
        productQuantity:
          type: integer
          description: Quantity of products priced. This is always one unless calculating
            pricing on the order or cart.
          format: int32
          nullable: true
          deprecated: true
        impactPerUnit:
          type: number
          description: Impact for a quantity of one product; that is, the value of the
            discount for one product.
          format: double
          nullable: true
          deprecated: true
        appliesToSalePrice:
          type: boolean
          description: Determines if the discount applies to the sale price of the order
          nullable: true
      additionalProperties: false
      description: Details of the discount applied to a product.
    CommerceRuntimeAppliedLineItemProductDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceRuntimeAppliedProductDiscount"
      properties:
        appliesToSalePrice:
          type: boolean
          description: Determines if the discount applies to the sale price of the order
          nullable: true
        discountQuantity:
          type: integer
          description: The number of the line item that can be used for this particular
            discount.
          format: int32
      additionalProperties: false
    ShippingDiscount:
      type: object
      properties:
        methodCode:
          type: string
          description: Unique identifier of the shipping method discount.
          nullable: true
        discount:
          $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      additionalProperties: false
      description: Value of the shipping discount.
    CommerceRuntimeAppliedLineItemShippingDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/ShippingDiscount"
      properties:
        methodCode:
          type: string
          description: Unique identifier of the shipping method discount.
          nullable: true
        discount:
          $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
        discountQuantity:
          type: integer
          description: The number of the line item that can be used for this particular
            discount.
          format: int32
        impactPerUnit:
          type: number
          description: The impact of this discount pur discount quantity.
          format: double
      additionalProperties: false
    CommerceItem:
      type: object
      properties:
        localeCode:
          type: string
          description: "Locale code for language that appears in text and descriptions on
            the site, for example, en_US. \r

            This is not the currency code. Currently only en_US is
            supported."
          nullable: true
        purchaseLocation:
          type: string
          description: "The location where the product is being purchased.. default is
            null. Products can have different prices\r

            by purchaseLocation via custom priceListResolution..."
          nullable: true
        lineId:
          type: integer
          description: "The line id assigned to the order item. Visible only in the Admin,
            this is set from the Admin or\r

            in CommerceRuntime when a cart is converted to an
            order."
          format: int32
          nullable: true
        product:
          $ref: "#/components/schemas/CommerceRuntimeProduct"
        quantity:
          type: integer
          description: Number of products ordered.
          format: int32
        isRecurring:
          type: boolean
          description: If true, the cart item lists a product that can be purchased or
            fulfilled at regular intervals, for example, monthly billing or a
            subscription.
          nullable: true
        isTaxable:
          type: boolean
          description: Not implemented. If true, the cart item is eligible for tax.
          nullable: true
        subtotal:
          type: number
          description: Line item subtotal (quantity multiplied by price) before discounts.
          format: double
          nullable: true
        extendedTotal:
          type: number
          description: Line item extended total (quantity multiplied by unit extended
            price) before discounts.
          format: double
          nullable: true
        taxableTotal:
          type: number
          description: Line item subtotal (quantity multiplied by price) before discounts.
          format: double
          nullable: true
        discountTotal:
          type: number
          description: How much the shopper saves with the applied discount or sale price.
            This is a negative number.
          format: double
          nullable: true
        discountedTotal:
          type: number
          description: Subtotal minus any discounts.
          format: double
          nullable: true
        itemTaxTotal:
          type: number
          description: Total price of taxes that apply to products in this item.
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          description: Total price of taxes that apply to the shipping of this item.
          format: double
          nullable: true
        shippingTotal:
          type: number
          description: Total price of shipping that apply to this item.
          format: double
          nullable: true
        handlingAmount:
          type: number
          description: Handling Amount for this item
          format: double
          nullable: true
        feeTotal:
          type: number
          description: Not implemented. Total cost of fees that apply to this item.
          format: double
          nullable: true
        total:
          type: number
          description: Total price of this cart item taking into account any discounts.
          format: double
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/CommerceUnitPrice"
        productDiscount:
          $ref: "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
        productDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
          description: A list of discounts applied to the product
          nullable: true
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedLineItemShippingDiscount"
          description: A discount applied to the shipping
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        shippingAmountBeforeDiscountsAndAdjustments:
          type: number
          description: Shipping amount before Discounts and adjustments
          format: double
          nullable: true
        weightedOrderAdjustment:
          type: number
          description: Order Level Manual Adjustment applied to this Item
          format: double
          nullable: true
        weightedOrderDiscount:
          type: number
          description: Order Level Discount applied to this Item
          format: double
          nullable: true
        adjustedLineItemSubtotal:
          type: number
          description: Order Level taxable sub total
          format: double
          nullable: true
        totalWithoutWeightedShippingAndHandling:
          type: number
          description: Taxable Subtotal including Weighted Order amounts
          format: double
          nullable: true
        weightedOrderTax:
          type: number
          description: Order Level tax applied to this Item
          format: double
          nullable: true
        weightedOrderShipping:
          type: number
          description: Order Level Shipping applied to this Item
          format: double
          nullable: true
        weightedOrderShippingDiscount:
          type: number
          description: Order Level Shipping discount applied to this Item
          format: double
          nullable: true
        weightedOrderShippingManualAdjustment:
          type: number
          description: Order Level Shipping Manual Adjustment applied to this Item
          format: double
          nullable: true
        weightedOrderShippingTax:
          type: number
          description: Order Level Shipping Tax applied to this Item
          format: double
          nullable: true
        weightedOrderHandlingFee:
          type: number
          description: Order Level handling fee applied to this item
          format: double
          nullable: true
        weightedOrderHandlingFeeTax:
          type: number
          description: Order Level handling fee tax applied to this item
          format: double
          nullable: true
        weightedOrderHandlingFeeDiscount:
          type: number
          description: Order Level handling fee discount applied to this item
          format: double
          nullable: true
        weightedOrderDuty:
          type: number
          description: Order Level Duty applied to this Item
          format: double
          nullable: true
        totalWithWeightedShippingAndHandling:
          type: number
          description: Line item total with line item, Tax, Weighted Tax with Weighted
            shipping and handling costs
          format: double
          nullable: true
        weightedOrderHandlingAdjustment:
          type: number
          description: Order level handling adjusment that applies to this item.
          format: double
          nullable: true
        autoAddDiscountId:
          type: integer
          description: Track the discoutid from which the item was auto added
          format: int32
          nullable: true
      additionalProperties: false
      description: Base class for cart and order items
    CartItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceItem"
      properties:
        id:
          type: string
          description: Unique identifier of the item in the cart.
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        fulfillmentMethod:
          type: string
          description: Fulfillment method used to fulfill this item
          nullable: true
      additionalProperties: false
      description: Details of an item in the shopper's cart, such as the product name,
        stock count, unit price, discounts, quantity ordered, and total price.
    InvalidCoupon:
      type: object
      properties:
        couponCode:
          type: string
          description: Code that identifies the coupon.
          nullable: true
        reasonCode:
          type: integer
          description: Code that identifies the reason the coupon was invalid.
          format: int32
        reason:
          type: string
          description: Description text of the reason.
          nullable: true
        createDate:
          type: string
          description: Create date of the invalid coupon.
          format: date-time
        discountId:
          type: integer
          format: int32
      additionalProperties: false
      description: Represents a coupon that is considered invalid by the Mozu pricing
        service.
    CartMessage:
      type: object
      properties:
        message:
          type: string
          nullable: true
        messageType:
          type: string
          nullable: true
        productsRemoved:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProduct"
          nullable: true
      additionalProperties: false
    Cart:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceAggregate"
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
          description: List of items in the cart.
          nullable: true
        couponCodes:
          type: array
          items:
            type: string
          description: Coupon codes associated with this order.  Only set on order import.
          nullable: true
        invalidCoupons:
          type: array
          items:
            $ref: "#/components/schemas/InvalidCoupon"
          description: A list of invalid coupons that were attempted on the cart
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code
          nullable: true
        cartMessage:
          $ref: "#/components/schemas/CartMessage"
        cartMessages:
          type: array
          items:
            $ref: "#/components/schemas/CartMessage"
          nullable: true
        handlingAmount:
          type: number
          description: Order level handling fees excluding any discounts.
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          description: Handling fees for the Order as well as CartItems (e.g. if the Cart
            has a $5 handling fee and an CartItem has a $2 handling fee per item
            quantity and the quantity of items is 2 then the value in this
            property would be $9)
          format: double
          nullable: true
        handlingTotal:
          type: number
          description: Handling fees including any discounts.
          format: double
          nullable: true
      additionalProperties: false
      description: "Details of the current cart, including shopper's user ID, items
        listed in the cart, and any system messages. \r

        For each item, contains the list of available discounts and the
        actual discount applied to the cart item."
    CartItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
          nullable: true
      additionalProperties: false
      description: Collection of items in the cart. A collection is not paged.
    CartChangeMessageCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          nullable: true
      additionalProperties: false
      description: Collection of cart messages returned as a whole. A collection is
        not paged.
    Channel:
      type: object
      properties:
        tenantId:
          type: integer
          description: Tenant that owns the channel.
          format: int32
        code:
          type: string
          description: Code to uniquely identify the channel.
          nullable: true
        name:
          type: string
          description: Friendly name of the channel.
          nullable: true
        region:
          type: string
          description: Country code of the channel.
          nullable: true
        countryCode:
          type: string
          description: Country code of the channel.
          nullable: true
        groupCode:
          type: string
          description: Code to uniquely identify the channel group, if any that contains
            this channel.
          nullable: true
        siteIds:
          type: array
          items:
            type: integer
            format: int32
          description: A list of site Id's that this channel contains.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Channel used to group sites for commerce purposes.
    ChannelCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
          nullable: true
      additionalProperties: false
    ChannelGroup:
      type: object
      properties:
        tenantId:
          type: integer
          description: Tenant that owns the channel.
          format: int32
        code:
          type: string
          description: Code to uniquely identify the channel.
          nullable: true
        name:
          type: string
          description: Friendly name of the channel.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Used to group channels together to manage common channel information.
    ChannelGroupCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ChannelGroup"
          nullable: true
      additionalProperties: false
    OrderAttribute:
      type: object
      properties:
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        fullyQualifiedName:
          type: string
          nullable: true
        attributeDefinitionId:
          type: integer
          format: int32
          nullable: true
        values:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    CommerceRuntimeOrderItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceItem"
      properties:
        id:
          type: string
          description: Unique identifier of the order line item. System-supplied and
            read-only.
          nullable: true
        destinationId:
          type: string
          description: The destination associated with this item when used with a
            multi-ship checkout.
          nullable: true
        originalCartItemId:
          type: string
          description: "Unique identifier of the cart item that is associated with this
            line item. \r

            (This is the original Cart Item ID expressed as a
            GUID.)"
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        fulfillmentMethod:
          type: string
          description: Fulfillment method used to fulfill this item
          nullable: true
        dutyAmount:
          type: number
          description: Duty or Tariff for this item
          format: double
          nullable: true
        expectedDeliveryDate:
          type: string
          description: Expected Delivery Date of shipment
          format: date-time
          nullable: true
      additionalProperties: false
      description: A single line item of an order.
    CheckoutGrouping:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this grouping.
          nullable: true
        destinationId:
          type: string
          description: The DestinationId used by items in this grouping, which may be
            {null}.
          nullable: true
        fulfillmentMethod:
          type: string
          description: The FulfillmentMethod used by items in this grouping.
          nullable: true
        orderItemIds:
          type: array
          items:
            type: string
          description: Identifiers of the items that make up this grouping.
          nullable: true
        shippingMethodCode:
          type: string
          description: "Code that uniquely identifies the shipping method such as
            \"Ground,\" \"Overnight,\" or \"Digital.\"\r

            The site's shipping settings lists the valid shipping
            methods specified for this site."
          nullable: true
        shippingMethodName:
          type: string
          description: Readable name of the shipping method.
          nullable: true
        standaloneGroup:
          type: boolean
          description: Indicates whether a non ship group should combine with a ship group
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingDiscount"
          nullable: true
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        dutyAmount:
          type: number
          description: Any duty fee applied directly to this group. Items can also have
            their own duty fee.
          format: double
          nullable: true
        dutyTotal:
          type: number
          description: Total raw duty amounts for this group.
          format: double
        shippingAmount:
          type: number
          description: If a shipping method applies directly to this grouping (versus the
            items), this is the raw shipping amount for the group.
          format: double
          nullable: true
        shippingSubTotal:
          type: number
          description: The raw shipping amount minus shipping discounts.
          format: double
        itemLevelShippingDiscountTotal:
          type: number
          description: The total value of item-level shipping discounts applied to this
            group.
          format: double
        orderLevelShippingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) shipping discounts
            applied to this group.
          format: double
        shippingTax:
          type: number
          description: Group-level shipping tax. Does not account for item shipping tax.
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          description: The total shipping tax for this group, accounting for both
            group-level and item-level shipping tax.
          format: double
        shippingTotal:
          type: number
          description: The total shipping cost for this group, accounting for discounts
            and tax.
          format: double
        handlingAmount:
          type: number
          description: The handling fee amount that's applicable to this grouping.
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          description: The total raw handling amounts minus handling discounts.
          format: double
        itemLevelHandlingDiscountTotal:
          type: number
          description: The total value of item-level handling discounts applied to this
            group.
          format: double
        orderLevelHandlingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) handling discounts
            applied to this group.
          format: double
        handlingTax:
          type: number
          description: Group-level handling tax. Does not account for item handling tax.
          format: double
          nullable: true
        handlingTaxTotal:
          type: number
          description: The total handling tax for this group, accounting for both
            group-level and item-level handling tax.
          format: double
        handlingTotal:
          type: number
          description: The total handling cost for this group, accounting for discounts
            and tax.
          format: double
        taxData:
          type: object
          nullable: true
      additionalProperties: false
    CommerceRuntimeDestination:
      type: object
      properties:
        id:
          type: string
          description: An identifier for this entry.
          nullable: true
        destinationContact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        isDestinationCommercial:
          type: boolean
          description: Indicates that the destination is commercial
          nullable: true
        data:
          type: object
          description: Custom data
          nullable: true
      additionalProperties: false
    PaymentActionTarget:
      type: object
      properties:
        targetType:
          type: string
          description: Specifies if the
            Mozu.CommerceRuntime.Contracts.Payments.PaymentActionTarget.TargetId
            is a Checkout Id, Order Id, or Return Id.
          nullable: true
        targetId:
          type: string
          description: The Id of the Checkout/Order/Return to target.
          nullable: true
        targetNumber:
          type: integer
          description: The number of the Checkout/Order/Return to target.
          format: int32
          nullable: true
      additionalProperties: false
    PaymentCardReference:
      type: object
      properties:
        paymentOrCardType:
          type: string
          description: Card type such as Visa, MasterCard, American Express, or Discover.
          nullable: true
        cardNumberPartOrMask:
          type: string
          description: "The visible part of the card number that the merchant uses to
            refer to \r

            payment information, for example, the last for digits of
            the card number."
          nullable: true
        expireMonth:
          type: integer
          description: Month when the card expires.
          format: int32
        expireYear:
          type: integer
          description: Year when the card expires.
          format: int32
        bin:
          type: string
          description: Year when the card expires.
          nullable: true
      additionalProperties: false
    PaymentCard:
      type: object
      allOf:
        - $ref: "#/components/schemas/PaymentCardReference"
      properties:
        paymentServiceCardId:
          type: string
          description: Credit card number.
          nullable: true
        isUsedRecurring:
          type: boolean
          description: If true, the credit card is charged on a regular interval, such as
            for a subscription. (Not supported currently.)
          nullable: true
        nameOnCard:
          type: string
          description: Card holder's name as it appears on the card.
          nullable: true
        isCardInfoSaved:
          type: boolean
          description: If true, the card information is stored in the customer's account.
        isTokenized:
          type: boolean
          description: If true, the card is tokenized by external provider
      additionalProperties: false
      description: "If the customer is paying by credit card, the card holder's
        details, such as the name on the card, number, billing \r

        address, and expiration dates."
    PaymentToken:
      type: object
      properties:
        paymentServiceTokenId:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimePurchaseOrderPaymentTerm:
      type: object
      properties:
        code:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimePurchaseOrderCustomField:
      type: object
      properties:
        code:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    PurchaseOrderPayment:
      type: object
      properties:
        purchaseOrderNumber:
          type: string
          description: Purchase order number
          nullable: true
        paymentTerm:
          $ref: "#/components/schemas/CommerceRuntimePurchaseOrderPaymentTerm"
        customFields:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePurchaseOrderCustomField"
          description: Memo/custom fields
          nullable: true
      additionalProperties: false
      description: Purchase order payment
    CheckPayment:
      type: object
      properties:
        checkNumber:
          type: string
          nullable: true
      additionalProperties: false
    BillingInfo:
      type: object
      properties:
        paymentType:
          type: string
          description: "Type of payment, such as credit card, check by mail, or PayPal.\r

            see
            Mozu.CommerceRuntime.Contracts.Payments.PaymentTypeConst for valid
            values"
          nullable: true
        paymentWorkflow:
          type: string
          nullable: true
        billingContact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        isSameBillingShippingAddress:
          type: boolean
          description: Indicates that billing and shipping address are the same
        card:
          $ref: "#/components/schemas/PaymentCard"
        token:
          $ref: "#/components/schemas/PaymentToken"
        purchaseOrder:
          $ref: "#/components/schemas/PurchaseOrderPayment"
        check:
          $ref: "#/components/schemas/CheckPayment"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        storeCreditCode:
          type: string
          description: The store credit to use for this purchase
          nullable: true
        storeCreditType:
          type: string
          description: The type of store credit used for this purchase
          nullable: true
        customCreditType:
          type: string
          description: Name of custom stored credit type
          nullable: true
        externalTransactionId:
          type: string
          description: Transaction Id from third party payment source like Visa Checkout,
            Amazon
          nullable: true
        data:
          type: object
          description: Custom data from payment providers
          nullable: true
      additionalProperties: false
      description: "Customer's payment details such as payment type (credit card,
        check by mail, or PayPal)\r

        and cardholder information if payment is by credit card."
    SubPayment:
      type: object
      properties:
        status:
          type: string
          nullable: true
        amountCollected:
          type: number
          format: double
        amountCredited:
          type: number
          format: double
        amountRequested:
          type: number
          format: double
        amountRefunded:
          type: number
          format: double
        target:
          $ref: "#/components/schemas/PaymentActionTarget"
      additionalProperties: false
    PaymentGatewayResponseData:
      type: object
      properties:
        key:
          type: string
          description: Key from payment gateway
          nullable: true
        value:
          type: string
          description: Value from payment gateway
          nullable: true
      additionalProperties: false
      description: Payment gateway reponse data
    CapturableShipmentSummary:
      type: object
      properties:
        shipmentNumber:
          type: integer
          format: int32
        shipmentTotal:
          type: number
          format: double
      additionalProperties: false
    PaymentInteraction:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of this payment transaction interaction.
          nullable: true
        gatewayInteractionId:
          type: integer
          description: "Unique identifier of the gateway interaction. Used for credit card
            transactions, where the\r

            payment service creates a GatewayInteractionId for each
            transaction interaction."
          format: int32
          nullable: true
        paymentId:
          type: string
          description: Unique identifier of the original transaction of which this current
            interaction is a part.
          nullable: true
        orderId:
          type: string
          description: Unique identifier of the order with which this transaction is
            associated.
          nullable: true
        target:
          $ref: "#/components/schemas/PaymentActionTarget"
        currencyCode:
          type: string
          description: ISO currency code for the transaction. Currently, only USD is
            supported.
          nullable: true
        interactionType:
          type: string
          description: "Types of transaction interactions which can be \"Authorization,\"
            \"Capture,\" \"AuthorizeAndCapture,\"\r

            \"Void,\" or \"Credit,\" \"CheckRequested,\" or
            \"CheckReceived.\""
          nullable: true
        checkNumber:
          type: string
          description: If paying by check, the check number.
          nullable: true
        status:
          type: string
          description: Status of the payment transaction interaction which can be either
            "Success" or "Failure."
          nullable: true
        paymentEntryStatus:
          type: string
          description: Status of the payment when the transaction interaction was created
          nullable: true
        isRecurring:
          type: boolean
          description: If true, the product is purchased or fulfilled at regular
            intervals, for example, a monthly billing or a subscription. (Not
            currently implemented.)
          nullable: true
        isManual:
          type: boolean
          description: If the payment is a manual payment, this is set to true
        gatewayTransactionId:
          type: string
          description: Unique identifier of the transaction supplied by PCIaaS.
          nullable: true
        gatewayAuthCode:
          type: string
          description: If required by the payment gateway, the authorization code of the
            transaction. Supplied by PCIaaS.
          nullable: true
        gatewayAVSCodes:
          type: string
          description: Gateway AVS Codes. Supplied by PCIaaS.
          nullable: true
        gatewayCVV2Codes:
          type: string
          description: Gateway CVV2 Codes. Supplied by PCIaaS.
          nullable: true
        gatewayResponseCode:
          type: string
          description: Gateway response code. Supplied by PCIaaS.
          nullable: true
        gatewayResponseText:
          type: string
          description: Gateway response text. Supplied by PCIaaS.
          nullable: true
        gatewayResponseData:
          type: array
          items:
            $ref: "#/components/schemas/PaymentGatewayResponseData"
          description: A List of payment response data required to act on authorization
            when using external order management systems
          nullable: true
        paymentTransactionInteractionIdReference:
          type: integer
          description: "Unique identifier of previous PaymentTransactionInteraction that
            this PaymentTransactionInteraction is modifying.\r

            For instance, when crediting a capture, set the
            PaymentTransactionInteractionIdReference to the capture
            PaymentTransactionInteractionID."
          format: int32
          nullable: true
        amount:
          type: number
          description: Amount of funds associated with this interaction.
          format: double
          nullable: true
        note:
          type: string
          description: Note to be entered by merchant/application
          nullable: true
        interactionDate:
          type: string
          description: Date the interaction occurred
          format: date-time
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        returnId:
          type: string
          description: Return Id, if the interaction is a Credit for a return-refund.
          nullable: true
        refundId:
          type: string
          description: Refund Id, if the interaction is for a stand alone refund.
          nullable: true
        capturableShipmentsSummary:
          type: array
          items:
            $ref: "#/components/schemas/CapturableShipmentSummary"
          description: Stores pairings of shipment number to shipment total for all
            captured shipments. This was added for generating TLogs.
          nullable: true
      additionalProperties: false
      description: "A single interaction of a potential list of intereactions for a
        transaction. The scope of the transaction is the entire payment\r

        interchange. It is created upon authorization and is used for
        all subsequent interactions performed against the authorize,\r

        such as consecutive captures."
    GatewayGiftCard:
      type: object
      properties:
        cardNumber:
          type: string
          nullable: true
        amount:
          type: number
          format: double
        currencyCode:
          type: string
          nullable: true
      additionalProperties: false
    Payment:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of this order transaction.
          nullable: true
        groupId:
          $ref: "#/components/schemas/PaymentActionTarget"
        paymentServiceTransactionId:
          type: string
          description: Unique identifier of the transaction, specified by the payment
            service processesing this transaction.
          nullable: true
        availableActions:
          type: array
          items:
            type: string
          description: Actions available to the payment
          nullable: true
        orderId:
          type: string
          description: Unique identifier of the order with which this transaction is
            associated.
          nullable: true
        paymentType:
          type: string
          description: Type of Payment
          nullable: true
        paymentWorkflow:
          type: string
          description: The source of data for this payment.  By default, this will be set
            to 'mozu'
          nullable: true
        externalTransactionId:
          type: string
          description: The external/third party transaction Id for this payment. This is
            used to store the transaction Id from digital wallet like Visa
            Checkout
          nullable: true
        billingInfo:
          $ref: "#/components/schemas/BillingInfo"
        data:
          type: object
          description: Custom data from payment providers
          nullable: true
        status:
          type: string
          description: Current status of this transaction which are described by the
            PaymentStatusConst class.
          nullable: true
        subPayments:
          type: array
          items:
            $ref: "#/components/schemas/SubPayment"
          description: List of sub payments that correspond to child orders in case of
            multiship orders.
          nullable: true
        interactions:
          type: array
          items:
            $ref: "#/components/schemas/PaymentInteraction"
          description: "List of intereactions for this transaction. A transaction is
            created upon authorization and lasts across the payment \r

            interchange, which can consist of multiple interactions,
            such as consecutive captures."
          nullable: true
        isRecurring:
          type: boolean
          description: "If true, the product is purchased or fulfilled at regular
            intervals, for example, \r

            monthly billing or a subscription. (Not currently
            supported.)"
        amountCollected:
          type: number
          description: Amount collected on the payment
          format: double
        amountCredited:
          type: number
          description: Amount credited back to the payment.
          format: double
        amountRequested:
          type: number
          description: "Derived from the Amount on the initial payment create, used to
            help storefront determine how much can be captured for multiple
            payments.\r

            See Order.AmountRemainingForPayment for an example."
          format: double
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the payment.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        gatewayGiftCard:
          $ref: "#/components/schemas/GatewayGiftCard"
      additionalProperties: false
      description: "Payment transaction associated with this order. It is the entire
        payment interchange between the merchant who is forwarding the
        customer's payment \r

        information and the payment service who is authorizing and
        capturing payment. Payment can be either by credit card, check, or
        PayPal. (PayPal not\r

        currently supported.)"
    CommerceRuntimeShopperNotes:
      type: object
      properties:
        giftMessage:
          type: string
          description: Gift message associated with this order.
          nullable: true
        comments:
          type: string
          description: Comments associated with this order.
          nullable: true
      additionalProperties: false
      description: Notes that the shopper has added to this order, for example, a gift
        message or other comments.
    Checkout:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier.
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
        number:
          type: integer
          description: A checkout number that is only assigned after the checkout is placed.
          format: int32
          nullable: true
        originalCartId:
          type: string
          description: Unique identifier for the cart that was converted to checkout.
          nullable: true
        submittedDate:
          type: string
          description: When the customer placed (submitted) the order.
          format: date-time
          nullable: true
        type:
          type: string
          description: Is this Order Online or Offline? Online means shopper entered at
            checkout, offline means a phone order.
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          description: List of items in the checkout.
          nullable: true
        groupings:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutGrouping"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeDestination"
          nullable: true
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          description: "Payment transaction associated with this checkout. It is the
            entire payment interchange between the merchant \r

            who is forwarding the customer's payment information and
            the payment service who is authorizing and \r

            capturing payment. Payment can be either by credit card,
            check, or PayPal."
          nullable: true
        amountRemainingForPayment:
          type: number
          description: "A counter for how much of the total has not been claimed by
            payments.\r

            This is computed by Total - (sum of Payments where State
            is not Voided/Declined)"
          format: double
        acceptsMarketing:
          type: boolean
          description: Does the customer accept marketing
          nullable: true
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        email:
          type: string
          description: Email address for checkout
          nullable: true
        customerTaxId:
          type: string
          description: The customers tax ID. If Customer Account ID exists in the system,
            will set this.
          nullable: true
          readOnly: true
        isTaxExempt:
          type: boolean
          description: Unique identifier of the customer account.
          nullable: true
          readOnly: true
        currencyCode:
          type: string
          description: ISO Currency Code.
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the checkout
          nullable: true
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/OrderAttribute"
          nullable: true
        shopperNotes:
          $ref: "#/components/schemas/CommerceRuntimeShopperNotes"
        availableActions:
          type: array
          items:
            type: string
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        locationCode:
          type: string
          description: Identifies the location at which the order was placed if the order
            was placed externally.
          nullable: true
        ipAddress:
          type: string
          description: IP address of the user placing the order. (User or customer?)
          nullable: true
        sourceDevice:
          type: string
          description: Source device of the user placing the order. (User or customer?)
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        couponCodes:
          type: array
          items:
            type: string
          description: Coupon codes associated with this order.
          nullable: true
        invalidCoupons:
          type: array
          items:
            $ref: "#/components/schemas/InvalidCoupon"
          description: A list of invalid coupons that were attempted on the order.
          nullable: true
        suggestedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/SuggestedDiscount"
          nullable: true
        discountThresholdMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeThresholdMessage"
          description: List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage
            objects that are valid for the current value of the cart/order.
          nullable: true
        dutyTotal:
          type: number
          description: Total duty fees
          format: double
          nullable: true
        feeTotal:
          type: number
          description: Total Fees
          format: double
        subTotal:
          type: number
          description: Subtotal before any coupon codes, taxes, fees, etc.
          format: double
        itemLevelProductDiscountTotal:
          type: number
          description: The total value of item-level product discounts.
          format: double
        orderLevelProductDiscountTotal:
          type: number
          description: The total value of order-level (group-level) product discounts.
          format: double
        itemTaxTotal:
          type: number
          description: Total tax on products.
          format: double
        itemTotal:
          type: number
          description: The total product cost, accounting for discounts and tax.
          format: double
        shippingSubTotal:
          type: number
          description: Shipping does not appear on cart.
          format: double
        itemLevelShippingDiscountTotal:
          type: number
          description: The total value of item-level shipping discounts.
          format: double
        orderLevelShippingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) shipping discounts.
          format: double
        shippingTaxTotal:
          type: number
          description: Total tax on shipping.
          format: double
        shippingTotal:
          type: number
          description: Overall shipping total, accounting for item and order-level
            shipping costs, any shipping discounts, and shipping tax.
          format: double
        handlingSubTotal:
          type: number
          description: "Pre-Discounted Handling Subtotal of the CommerceAggregate and its
            Items.\r

            Returns {null} if the calculated value is negative."
          format: double
        itemLevelHandlingDiscountTotal:
          type: number
          description: The total value of item-level handling discounts.
          format: double
        orderLevelHandlingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) handling discounts.
          format: double
        handlingTaxTotal:
          type: number
          description: Total tax on handling.
          format: double
        handlingTotal:
          type: number
          description: Overall handling total, accounting for line and order-level
            handling costs, any handling discounts, and handling tax.
          format: double
        total:
          type: number
          description: Final total
          format: double
      additionalProperties: false
    CheckoutCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Checkout"
          nullable: true
      additionalProperties: false
      description: Paged collection of checkouts.
    ShippingPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: ISO currency code such as US dollars. Currently, only USD is
            supported.
          nullable: true
        price:
          type: number
          description: How much the customer pays for shipping which includes any shipping
            discounts that the merchant offers.
          format: double
          nullable: true
      additionalProperties: false
      description: Shipping pricing information which includes the cost to the
        merchant and the price that the customer pays.
    CommerceRuntimeShippingRate:
      type: object
      allOf:
        - $ref: "#/components/schemas/ShippingPrice"
      properties:
        shippingMethodCode:
          type: string
          description: Code that uniquely identifies the selected shipping method.
          nullable: true
        shippingMethodName:
          type: string
          description: Shipping Method Name
          nullable: true
        shippingZoneCode:
          type: string
          description: The shipping zone to which this rate applies.
          nullable: true
        isValid:
          type: boolean
          description: If true, the shipping rate is valid.
          nullable: true
        messages:
          type: array
          items:
            type: string
          description: Messages and detail about why the shipping rate may be invalid.
          nullable: true
        data:
          type: object
          description: Custom data returned by the shipping service.
          nullable: true
      additionalProperties: false
      description: "How much the customer and merchant pay for shipping based on the
        current shipping rate. \r

        The cost can differ between the merchant and customer depending
        on any merchant discounts or \r

        extra fees."
    CheckoutGroupRates:
      type: object
      properties:
        groupingId:
          type: string
          nullable: true
        shippingRates:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeShippingRate"
          nullable: true
      additionalProperties: false
    CheckoutGroupShippingMethod:
      type: object
      properties:
        groupingId:
          type: string
          nullable: true
        shippingRate:
          $ref: "#/components/schemas/CommerceRuntimeShippingRate"
      additionalProperties: false
    CheckoutAction:
      type: object
      properties:
        actionName:
          type: string
          nullable: true
      additionalProperties: false
    DigitalWallet:
      type: object
      properties:
        digitalWalletData:
          type: string
          description: "Digital wallet data.\r

            Note: Transform the Json data to a string."
          nullable: true
        cartId:
          type: string
          description: "Cart ID\r

            Note: This property should only be set if the order is
            not created and user opted to \r

            create the order from cart using digital wallet."
          nullable: true
      additionalProperties: false
      description: Digital wallet contract
    ItemsForDestination:
      type: object
      properties:
        destinationId:
          type: string
          nullable: true
        itemIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    PaymentGatewayInteraction:
      type: object
      properties:
        gatewayInteractionId:
          type: integer
          description: Gateway Transaction Id from PCIaaS.  Not populated by incoming
            request.
          format: int32
          nullable: true
        gatewayTransactionId:
          type: string
          description: Gateway Transaction Id from PCIaaS.  Not populated by incoming
            request.
          nullable: true
        gatewayAuthCode:
          type: string
          description: Gateway Transaction Id from PCIaaS.  Not populated by incoming
            request.
          nullable: true
        gatewayAVSCodes:
          type: string
          description: Not populated by incoming request.
          nullable: true
        gatewayCVV2Codes:
          type: string
          description: Not populated by incoming request.
          nullable: true
        gatewayResponseCode:
          type: string
          description: Not populated by incoming request.
          nullable: true
        gatewayResponseText:
          type: string
          description: Gateway response text. Supplied by PCIaaS.
          nullable: true
      additionalProperties: false
      description: Represents a manually entered payment gateway interaction.
    PaymentAction:
      type: object
      properties:
        actionName:
          type: string
          description: Name of the Action to post
          nullable: true
        currencyCode:
          type: string
          description: ISO currency code for the transaction. Currently, only USD is
            supported.
          nullable: true
        checkNumber:
          type: string
          description: If paying by check, the check number.
          nullable: true
        returnUrl:
          type: string
          description: If paying by Paypal Express or some other potential non-gateway
            payment provider, a return redirect URL must be provided.
          nullable: true
        cancelUrl:
          type: string
          description: "If paying by Paypal Express or some other potential non-gateway
            payment provider, a cancel redirect URL must be provided.\r

            This will be used if something goes wrong on the
            third-party side."
          nullable: true
        amount:
          type: number
          description: Amount of funds to withdraw to pay for this order.
          format: double
          nullable: true
        interactionDate:
          type: string
          description: Date the interaction occurred
          format: date-time
          nullable: true
        newBillingInfo:
          $ref: "#/components/schemas/BillingInfo"
        referenceSourcePaymentId:
          type: string
          description: Reference payment id from which to copy the billing info.
          nullable: true
        manualGatewayInteraction:
          $ref: "#/components/schemas/PaymentGatewayInteraction"
        externalTransactionId:
          type: string
          nullable: true
        data:
          type: object
          description: Custom data from payment providers
          nullable: true
      additionalProperties: false
    Adjustment:
      type: object
      properties:
        amount:
          type: number
          format: double
          nullable: true
        description:
          type: string
          nullable: true
        internalComment:
          type: string
          nullable: true
      additionalProperties: false
    OrderNote:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the note. System-supplied and read-only.
          nullable: true
        text:
          type: string
          description: Text of the note. Maximum 250 characters.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Internal notes that a merchant may add to the order. Maximum 250
        characters.
    OrderValidationMessage:
      type: object
      properties:
        orderItemId:
          type: string
          description: Order item id that this message applies to.  Can be empty.
          nullable: true
        messageType:
          type: string
          description: Identifier to indicate the type of the message, See
            OrderValidatorMessageTypeConst for options.
          nullable: true
        message:
          type: string
          description: Actual message returned by the validator.
          nullable: true
      additionalProperties: false
      description: Validation message returned by an order validator.
    OrderValidationResult:
      type: object
      properties:
        validationId:
          type: string
          description: Identifier set by the capability that states the id of this
            specific validation attempt
          nullable: true
        validatorName:
          type: string
          description: Identifier set by the capability that states the specific name of
            this validator.
          nullable: true
        validatorType:
          type: string
          description: Identifies the type of the validator (types are enumerated in
            OrderValidatorTypeConst)
          nullable: true
        status:
          type: string
          description: Status of the order validation result.  See
            OrderValidatorStatusConst for options.
          nullable: true
        createdDate:
          type: string
          description: DateTime that this validation result was created
          format: date-time
          nullable: true
        messages:
          type: array
          items:
            $ref: "#/components/schemas/OrderValidationMessage"
          description: Messages returned by the order validator
          nullable: true
      additionalProperties: false
      description: The result of an order validator.
    Refund:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of this order transaction.
          nullable: true
        orderId:
          type: string
          description: Unique identifier of the order with which this refund is associated.
          nullable: true
        reason:
          type: string
          description: Merchant-entered reason for this refund.
          nullable: true
        reasonCode:
          type: string
          nullable: true
        payment:
          $ref: "#/components/schemas/Payment"
        amount:
          type: number
          description: Amount refunded.
          format: double
        refundMethod:
          type: string
          description: Refund Method.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Refund associated with an order. A refund is a single exchange of
        money from merchant to customer\r

        that either encapsulates a refund to a credit card or an
        issuance of a store credit.\r

        A refund does not reduce the 'amount collected' on an order and
        it is possible for a refund to exceed the total order amount."
    AbstractFulfillmentItem:
      type: object
      properties:
        productCode:
          type: string
          description: Code of the Product to be fulfilled.
          nullable: true
        quantity:
          type: integer
          description: Quantity of the order item
          format: int32
        fulfillmentItemType:
          type: string
          description: The type of fulfillment item
          nullable: true
        lineId:
          type: integer
          description: The line id associated with the fulfillment.
          format: int32
          nullable: true
        optionAttributeFQN:
          type: string
          nullable: true
      additionalProperties: false
    PackageItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractFulfillmentItem"
      additionalProperties: false
      description: An item in a package representing a particular product.
    CollectionOfPackageItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the fulfillment unit.
          nullable: true
        code:
          type: string
          description: "A human-readable identifier for this fulfillment unit.  If not set
            on create, will be autogenerated as a string of the form\r

            \    {fulfillmentUnitType} #{next available int}"
          nullable: true
        status:
          type: string
          description: "Status of the fulfillment unit\r

            See FulfillmentStatusConst"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/PackageItem"
          description: List of items in the fulfillment unit
          nullable: true
        fulfillmentDate:
          type: string
          description: Date of the pickup
          format: date-time
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        availableActions:
          type: array
          items:
            type: string
          description: Actions that can be taken on this fulfillment unit
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the fulfillment unit.
          nullable: true
      additionalProperties: false
    CommerceRuntimeTracking:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties: {}
          nullable: true
        number:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimePackage:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionOfPackageItem"
      properties:
        shippingMethodCode:
          type: string
          description: Code describing the shipping method.
          nullable: true
        shippingMethodName:
          type: string
          description: Name of the shipping method
          nullable: true
        shipmentId:
          type: string
          description: ID of the related shipment
          nullable: true
        trackingNumber:
          type: string
          description: Tracking number of this package (to support classic use cases)
          nullable: true
        trackingNumbers:
          type: array
          items:
            type: string
          description: Tracking number of this package
          nullable: true
        packagingType:
          type: string
          description: Packaging type of this package
          nullable: true
        hasLabel:
          type: boolean
          description: If there is a shipping label present for this Package, this will be
            set to true
        measurements:
          $ref: "#/components/schemas/CommerceRuntimePackageMeasurements"
        carrier:
          type: string
          description: Carrier of this package
          nullable: true
        signatureRequired:
          type: boolean
          description: SignatureRequired for this package
          nullable: true
        trackings:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeTracking"
          description: Tracking number and url data for this package
          nullable: true
      additionalProperties: false
      description: Describes a package that will be shipped to somebody
    CommerceRuntimePickupItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractFulfillmentItem"
      additionalProperties: false
      description: Item that goes into the pickup to determine which items will be
        picked up.
    CollectionOfPickupItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the fulfillment unit.
          nullable: true
        code:
          type: string
          description: "A human-readable identifier for this fulfillment unit.  If not set
            on create, will be autogenerated as a string of the form\r

            \    {fulfillmentUnitType} #{next available int}"
          nullable: true
        status:
          type: string
          description: "Status of the fulfillment unit\r

            See FulfillmentStatusConst"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePickupItem"
          description: List of items in the fulfillment unit
          nullable: true
        fulfillmentDate:
          type: string
          description: Date of the pickup
          format: date-time
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        availableActions:
          type: array
          items:
            type: string
          description: Actions that can be taken on this fulfillment unit
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the fulfillment unit.
          nullable: true
      additionalProperties: false
    Pickup:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionOfPickupItem"
      additionalProperties: false
      description: Represents a pickup by a customer from a merchant.
    DigitalPackageItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractFulfillmentItem"
      properties:
        giftCardCode:
          type: string
          nullable: true
      additionalProperties: false
    CollectionOfDigitalPackageItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the fulfillment unit.
          nullable: true
        code:
          type: string
          description: "A human-readable identifier for this fulfillment unit.  If not set
            on create, will be autogenerated as a string of the form\r

            \    {fulfillmentUnitType} #{next available int}"
          nullable: true
        status:
          type: string
          description: "Status of the fulfillment unit\r

            See FulfillmentStatusConst"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/DigitalPackageItem"
          description: List of items in the fulfillment unit
          nullable: true
        fulfillmentDate:
          type: string
          description: Date of the pickup
          format: date-time
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        availableActions:
          type: array
          items:
            type: string
          description: Actions that can be taken on this fulfillment unit
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the fulfillment unit.
          nullable: true
      additionalProperties: false
    DigitalPackage:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionOfDigitalPackageItem"
      additionalProperties: false
    CommerceRuntimeShipmentStatusReason:
      type: object
      properties:
        reasonCode:
          type: string
          nullable: true
        moreInfo:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeLink:
      type: object
      properties:
        deprecation:
          type: string
          nullable: true
        href:
          type: string
          nullable: true
        hreflang:
          type: string
          nullable: true
        media:
          type: string
          nullable: true
        rel:
          type: string
          nullable: true
        templated:
          type: boolean
          nullable: true
        title:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeTaskInput:
      type: object
      properties:
        helpMessage:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        maxLength:
          type: integer
          format: int32
          nullable: true
        maximum:
          type: number
          format: double
        minLength:
          type: integer
          format: int32
          nullable: true
        minimum:
          type: number
          format: double
        name:
          type: string
          nullable: true
        options:
          type: array
          items: {}
          nullable: true
        pattern:
          type: string
          nullable: true
        required:
          type: boolean
          nullable: true
        type:
          type: string
          nullable: true
      additionalProperties: false
    FulfillmentTask:
      type: object
      properties:
        links:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CommerceRuntimeLink"
          nullable: true
        active:
          type: boolean
          nullable: true
        attributes:
          type: object
          additionalProperties: {}
          nullable: true
        completed:
          type: boolean
          nullable: true
        completedDate:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeTaskInput"
          nullable: true
        name:
          type: string
          nullable: true
        skippable:
          type: boolean
          nullable: true
        subject:
          type: string
          nullable: true
        taskId:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeWorkflowState:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties: {}
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        completedDate:
          type: string
          format: date-time
          nullable: true
        processInstanceId:
          type: string
          nullable: true
        shipmentState:
          type: string
          nullable: true
        taskList:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentTask"
          nullable: true
      additionalProperties: false
    ShipmentItem:
      type: object
      properties:
        lineId:
          type: integer
          format: int32
        originalOrderItemId:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
        productCode:
          type: string
          nullable: true
        variationProductCode:
          type: string
          nullable: true
        optionAttributeFQN:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        fulfillmentLocationCode:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        isTaxable:
          type: boolean
        quantity:
          type: integer
          format: int32
        unitPrice:
          type: number
          format: double
        actualPrice:
          type: number
          format: double
        overridePrice:
          type: number
          format: double
          nullable: true
        itemDiscount:
          type: number
          format: double
        lineItemCost:
          type: number
          format: double
        itemTax:
          type: number
          format: double
        shipping:
          type: number
          format: double
        shippingDiscount:
          type: number
          format: double
        shippingTax:
          type: number
          format: double
        handling:
          type: number
          format: double
        handlingDiscount:
          type: number
          format: double
        handlingTax:
          type: number
          format: double
        duty:
          type: number
          format: double
        isPackagedStandAlone:
          type: boolean
          nullable: true
        readyForPickupQuantity:
          type: integer
          format: int32
          nullable: true
        backorderReleaseDate:
          type: string
          format: date-time
          nullable: true
        measurements:
          $ref: "#/components/schemas/CommerceRuntimePackageMeasurements"
        options:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductOption"
          nullable: true
        data:
          type: object
          nullable: true
        taxData:
          type: object
          nullable: true
        weightedShipmentAdjustment:
          type: number
          format: double
        weightedLineItemTaxAdjustment:
          type: number
          format: double
        weightedShippingAdjustment:
          type: number
          format: double
        weightedShippingTaxAdjustment:
          type: number
          format: double
        weightedHandlingAdjustment:
          type: number
          format: double
        weightedHandlingTaxAdjustment:
          type: number
          format: double
        weightedDutyAdjustment:
          type: number
          format: double
        taxableShipping:
          type: number
          format: double
        taxableLineItemCost:
          type: number
          format: double
        taxableHandling:
          type: number
          format: double
      additionalProperties: false
    CommerceRuntimeCanceledReason:
      type: object
      properties:
        reasonCode:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        moreInfo:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeCanceledItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ShipmentItem"
      properties:
        canceledReason:
          $ref: "#/components/schemas/CommerceRuntimeCanceledReason"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    CommerceRuntimeShipment:
      type: object
      properties:
        id:
          type: string
          description: ID of the shipment
          nullable: true
        externalShipmentId:
          type: string
          nullable: true
        number:
          type: integer
          format: int32
          nullable: true
        orderId:
          type: string
          nullable: true
        orderNumber:
          type: integer
          format: int32
        email:
          type: string
          nullable: true
        currencyCode:
          type: string
          nullable: true
        customerAccountId:
          type: integer
          format: int32
          nullable: true
        customerTaxId:
          type: string
          nullable: true
          readOnly: true
        shipmentType:
          type: string
          nullable: true
        shippingMethodCode:
          type: string
          nullable: true
        shippingMethodName:
          type: string
          nullable: true
        fulfillmentLocationCode:
          type: string
          nullable: true
        origin:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        destination:
          $ref: "#/components/schemas/CommerceRuntimeDestination"
        shipmentStatus:
          type: string
          nullable: true
        shipmentStatusReason:
          $ref: "#/components/schemas/CommerceRuntimeShipmentStatusReason"
        transferShipmentNumbers:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        isTransfer:
          type: boolean
          nullable: true
        originalShipmentNumber:
          type: integer
          format: int32
          nullable: true
        parentShipmentNumber:
          type: integer
          format: int32
          nullable: true
        fulfillmentStatus:
          type: string
          nullable: true
        workflowProcessId:
          type: string
          nullable: true
        workflowProcessContainerId:
          type: string
          nullable: true
        workflowState:
          $ref: "#/components/schemas/CommerceRuntimeWorkflowState"
        backorderCreatedDate:
          type: integer
          format: int32
          nullable: true
        fulfillmentDate:
          type: string
          format: date-time
          nullable: true
        orderSubmitDate:
          type: string
          format: date-time
          nullable: true
        pickStatus:
          type: string
          nullable: true
        pickType:
          type: string
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          nullable: true
        packages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePackage"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentItem"
          nullable: true
        canceledItems:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeCanceledItem"
          nullable: true
        data:
          type: object
          nullable: true
        taxData:
          type: object
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        shipmentAdjustment:
          type: number
          format: double
        lineItemSubtotal:
          type: number
          format: double
        lineItemTaxAdjustment:
          type: number
          format: double
        lineItemTaxTotal:
          type: number
          format: double
        lineItemTotal:
          type: number
          format: double
        shippingAdjustment:
          type: number
          format: double
        shippingSubtotal:
          type: number
          format: double
        shippingTaxAdjustment:
          type: number
          format: double
        shippingTaxTotal:
          type: number
          format: double
        shippingTotal:
          type: number
          format: double
        handlingAdjustment:
          type: number
          format: double
        handlingSubtotal:
          type: number
          format: double
        handlingTaxAdjustment:
          type: number
          format: double
        handlingTaxTotal:
          type: number
          format: double
        handlingTotal:
          type: number
          format: double
        dutyAdjustment:
          type: number
          format: double
        dutyTotal:
          type: number
          format: double
        total:
          type: number
          format: double
        cost:
          type: number
          format: double
          nullable: true
        externalOrderId:
          type: string
          nullable: true
        isExpress:
          type: boolean
          nullable: true
        readyToCapture:
          type: boolean
        pickupInfo:
          type: object
          nullable: true
      additionalProperties: false
    Order:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceAggregate"
      properties:
        orderNumber:
          type: integer
          description: Order Number. This is an integer that is only assigned after an
            order is placed and enters the open state.
          format: int32
          nullable: true
        locationCode:
          type: string
          description: Identifies the location at which the order was placed if the order
            was placed externally.
          nullable: true
        version:
          type: string
          description: Version for concurrency purposes
          nullable: true
        parentOrderId:
          type: string
          description: If this Order has a parent order, this should be the parent's ID.
          nullable: true
        parentOrderNumber:
          type: integer
          description: If this order has a parent order, this should be the parent's
            Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.
          format: int32
          nullable: true
        parentCheckoutId:
          type: string
          description: If this order originated from a multi-ship enabled site, this is
            the identifier of the originating checkout.
          nullable: true
        parentCheckoutNumber:
          type: integer
          description: If this order originated from a multi-ship enabled site, this is
            the number of the originating checkout.
          format: int32
          nullable: true
        partialOrderNumber:
          type: integer
          description: If this order originated from a checkout, this is a sequence number
            out of the total orders created from that checkout.
          format: int32
          nullable: true
        partialOrderCount:
          type: integer
          description: If this order originated from a checkout, this is the total number
            of orders created from that checkout.
          format: int32
          nullable: true
        isPartialOrder:
          type: boolean
          description: Returns {true} if this order originated from a checkout and has
            sibling partial orders, otherwise {false}.
        parentReturnId:
          type: string
          description: If this order was created as part of a return, this should be the
            return's ID.
          nullable: true
        parentReturnNumber:
          type: integer
          description: If this order was created as part of a return, this should be the
            return's ReturnNumber.
          format: int32
          nullable: true
        originalCartId:
          type: string
          description: Unique identifier for the cart that was converted to order.
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the order
          nullable: true
        availableActions:
          type: array
          items:
            type: string
          description: Actions available to the payment
          nullable: true
        shopperNotes:
          $ref: "#/components/schemas/CommerceRuntimeShopperNotes"
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        customerTaxId:
          type: string
          description: The customers tax ID.  If Customer Account ID exists in the system,
            will set this.
          nullable: true
        isTaxExempt:
          type: boolean
          description: Unique identifier of the customer account.
          nullable: true
        email:
          type: string
          description: Email address of the customer at the time the order is placed.
          nullable: true
        ipAddress:
          type: string
          description: IP address of the user placing the order. (User or customer?)
          nullable: true
        sourceDevice:
          type: string
          description: Source device of the user placing the order. (User or customer?)
          nullable: true
        acceptsMarketing:
          type: boolean
          description: Does the customer accept marketing
          nullable: true
        status:
          type: string
          description: Current status of the order, which can be viewed in
            OrderStatusConst. System-supplied and read-only.
          nullable: true
        type:
          type: string
          description: Is this Order Online or Offline? Online means shopper entered at
            checkout, offline means a phone order.
          nullable: true
        paymentStatus:
          type: string
          description: "Current status of payment, which can be \"Null,\"
            \"AwaitingCheck,\" \"AwaitingPayment,\" \"Paid,\" \"Authorized,\" or
            \"Void.\" \r

            System-supplied and read-only."
          nullable: true
        returnStatus:
          type: string
          description: System-supplied and read-only.
          nullable: true
        isEligibleForReturns:
          type: boolean
          description: Marker for determining if the order is a) complete or b) has some
            items that are shipped and not part of any other return
        totalCollected:
          type: number
          description: Total amount of money collected on the order via payments.
          format: double
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/OrderAttribute"
          nullable: true
        adjustment:
          $ref: "#/components/schemas/Adjustment"
        shippingAdjustment:
          $ref: "#/components/schemas/Adjustment"
        handlingAdjustment:
          $ref: "#/components/schemas/Adjustment"
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingDiscount"
          nullable: true
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          description: The list of historically-applied handling discounts.  The active
            one will have IsExcluded == false
          nullable: true
        handlingAmount:
          type: number
          description: Order level handling fees excluding any discounts.
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          description: Handling fees for the Order as well as OrderItems (e.g. if the
            Order has a $5 handling fee and an OrderItem has a $2 handling fee
            per item quantity and the quantity of items is 2 then the value in
            this property would be $9)
          format: double
          nullable: true
        handlingTotal:
          type: number
          description: Handling fees including any discounts.
          format: double
          nullable: true
        dutyAmount:
          type: number
          description: Order level duty or tariff amount. Does not take into account
            duties or tariffs specifically on items on the order
          format: double
          nullable: true
        dutyTotal:
          type: number
          description: Duties or tariffs for the Order as well as OrderItems (e.g. if the
            Order has a $5 duty or tariff for any reason and an OrderItem has a
            $2 duty or tariff then the value in this property would be $7)
          format: double
          nullable: true
        fulfillmentStatus:
          type: string
          description: "Current fulfillment status, which can be \"NotFulfilled,\",
            \"PartiallyFulfilled\", or \"Fufilled.\" \r

            System-supplied and read-only.  Values are available in
            FulfillmentStatusConst of this class."
          nullable: true
        submittedDate:
          type: string
          description: When the customer placed (submitted) the order.
          format: date-time
          nullable: true
        cancelledDate:
          type: string
          description: Date the order was cancelled.
          format: date-time
          nullable: true
        closedDate:
          type: string
          description: Date the order was closed. A closed order means that the order has
            been processed and items shipped.
          format: date-time
          nullable: true
        acceptedDate:
          type: string
          description: When the order was accepted by the merchant
          format: date-time
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/OrderNote"
          description: Internal notes that a merchant may add to the order. Maximum 250
            characters.
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          description: List of items in the order.
          nullable: true
        validationResults:
          type: array
          items:
            $ref: "#/components/schemas/OrderValidationResult"
          description: Validation results for the order when processes against validation
            capabilities.
          nullable: true
        billingInfo:
          $ref: "#/components/schemas/BillingInfo"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          description: "Payment transaction associated with this order. It is the entire
            payment interchange between the merchant \r

            who is forwarding the customer's payment information and
            the payment service who is authorizing and \r

            capturing payment. Payment can be either by credit card,
            check, or PayPal."
          nullable: true
        refunds:
          type: array
          items:
            $ref: "#/components/schemas/Refund"
          description: "Refunds associated with this order. A refund is a single exchange
            of money from merchant to customer\r

            that either encapsulates a refund to a credit card or an
            issuance of a store credit.\r

            Refunds does not reduce the 'amount collected' on an
            order and it is possible for refunds to exceed the total order
            amount."
          nullable: true
        packages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePackage"
          description: Shipping package associated with this order.
          nullable: true
        pickups:
          type: array
          items:
            $ref: "#/components/schemas/Pickup"
          description: Fulfillment pickups associated with this order.
          nullable: true
        digitalPackages:
          type: array
          items:
            $ref: "#/components/schemas/DigitalPackage"
          description: Fulfillment digital packages associated with this order.
          nullable: true
        shipments:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeShipment"
          description: Package shipments associated with this order.
          nullable: true
        isDraft:
          type: boolean
          description: Is this order a draft version
          nullable: true
        hasDraft:
          type: boolean
          description: Does this order have a draft version.
          nullable: true
        isImport:
          type: boolean
          description: Was this order initiated from an external system
          nullable: true
        importDate:
          type: string
          description: Date this item was imported
          format: date-time
          nullable: true
        isUnified:
          type: boolean
          description: Was this order created by the Unified platform.
        externalId:
          type: string
          description: An order number to link this order to an external system
          nullable: true
        couponCodes:
          type: array
          items:
            type: string
          description: Coupon codes associated with this order.  Only set on order import.
          nullable: true
        invalidCoupons:
          type: array
          items:
            $ref: "#/components/schemas/InvalidCoupon"
          description: A list of invalid coupons that were attempted on the order
          nullable: true
        amountAvailableForRefund:
          type: number
          description: "This property represents AmountCaptured - AmountRefunded via
            returns.\r

            It is read only."
          format: double
        amountRemainingForPayment:
          type: number
          description: "A counter for how much of the order total has not been claimed by
            payments.\r

            This is computed by Order.Total-(sum of Order.Payments
            where State is not voided/declined)"
          format: double
        amountRefunded:
          type: number
          description: "A counter for how much money has been issued in refunds.\r

            This calculated field does NOT include refunds issued in
            returns."
          format: double
        readyToCapture:
          type: boolean
        isOptInForSms:
          type: boolean
          description: Whether the shopper opts in to curbside text notifications.
      additionalProperties: false
      description: Order form.
    PaymentCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          nullable: true
      additionalProperties: false
      description: A collection of payment transactions.
    ReasonItemBase:
      type: object
      properties:
        reasonCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        needsMoreInfo:
          type: boolean
      additionalProperties: false
    RefundReasonItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ReasonItemBase"
      additionalProperties: false
    RefundReasonCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/RefundReasonItem"
          nullable: true
      additionalProperties: false
    OrderReturnableItem:
      type: object
      properties:
        productCode:
          type: string
          description: The product code of the associated item.
          nullable: true
        productName:
          type: string
          description: The name of the associated product.
          nullable: true
        shipmentNumber:
          type: integer
          description: Shipment Number associated with product
          format: int32
          nullable: true
        shipmentItemId:
          type: integer
          description: Shipment Item Id Number associated with product
          format: int32
          nullable: true
        quantityOrdered:
          type: integer
          description: The number of units ordered.
          format: int32
        quantityFulfilled:
          type: integer
          description: The number of units fulfilled.
          format: int32
        quantityReturned:
          type: integer
          description: The number if times this item configuration was found in live
            returns (not cancelled or rejected).
          format: int32
        quantityReturnable:
          type: integer
          format: int32
          readOnly: true
        fulfillmentStatus:
          type: string
          nullable: true
        orderItemId:
          type: string
          nullable: true
        orderLineId:
          type: integer
          format: int32
        orderItemOptionAttributeFQN:
          type: string
          nullable: true
        unitQuantity:
          type: integer
          format: int32
        parentProductCode:
          type: string
          nullable: true
        parentProductName:
          type: string
          nullable: true
      additionalProperties: false
    OrderReturnableItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderReturnableItem"
          nullable: true
      additionalProperties: false
      description: Collection of fulfillment information for items on an order.
    RepriceShipmentObject:
      type: object
      properties:
        originalShipment:
          $ref: "#/components/schemas/CommerceRuntimeShipment"
        newShipment:
          $ref: "#/components/schemas/CommerceRuntimeShipment"
      additionalProperties: false
    ShipmentAdjustment:
      type: object
      properties:
        itemAdjustment:
          type: number
          format: double
          nullable: true
        itemTaxAdjustment:
          type: number
          format: double
          nullable: true
        shippingAdjustment:
          type: number
          format: double
          nullable: true
        shippingTaxAdjustment:
          type: number
          format: double
          nullable: true
        handlingAdjustment:
          type: number
          format: double
          nullable: true
        handlingTaxAdjustment:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ShipmentItemAdjustment:
      type: object
      properties:
        overridePrice:
          type: number
          description: Unit price override
          format: double
          nullable: true
      additionalProperties: false
    SplitShipmentsObject:
      type: object
      properties:
        originalShipment:
          $ref: "#/components/schemas/CommerceRuntimeShipment"
        newShipments:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeShipment"
          nullable: true
      additionalProperties: false
    CancelReasonItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ReasonItemBase"
      additionalProperties: false
    CancelReasonCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CancelReasonItem"
          nullable: true
      additionalProperties: false
    OrderCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Order"
          nullable: true
      additionalProperties: false
      description: "Paged collection of orders. This is paged in case it's returning a
        long list the orders. \r

        for a store."
    OrderAction:
      type: object
      properties:
        actionName:
          type: string
          nullable: true
      additionalProperties: false
    PricingTaxContext:
      type: object
      properties:
        taxContextId:
          type: string
          nullable: true
        customerId:
          type: string
          nullable: true
        taxExemptId:
          type: string
          nullable: true
        originAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
        destinationAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
    PricingProductPropertyValue:
      type: object
      properties:
        value:
          nullable: true
        stringValue:
          type: string
          nullable: true
      additionalProperties: false
    PricingProductAttribute:
      type: object
      properties:
        inputType:
          type: string
          nullable: true
        valueType:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    PricingProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/PricingProductPropertyValue"
          nullable: true
        attributeDetail:
          $ref: "#/components/schemas/PricingProductAttribute"
        isHidden:
          type: boolean
          nullable: true
        isMultiValue:
          type: boolean
          nullable: true
      additionalProperties: false
    PricingDiscountTarget:
      type: object
      properties:
        type:
          type: string
          nullable: true
        includedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        excludedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        includedCategoriesOperator:
          type: string
          nullable: true
        excludedCategoriesOperator:
          type: string
          nullable: true
        includedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        excludedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        includeAllProducts:
          type: boolean
        shippingMethods:
          type: array
          items:
            type: string
          nullable: true
        shippingZones:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    PricingDiscountCondition:
      type: object
      properties:
        requiresCoupon:
          type: boolean
        couponCode:
          type: string
          nullable: true
        minimumQuantityProductsRequiredInCategories:
          type: integer
          format: int32
          nullable: true
        includedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        excludedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        minimumQuantityRequiredProducts:
          type: integer
          format: int32
          nullable: true
        includedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        excludedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        paymentWorkflows:
          type: array
          items:
            type: string
          nullable: true
        customerSegmentIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        minimumOrderAmount:
          type: number
          format: double
          nullable: true
        maximumOrderAmount:
          type: number
          format: double
          nullable: true
        minimumLifetimeValueAmount:
          type: number
          format: double
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        expirationDate:
          type: string
          format: date-time
          nullable: true
        minimumCategorySubtotalBeforeDiscounts:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PricingDiscount:
      type: object
      properties:
        discountId:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        friendlyDescription:
          type: string
          nullable: true
        amount:
          type: number
          format: double
        scope:
          type: string
          nullable: true
        maxRedemptions:
          type: integer
          format: int32
          nullable: true
        maximumUsesPerUser:
          type: integer
          format: int32
          nullable: true
        requiresAuthenticatedUser:
          type: boolean
        doesNotApplyToProductsWithSalePrice:
          type: boolean
        maximumRedemptionsPerOrder:
          type: integer
          format: int32
          nullable: true
        maximumDiscountValuePerOrder:
          type: number
          format: double
          nullable: true
        maxDiscountValuePerRedemption:
          type: number
          format: double
          nullable: true
        doesNotApplyToMultiShipToOrders:
          type: boolean
          nullable: true
        includedPriceLists:
          type: array
          items:
            type: string
          nullable: true
        redemptions:
          type: integer
          format: int32
        type:
          type: string
          nullable: true
        amountType:
          type: string
          nullable: true
        target:
          $ref: "#/components/schemas/PricingDiscountTarget"
        condition:
          $ref: "#/components/schemas/PricingDiscountCondition"
        expirationDate:
          type: string
          format: date-time
          nullable: true
          deprecated: true
        stackingLayer:
          type: integer
          format: int32
      additionalProperties: false
    PricingAppliedDiscount:
      type: object
      properties:
        impact:
          type: number
          format: double
        discount:
          $ref: "#/components/schemas/PricingDiscount"
        couponCode:
          type: string
          nullable: true
        couponSetId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    PricingAppliedLineItemDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedDiscount"
      properties:
        quantity:
          type: integer
          format: int32
        impactPerUnit:
          type: number
          format: double
        isForced:
          type: boolean
        normalizedImpact:
          type: number
          format: double
      additionalProperties: false
    PricingAppliedLineItemProductDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedLineItemDiscount"
      properties:
        appliesToSalePrice:
          type: boolean
      additionalProperties: false
    PricingAppliedLineItemShippingDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedLineItemDiscount"
      properties:
        shippingMethodCode:
          type: string
          nullable: true
      additionalProperties: false
    PricingTaxableLineItem:
      type: object
      properties:
        id:
          type: string
          nullable: true
        productCode:
          type: string
          nullable: true
        variantProductCode:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        productProperties:
          type: array
          items:
            $ref: "#/components/schemas/PricingProductProperty"
          nullable: true
        quantity:
          type: integer
          format: int32
        lineItemPrice:
          type: number
          format: double
        discountTotal:
          type: number
          format: double
          nullable: true
        discountedTotal:
          type: number
          format: double
          nullable: true
        shippingAmount:
          type: number
          format: double
        handlingAmount:
          type: number
          format: double
          nullable: true
        feeTotal:
          type: number
          format: double
          nullable: true
        isTaxable:
          type: boolean
          nullable: true
        reason:
          type: string
          nullable: true
        data:
          type: object
          nullable: true
        productDiscount:
          $ref: "#/components/schemas/PricingAppliedLineItemProductDiscount"
        shippingDiscount:
          $ref: "#/components/schemas/PricingAppliedLineItemShippingDiscount"
        productDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedLineItemProductDiscount"
          nullable: true
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedLineItemShippingDiscount"
          nullable: true
        originAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
        destinationAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
    PricingTaxAttribute:
      type: object
      properties:
        fullyQualifiedName:
          type: string
          nullable: true
        attributeDefinitionId:
          type: integer
          format: int32
          nullable: true
        values:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    PricingAppliedOrderShippingDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedDiscount"
      properties:
        shippingMethodCode:
          type: string
          nullable: true
      additionalProperties: false
    PricingTaxableOrder:
      type: object
      properties:
        orderDate:
          type: string
          format: date-time
        taxContext:
          $ref: "#/components/schemas/PricingTaxContext"
        lineItems:
          type: array
          items:
            $ref: "#/components/schemas/PricingTaxableLineItem"
          nullable: true
        shippingAmount:
          type: number
          format: double
        currencyCode:
          type: string
          nullable: true
        handlingFee:
          type: number
          format: double
        originalDocumentCode:
          type: string
          nullable: true
        orderId:
          type: string
          nullable: true
        orderNumber:
          type: integer
          format: int32
          nullable: true
        originalOrderDate:
          type: string
          format: date-time
        data:
          type: object
          nullable: true
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/PricingTaxAttribute"
          nullable: true
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedOrderShippingDiscount"
          nullable: true
        shippingDiscount:
          $ref: "#/components/schemas/PricingAppliedOrderShippingDiscount"
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedDiscount"
          nullable: true
        orderDiscount:
          $ref: "#/components/schemas/PricingAppliedDiscount"
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedDiscount"
          nullable: true
        handlingDiscount:
          $ref: "#/components/schemas/PricingAppliedDiscount"
        shippingMethodCode:
          type: string
          nullable: true
        shippingMethodName:
          type: string
          nullable: true
        taxRequestType:
          type: string
          nullable: true
      additionalProperties: false
    FulfillmentAction:
      type: object
      properties:
        actionName:
          type: string
          description: Name of the fulfillment action to perform
          nullable: true
        packageIds:
          type: array
          items:
            type: string
          description: Ids of packages to mark as fulfilled
          nullable: true
        pickupIds:
          type: array
          items:
            type: string
          description: Ids of pickups to mark as fulfilled
          nullable: true
        digitalPackageIds:
          type: array
          items:
            type: string
          description: Ids of digital packages to mark as fulfilled
          nullable: true
      additionalProperties: false
      description: Action to perform a fulfillment operation on the order.
    OrderItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          nullable: true
      additionalProperties: false
      description: Collection of items listed on the order.
    CommerceRuntimeAttributeMetadataItem:
      required:
        - key
        - value
      type: object
      properties:
        key:
          maxLength: 50
          type: string
        value:
          type: string
      additionalProperties: false
    CommerceRuntimeAttributeLocalizedContent:
      type: object
      properties:
        localeCode:
          maxLength: 8
          type: string
          nullable: true
        value:
          maxLength: 100
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeAttributeValidation:
      type: object
      properties:
        regularExpression:
          maxLength: 200
          type: string
          nullable: true
        minStringLength:
          type: integer
          format: int32
          nullable: true
        maxStringLength:
          type: integer
          format: int32
          nullable: true
        minNumericValue:
          type: number
          format: double
          nullable: true
        maxNumericValue:
          type: number
          format: double
          nullable: true
        minDateTime:
          type: string
          format: date-time
          nullable: true
        maxDateTime:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    AttributeValueLocalizedContent:
      required:
        - localeCode
        - value
      type: object
      properties:
        localeCode:
          type: string
        value:
          type: string
      additionalProperties: false
    CommerceRuntimeAttributeVocabularyValue:
      required:
        - value
      type: object
      properties:
        value:
          maxLength: 50
          type: string
        sequence:
          type: integer
          format: int32
          nullable: true
        isHidden:
          type: boolean
          nullable: true
        content:
          $ref: "#/components/schemas/AttributeValueLocalizedContent"
      additionalProperties: false
    CommerceRuntimeAttribute:
      required:
        - attributeCode
        - displayGroup
        - valueType
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        adminName:
          maxLength: 50
          type: string
          nullable: true
        namespace:
          maxLength: 200
          type: string
          nullable: true
        attributeCode:
          maxLength: 50
          type: string
        inputType:
          type: string
          nullable: true
        valueType:
          type: string
        dataType:
          type: string
          nullable: true
        attributeMetadata:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAttributeMetadataItem"
          nullable: true
        attributeFQN:
          type: string
          nullable: true
        content:
          $ref: "#/components/schemas/CommerceRuntimeAttributeLocalizedContent"
        validation:
          $ref: "#/components/schemas/CommerceRuntimeAttributeValidation"
        vocabularyValues:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        isActive:
          type: boolean
          nullable: true
        isRequired:
          type: boolean
          nullable: true
        isReadOnly:
          type: boolean
        isMultiValued:
          type: boolean
          nullable: true
        isVisible:
          type: boolean
          nullable: true
        order:
          type: integer
          format: int32
          nullable: true
        displayGroup:
          type: string
      additionalProperties: false
    CommerceRuntimeAttributeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAttribute"
          nullable: true
      additionalProperties: false
    Quote:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier.
          nullable: true
        name:
          type: string
          description: Name of the quote
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
        number:
          type: integer
          description: Auto generated number that is assigned to the quote when creation.
          format: int32
          nullable: true
        submittedDate:
          type: string
          description: When the customer placed (submitted) the Quote.
          format: date-time
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          description: List of items in the Quote.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        comments:
          type: array
          items:
            type: string
          description: Comments on a quote
          nullable: true
        expirationDate:
          type: string
          description: "When the quote will no longer be active. That is, the quote is
            considered abandoned. \r

            Date in UTC Date/Time."
          format: date-time
          nullable: true
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeDestination"
          nullable: true
        userId:
          type: string
          nullable: true
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        email:
          type: string
          description: Email address for checkout
          nullable: true
        customerTaxId:
          type: string
          description: The customers tax ID. If Customer Account ID exists in the system,
            will set this.
          nullable: true
          readOnly: true
        isTaxExempt:
          type: boolean
          description: Unique identifier of the customer account.
          nullable: true
          readOnly: true
        currencyCode:
          type: string
          description: ISO Currency Code.
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the checkout
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        locationCode:
          type: string
          description: Identifies the location at which the order was placed if the order
            was placed externally.
          nullable: true
        ipAddress:
          type: string
          description: IP address of the user placing the order. (User or customer?)
          nullable: true
        sourceDevice:
          type: string
          description: Source device of the user placing the order. (User or customer?)
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        subTotal:
          type: number
          description: Subtotal before any coupon codes, taxes, fees, etc.
          format: double
        itemLevelProductDiscountTotal:
          type: number
          description: The total value of item-level product discounts.
          format: double
        orderLevelProductDiscountTotal:
          type: number
          description: The total value of order-level (group-level) product discounts.
          format: double
        itemTaxTotal:
          type: number
          description: Total tax on products.
          format: double
        itemTotal:
          type: number
          description: The total product cost, accounting for discounts and tax.
          format: double
        total:
          type: number
          description: Final total
          format: double
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingDiscount"
          nullable: true
        itemLevelShippingDiscountTotal:
          type: number
          format: double
        orderLevelShippingDiscountTotal:
          type: number
          format: double
        shippingAmount:
          type: number
          format: double
        shippingSubTotal:
          type: number
          format: double
        shippingTax:
          type: number
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          format: double
        shippingTotal:
          type: number
          format: double
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        itemLevelHandlingDiscountTotal:
          type: number
          format: double
        orderLevelHandlingDiscountTotal:
          type: number
          format: double
        handlingAmount:
          type: number
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          format: double
        handlingTax:
          type: number
          format: double
          nullable: true
        handlingTaxTotal:
          type: number
          format: double
        handlingTotal:
          type: number
          format: double
        dutyAmount:
          type: number
          format: double
          nullable: true
        dutyTotal:
          type: number
          format: double
        feeTotal:
          type: number
          format: double
        shippingMethodCode:
          type: string
          nullable: true
        shippingMethodName:
          type: string
          nullable: true
      additionalProperties: false
    QuoteCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Quote"
          nullable: true
      additionalProperties: false
    ReturnReason:
      type: object
      properties:
        reason:
          type: string
          description: The reason this item has been returned.
          nullable: true
        quantity:
          type: integer
          description: The quantity associated with this Reason.
          format: int32
      additionalProperties: false
      description: Represents a quantity associated with a given reason for a return
    ReturnBundle:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code that uniquely identifies the product.
          nullable: true
        quantity:
          type: integer
          description: The amount of this particular product in a bundle that is in this
            Return
          format: int32
      additionalProperties: false
    ReturnItem:
      type: object
      properties:
        id:
          type: string
          description: The identifer of the return
          nullable: true
        orderItemId:
          type: string
          description: The OrderItem that this ReturnItem is associated with. Either the
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.Product or the
            OrderItemId must be present.
          nullable: true
        orderLineId:
          type: integer
          description: The OrderLineId that this ReturnItem is associated with. If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.OrderItemId is
            present, the OrderLineId should be present also.
          format: int32
          nullable: true
        orderItemOptionAttributeFQN:
          type: string
          description: If this item refers to a product extra, provide the item's
            corresponding OptionAttributeFQN.
          nullable: true
        product:
          $ref: "#/components/schemas/CommerceRuntimeProduct"
        reasons:
          type: array
          items:
            $ref: "#/components/schemas/ReturnReason"
          description: "For a given return reason (Damaged, Defective, MissingParts,
            DifferentExpectations, Late, NoLongerWanted, Other),\r

            how many of the above OrderItem are to be
            replaced.  This value is provided by the Shopper when they request a
            Return."
          nullable: true
        excludeProductExtras:
          type: boolean
          description: "If this return item refers to a product/bundle that has product
            extras, this specifies whether those child items should be included
            or excluded.\r

            For backward compatibility, a null value will be treated
            as false, i.e. include the extras."
          nullable: true
        returnType:
          type: string
          description: Specifies whether the requested resolution for this item is Refund
            or Replace.
          nullable: true
        returnNotRequired:
          type: boolean
          description: "Specifies whether this item should be returned to the merchant,
            e.g. if the item is irreparably damaged and it's not worth shipping
            back.\r

            Even if this is set to true,
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityShipped
            should still be set to the quantity of items involved in the
            return."
        quantityReceived:
          type: integer
          description: "The amount of this item actually received from the shopper. It may
            differ from the sum of the ReturnReasons.\r

            This is populated by the system when the Receive action
            is performed."
          format: int32
        receiveStatus:
          type: string
          description: "Describes the receive status of this item.\r

            If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnNotRequired
            is {true}, then this should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatus\
            Const.NOT_REQUESTED.\r

            Otherwise the value should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatus\
            Const.RECEIVED or
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatus\
            Const.WAITING depending on
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReceived."
          nullable: true
        quantityShipped:
          type: integer
          description: The quantity of this item fulfilled on the parent order.
          format: int32
        replaceStatus:
          type: string
          description: "Describes the replace status of this item.\r

            If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REFUN\
            D, then this should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatus\
            Const.NOT_REQUESTED.\r

            Otherwise the value should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatus\
            Const.REPLACED or
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatus\
            Const.NOT_REPLACED depending on
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReplaced."
          nullable: true
        quantityRestockable:
          type: integer
          description: "Of the quantity returned, how many of this item can be added back
            into the inventory? This item is set by the merchant via an
            UpdateReturn call.\r

            It is used during the Restock action to set some
            quantity of this item back into the inventory management system."
          format: int32
        quantityRestocked:
          type: integer
          description: Field to specify How many items added to inventory
          format: int32
        refundAmount:
          type: number
          description: If a refund is issued for the return, how much of the refund amount
            is for this particular item.
          format: double
          nullable: true
        refundStatus:
          type: string
          description: "Describes the refund status of this item.\r

            If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REPLA\
            CE, then this should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusC\
            onst.NOT_REQUESTED.\r

            Otherwise the value should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusC\
            onst.REFUNDED or
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusC\
            onst.NOT_REFUNDED depending on
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.RefundAmount."
          nullable: true
        quantityReplaced:
          type: integer
          description: "Specifies the quantity of this item that has been marked as
            replaced, i.e. it has been used to generate a replacement order for
            the return.\r

            Note that the quantity replaced may not line up with the
            quantity of the item actually sent back to the shopper,\r

            such as in the case of an exchange, e.g. swapping a
            medium shirt for a large shirt."
          format: int32
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/OrderNote"
          description: Any merchant-supplied notes for this ReturnItem.
          nullable: true
        productLossAmount:
          type: number
          description: The loss incurred of the returned products, used for accounting
            purposes.
          format: double
          nullable: true
        productLossTaxAmount:
          type: number
          description: The tax on the returned products, used for accounting purposes.
          format: double
          nullable: true
        shippingLossAmount:
          type: number
          description: The loss incurred of the returned product shipping, used for
            accounting purposes.
          format: double
          nullable: true
        shippingLossTaxAmount:
          type: number
          description: The tax on the returned product shipping, used for accounting
            purposes.
          format: double
          nullable: true
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/ReturnBundle"
          description: Deprecated. Not used.
          nullable: true
          deprecated: true
        totalWithoutWeightedShippingAndHandling:
          type: number
          description: Taxable Subtotal including Weighted Order amounts
          format: double
          nullable: true
        totalWithWeightedShippingAndHandling:
          type: number
          description: Line item total with line item, Tax, Weighted Tax with Weighted
            shipping and handling costs
          format: double
          nullable: true
        shipmentItemId:
          type: integer
          description: The identifer of the item
          format: int32
          nullable: true
        shipmentNumber:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
      description: ""
    Return:
      type: object
      properties:
        id:
          type: string
          description: Unique Identifier for this Return
          nullable: true
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        availableActions:
          type: array
          items:
            type: string
          description: Current available actions.
          nullable: true
        returnNumber:
          type: integer
          description: A human-facing identifier that is unique within a tenant to
            represent the sequential ordering of Returns.
          format: int32
          nullable: true
        contact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        locationCode:
          type: string
          description: Location code where the return was made/processed
          nullable: true
        originalOrderId:
          type: string
          description: The Id of the Order that this Return was generated from.
          nullable: true
        originalOrderNumber:
          type: integer
          description: The order number that this return was generated from.
          format: int32
          nullable: true
        returnOrderId:
          type: string
          description: The Id of the Order that represents the items shipped to the
            shopper for this Return.
          nullable: true
        currencyCode:
          type: string
          description: ISO Currency Code. Currently, only USD is supported.
          nullable: true
        status:
          type: string
          description: "The Status of the Return.  Valid values are \r

            \    Null, Created, ReturnAuthorized, ReturnPending,
            ReturnReceived, ReplacementShipped, Cancelled, and Closed."
          nullable: true
        receiveStatus:
          type: string
          description: "A rollup status describing whether the return items have been
            received.\r

            See
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReceiveStatusConst for
            possible values."
          nullable: true
        refundStatus:
          type: string
          description: "A rollup status describing whether the return items have been
            refunded.\r

            See
            Mozu.CommerceRuntime.Contracts.Returns.Return.RefundStatusConst for
            possible values."
          nullable: true
        replaceStatus:
          type: string
          description: "A rollup status describing whether the return items have been
            marked as replaced.\r

            See
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReplaceStatusConst for
            possible values."
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/ReturnItem"
          description: The list of items being returned by the Shopper and replaced by the
            Merchant in this Return.
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/OrderNote"
          description: Any Merchant Notes for this Return.
          nullable: true
        rmaDeadline:
          type: string
          description: The deadline for a Shopper to ship the items in this Return to the
            Merchant.
          format: date-time
          nullable: true
        returnType:
          type: string
          description: Specifies whether this Return was a Refund or a Replace
          nullable: true
        refundAmount:
          type: number
          description: If this Return was refunded,  how much was credited to the shopper?
            This amount is summed from the refund payments.
          format: double
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          description: Any Refund payments associated with this Return.
          nullable: true
        packages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePackage"
          description: Shipping package associated with this return.
          nullable: true
        productLossTotal:
          type: number
          description: "The Total Loss Amount is equal to the (cost of item) * quantity of
            item returned.\r

            It is meant to represent the product value to the
            merchant of the items damaged or returned by a shopper."
          format: double
          nullable: true
        shippingLossTotal:
          type: number
          description: "The Shipping Loss Total is equal to the (shipping cost of item) *
            quantity of item returned.\r

            It is meant to represent the product value to the
            merchant of the items damaged or returned by a shopper."
          format: double
          nullable: true
        lossTotal:
          type: number
          description: Sum of the ProductLossTotal and the ShippingLossTotal.
          format: double
          nullable: true
        productLossTaxTotal:
          type: number
          description: The Total Taxes assessed on the product loss.
          format: double
          nullable: true
        shippingLossTaxTotal:
          type: number
          description: The Total Taxes assessed on the shipping loss.
          format: double
          nullable: true
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
          nullable: true
        userId:
          type: string
          description: Unique identifier of the current user.
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the return.
          nullable: true
        actionRequired:
          type: boolean
          description: To find Returns that have failed to refund.
        isUnified:
          type: boolean
          description: Was this return created by the Unified platform.
      additionalProperties: false
      description: ""
    ReturnCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Return"
          nullable: true
      additionalProperties: false
      description: "Paged collection of returns. This is paged in case it's returning
        a long list of returns. \r

        for a store."
    ReturnAction:
      type: object
      properties:
        actionName:
          type: string
          description: The name of the action to perform, query the Return for Available
            actions to get valid values. This is required.
          nullable: true
        returnIds:
          type: array
          items:
            type: string
          description: The list of Returns upon which to perform the action. This is
            required.
          nullable: true
      additionalProperties: false
      description: ""
    ReasonCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ReturnItemSpecifier:
      type: object
      properties:
        returnItemId:
          type: string
          nullable: true
        quantity:
          type: integer
          format: int32
      additionalProperties: false
    RestockableReturnItem:
      type: object
      properties:
        returnItemId:
          type: string
          nullable: true
        quantity:
          type: integer
          format: int32
        locationCode:
          type: string
          nullable: true
      additionalProperties: false
    CarrierServiceGenerateLabelResponse:
      type: object
      properties:
        imageURL:
          type: string
          nullable: true
        integratorId:
          type: string
          nullable: true
        price:
          type: number
          format: double
          nullable: true
        trackingNumber:
          type: string
          nullable: true
      additionalProperties: false
    ReturnItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ReturnItem"
          nullable: true
      additionalProperties: false
      description: Collection of return items listed on the order.
    WishlistItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceItem"
      properties:
        id:
          type: string
          description: Unique identifier of the wishlist line item. System-supplied and
            read-only.
          nullable: true
        comments:
          type: string
          description: Comments for the wishlist item that are entered by the wishlist owner
          nullable: true
        priorityType:
          type: string
          description: Wishlist item priority that is a hint to how much this item is
            needed or desired
          nullable: true
        purchasableStatusType:
          type: string
          description: Is the item purchasable?
          nullable: true
      additionalProperties: false
      description: A single line item of an order.
    Wishlist:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceAggregate"
      properties:
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        typeTag:
          type: string
          description: Open-ended Wishlist type, e.g. giftlist, gift, wish, wishlist,
            wedding, baby.  If the merchant does not need this level of
            granularity this is always null.
          nullable: true
        name:
          type: string
          description: Name of the list that is display or potentially shared (e.g.
            friends and family may view this description if the list is public
            and the list owner may see this description when viewing the list)
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/WishlistItem"
          description: List of items in the wishlist.
          nullable: true
        privacyType:
          type: string
          description: Is the wishlist public, viewable only through a shared link, or
            private (only the owner of the list may view the wishlist)?
          nullable: true
        sortOrder:
          type: integer
          description: The wishlist sort order.  Useful for scenarios where there is a
            default wishlist and other wishlists or arbitrary ordering
          format: int32
          nullable: true
        version:
          type: string
          description: Version for concurrency purposes
          nullable: true
        isImport:
          type: boolean
          description: Was this object imported from an external system?
          nullable: true
        importDate:
          type: string
          description: Date this item was imported
          format: date-time
          nullable: true
        externalId:
          type: string
          description: Id in an external system this item may have been imported from
          nullable: true
      additionalProperties: false
      description: Details of the wishlist, items listed in the wishlist, and any
        system messages.
    WishlistCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Wishlist"
          nullable: true
      additionalProperties: false
      description: Paged collection of wishlists.
    WishlistItemCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/WishlistItem"
          nullable: true
      additionalProperties: false
      description: Paged collection of wishlists.
    AddressValidationRequest:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
      description: Address Validation Request
    AddressValidationResponse:
      type: object
      properties:
        addressCandidates:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAddress"
          description: Address Candidates
          nullable: true
      additionalProperties: false
      description: Address Validation Response
    CustomerUserAuthInfo:
      type: object
      properties:
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    CurrencyAmount:
      type: object
      properties:
        currencyCode:
          type: string
          description: Currency code for the amount of the order. Currently, only "USD" is
            supported.
          nullable: true
        amount:
          type: number
          description: Total amount of the order. Currently, only US dollar amounts are
            supported.
          format: double
      additionalProperties: false
      description: The currency code and amount of an order listed in the order
        history of a customer account. Currently, only USD is supported.
    CommerceSummary:
      type: object
      properties:
        totalOrderAmount:
          $ref: "#/components/schemas/CurrencyAmount"
        orderCount:
          type: integer
          description: Number of orders listed in the order history of a customer account.
          format: int32
        lastOrderDate:
          type: string
          description: When the last order was placed.
          format: date-time
          nullable: true
        wishlistCount:
          type: integer
          description: Number of wishlists listed in the wishlist count of a customer
            account
          format: int32
        visitsCount:
          type: integer
          description: Number of visits for this customer across the entire tenant.
          format: int32
      additionalProperties: false
      description: Commerce (orders and wishlists) on a customer account which lists
        all the orders the customer has made with the order date, order amount,
        and status. Includes cancellations and returns.  Also includes wishlist
        information.
    ContactType:
      type: object
      properties:
        name:
          type: string
          nullable: true
        isPrimary:
          type: boolean
      additionalProperties: false
    CustomerContact:
      type: object
      properties:
        accountId:
          type: integer
          format: int32
        types:
          type: array
          items:
            $ref: "#/components/schemas/ContactType"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        faxNumber:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        id:
          type: integer
          format: int32
          nullable: true
        email:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        middleNameOrInitial:
          type: string
          nullable: true
        lastNameOrSurname:
          type: string
          nullable: true
        companyOrOrganization:
          type: string
          nullable: true
        phoneNumbers:
          $ref: "#/components/schemas/CommerceRuntimePhone"
        address:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
      description: CustomerContact information for a customer account including the
        name, company, phone numbers, email addresses, and billing and shipping
        addresses (if supplied).
    CustomerNote:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the note.
          format: int32
        content:
          type: string
          description: Content of the note that the merchant added.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Note added to the customer account. Merchants can add internal
        notes, for example, to keep track of a customer's interests or
        complaints.
    CustomerAttribute:
      type: object
      properties:
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        fullyQualifiedName:
          type: string
          nullable: true
        attributeDefinitionId:
          type: integer
          format: int32
          nullable: true
        values:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    CustomerCustomerSegment:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the customer segment.
          format: int32
        code:
          type: string
          description: Unique identifier of the customer segment.
          nullable: true
        name:
          type: string
          description: Name of the customer segment.
          nullable: true
        description:
          type: string
          description: Description of the customer segment.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: A customer segment.
    AccountBase:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the account, also known as a customer number.
          format: int32
        customerSet:
          type: string
          nullable: true
        commerceSummary:
          $ref: "#/components/schemas/CommerceSummary"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/CustomerContact"
          description: List of contacts for this account. A customer account can have
            multiple contacts for billing and shipping addresses.
          nullable: true
        companyOrOrganization:
          type: string
          description: The company or organization name for an account.
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/CustomerNote"
          description: "List of notes for the account. Merchants use these internal notes,
            for example, to make a note of a customer's interests or complaints.
            \r

            Notes are available only from the merchant's view,
            customers cannot view these notes."
          nullable: true
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAttribute"
          description: List of attributes for the account.
          nullable: true
        segments:
          type: array
          items:
            $ref: "#/components/schemas/CustomerCustomerSegment"
          description: "List of segments assigned to account to indicate. Merchants create
            segments, for example, to manage discounts or assign VIP status. \r

            Then they assign the account to the segment. An account
            can belong to several segments or none at all."
          nullable: true
        taxExempt:
          type: boolean
        taxId:
          type: string
          nullable: true
        externalId:
          type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        customerSinceDate:
          type: string
          format: date-time
          nullable: true
        accountType:
          type: string
          nullable: true
      additionalProperties: false
      description: "Customer account. Customers provide contact information, view
        order history, and set email preferences on their account. \r

        Merchants can edit accounts to add internal notes or assign them
        to segments."
    CustomerAccount:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountBase"
      properties:
        emailAddress:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        localeCode:
          type: string
          nullable: true
        userId:
          type: string
          description: Unique identifier of the user who is currently logged in. This is
            null if the user is anonymous (not logged in).  Unicode data with a
            maximum length of 55 characters.
          nullable: true
        isAnonymous:
          type: boolean
        isLocked:
          type: boolean
        isActive:
          type: boolean
        acceptsMarketing:
          type: boolean
          description: If true, the customer prefers to receive marketing material such as
            newsletters or email offers.
        hasExternalPassword:
          type: boolean
          description: Indicates if an external password is set on this account
      additionalProperties: false
      description: "Customer account. Customers provide contact information, view
        order history, and set email preferences on their account. \r

        Merchants can edit accounts to add internal notes or assign them
        to segments."
    CustomerAuthTicket:
      type: object
      properties:
        customerAccount:
          $ref: "#/components/schemas/CustomerAccount"
        accessToken:
          type: string
          nullable: true
        accessTokenExpiration:
          type: string
          format: date-time
        refreshToken:
          type: string
          nullable: true
        refreshTokenExpiration:
          type: string
          format: date-time
        userId:
          type: string
          nullable: true
        jwtAccessToken:
          type: string
          nullable: true
      additionalProperties: false
    CustomerAttributeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAttribute"
          nullable: true
      additionalProperties: false
      description: Collection of notes added to a customer account returned as a
        whole. A collection is not paged.
    UserScope:
      type: object
      properties:
        type:
          type: string
          nullable: true
        id:
          type: integer
          format: int32
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    UserRole:
      type: object
      properties:
        userId:
          type: string
          nullable: true
        assignedInScope:
          $ref: "#/components/schemas/UserScope"
        roleId:
          type: integer
          format: int32
        roleName:
          type: string
          nullable: true
        roleTags:
          type: array
          items:
            type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    B2BUser:
      type: object
      properties:
        emailAddress:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        localeCode:
          type: string
          nullable: true
        userId:
          type: string
          description: Unique identifier of the user who is currently logged in. This is
            null if the user is anonymous (not logged in).  Unicode data with a
            maximum length of 55 characters.
          nullable: true
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
          nullable: true
        isLocked:
          type: boolean
        isActive:
          type: boolean
        isRemoved:
          type: boolean
        acceptsMarketing:
          type: boolean
          description: If true, the customer prefers to receive marketing material such as
            newsletters or email offers.
        hasExternalPassword:
          type: boolean
          description: Indicates if an external password is set on this account
      additionalProperties: false
      description: "Customer account. Customers provide contact information, view
        order history, and set email preferences on their account. \r

        Merchants can edit accounts to add internal notes or assign them
        to segments."
    B2BAccount:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountBase"
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/B2BUser"
          nullable: true
        isActive:
          type: boolean
          nullable: true
        priceList:
          type: string
          nullable: true
      additionalProperties: false
      description: "Customer account. Customers provide contact information, view
        order history, and set email preferences on their account. \r

        Merchants can edit accounts to add internal notes or assign them
        to segments."
    B2BAccountCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/B2BAccount"
          nullable: true
      additionalProperties: false
      description: Collection of all the B2B Accounts returned as a whole. A
        collection is not paged.
    B2BUserAndAuthInfo:
      type: object
      properties:
        b2BUser:
          $ref: "#/components/schemas/B2BUser"
        externalPassword:
          type: string
          nullable: true
        isImport:
          type: boolean
      additionalProperties: false
    B2BUserCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/B2BUser"
          nullable: true
      additionalProperties: false
      description: Collection of users in a B2B account.
    CustomerUserRoleCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
          nullable: true
      additionalProperties: false
    CreditAuditEntry:
      type: object
      properties:
        activityType:
          type: string
          description: Mozu.Customer.Contracts.Credit.CreditAuditEntry.CreditAuditActivityType
          nullable: true
        details:
          type: string
          description: Detials of what was done
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        activityTypeId:
          type: integer
          format: int32
      additionalProperties: false
      description: "Log entry for any change made to a Credit.\r

        \r

        The system will generate all entries.  Contract is for display
        only.\r

        All values are ReadOnly."
    CreditAuditEntryCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CreditAuditEntry"
          nullable: true
      additionalProperties: false
    Credit:
      type: object
      properties:
        code:
          type: string
          description: "Unique number identifier representing this credit.\r

            Number may be generated or set by the Tenant\r

            Number is unique within the Tenant context.\r

            ReadOnly after credit creation"
          nullable: true
        activationDate:
          type: string
          description: "Date the credit was activated.  Null if card is not active.\r

            Credits must be activated before they can be used.\r

            ReadOnly after activation"
          format: date-time
          nullable: true
        creditType:
          type: string
          description: "Type of Credit.\r

            Mozu.Customer.Contracts.Credit.Credit.CreditTypeConst\r

            Required.\r

            ReadOnly after credit creation"
          nullable: true
        customCreditType:
          type: string
          description: "Name of custom credit type\r

            Optional."
          nullable: true
        currencyCode:
          type: string
          description: Currency Code
          nullable: true
        initialBalance:
          type: number
          description: "Balance assigned when credit was initially created.\r

            May be zero and updated later.\r

            ReadOnly after intial credit creation"
          format: double
          nullable: true
        currentBalance:
          type: number
          description: "Do we want to track this here?\r

            Current Balance\r

            ReadOnly"
          format: double
          nullable: true
        expirationDate:
          type: string
          description: "Date after which this credit is no longer valid\r

            Optional\r

            Defaults to 365 days"
          format: date-time
          nullable: true
        customerId:
          type: integer
          description: "Id of the N:Mozu.Customer\r

            that this credit is assigned to.\r

            Optional."
          format: int32
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        creditTypeId:
          type: integer
          format: int32
      additionalProperties: false
      description: Represetation of a store credit or gift card.
    CreditCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Credit"
          nullable: true
      additionalProperties: false
    CreditTransaction:
      type: object
      properties:
        id:
          type: integer
          description: "Id unique within the tenant\r

            ReadOnly"
          format: int32
          nullable: true
        transactionType:
          type: string
          description: "Mozu.Customer.Contracts.Credit.CreditTransaction.CreditTransactio\
            nType\r

            \            Requried"
          nullable: true
        comments:
          type: string
          description: Comments about the transaction.  Depending on the user interface,
            these comments may be readable by authorized users or customers.
          nullable: true
        impactAmount:
          type: number
          description: "Amount to apply to Credit Balance\r

            Required"
          format: double
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        orderId:
          type: string
          nullable: true
        data:
          description: Custom data for credit transactions
          nullable: true
      additionalProperties: false
      description: Credit Transactions are used to make adjustments to a Credit Balance
    CreditTransactionCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CreditTransaction"
          nullable: true
      additionalProperties: false
    Card:
      type: object
      properties:
        id:
          type: string
          description: Card ID from Payment Service
          nullable: true
        nameOnCard:
          type: string
          nullable: true
        cardType:
          type: string
          nullable: true
        expireMonth:
          type: integer
          format: int32
          nullable: true
        expireYear:
          type: integer
          format: int32
          nullable: true
        cardNumberPart:
          type: string
          nullable: true
        contactId:
          type: integer
          format: int32
        isDefaultPayMethod:
          type: boolean
      additionalProperties: false
    CardCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Card"
          nullable: true
      additionalProperties: false
    CustomerContactCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerContact"
          nullable: true
      additionalProperties: false
      description: Collection of contacts returned as a whole.
    CustomerAccountCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAccount"
          nullable: true
      additionalProperties: false
      description: Collection of all the merchant's customers returned as a whole. A
        collection is not paged.
    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          nullable: true
        visitId:
          type: string
          nullable: true
        transactionType:
          type: string
          nullable: true
        interactionType:
          type: string
          nullable: true
        amount:
          type: number
          format: double
        date:
          type: string
          format: date-time
        currencyCode:
          type: string
          nullable: true
      additionalProperties: false
    CustomerNoteCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerNote"
          nullable: true
      additionalProperties: false
      description: Collection of notes added to a customer account returned as a
        whole. A collection is not paged.
    CustomerSegmentCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerCustomerSegment"
          nullable: true
      additionalProperties: false
      description: Collection of customer segements returned as a whole. A collection
        is not paged.
    CustomerAuditEntry:
      type: object
      properties:
        customerAccountId:
          type: integer
          description: Customer associated with this entry
          format: int32
        customerAuditEntryId:
          type: integer
          description: Id of this entry
          format: int32
        entryDate:
          type: string
          description: Date of the Entry
          format: date-time
        entryUser:
          type: string
          description: User ID associated with this Entry
          nullable: true
        application:
          type: string
          description: Applicattion associated with this entry
          nullable: true
        site:
          type: string
          description: Site associated wit this entry
          nullable: true
        description:
          type: string
          description: Description of the change (UI Displayable)
          nullable: true
        fieldPath:
          type: string
          description: Path of the field value being changed (e.g.
            /Customer/Contacts/1/FirstName)
          nullable: true
        oldValue:
          type: string
          description: Original value before this event
          nullable: true
        newValue:
          type: string
          description: New Value after this event
          nullable: true
      additionalProperties: false
    CustomerAuditEntryCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAuditEntry"
          nullable: true
      additionalProperties: false
    CustomerPurchaseOrderPaymentTerm:
      type: object
      properties:
        siteId:
          type: integer
          format: int32
        code:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    CustomerPurchaseOrderAccount:
      type: object
      properties:
        id:
          type: integer
          format: int32
        accountId:
          type: integer
          format: int32
        isEnabled:
          type: boolean
        creditLimit:
          type: number
          format: double
        availableBalance:
          type: number
          format: double
        totalAvailableBalance:
          type: number
          format: double
        overdraftAllowance:
          type: number
          format: double
          nullable: true
        overdraftAllowanceType:
          type: string
          description: Indicates type of overdraft. Possible values are "Percent" and
            "Amount"
          nullable: true
        customerPurchaseOrderPaymentTerms:
          type: array
          items:
            $ref: "#/components/schemas/CustomerPurchaseOrderPaymentTerm"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    PurchaseOrderTransaction:
      type: object
      properties:
        customerPurchaseOrderAccountId:
          type: integer
          description: Unique identifier for Customer purchase order account
          format: int32
        externalId:
          type: string
          nullable: true
        siteId:
          type: integer
          description: Site Id associated with transaction log
          format: int32
        tenantId:
          type: integer
          description: Tenant Id associated with transaction log
          format: int32
        transactionDate:
          type: string
          description: Date when the transaction was made on a purchase order account
          format: date-time
        orderId:
          type: string
          description: Unique identifier for an order
          nullable: true
        purchaseOrderNumber:
          type: string
          description: Purchase order number
          nullable: true
        transactionAmount:
          type: number
          description: Transaction amount in transaction log for a purchase order account
          format: double
        creditLimit:
          type: number
          description: Maximum credit available on a purchase order account
          format: double
        additionalTransactionDetail:
          type: string
          description: Any additional transaction detail other than transaction description
          nullable: true
        availableBalance:
          type: number
          description: Current available balance on Purchase Order account
          format: double
        transactionTypeId:
          type: integer
          description: " Purchase Order transaction type\r

            1 - Line of Credit Change\r

            2 - Order Submitted\r

            3 - Payment Collected\r

            4 - Payment Voided\r

            5 - Payment Refund\r

            6 - Manual Adjustment"
          format: int32
        transactionDescription:
          type: string
          description: "Purchase Order transaction description\r

            Line of Credit Change\r

            Order Submitted\r

            Payment Collected\r

            Payment Voided\r

            Payment Refund\r

            Manual Adjustment"
          nullable: true
        author:
          type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Customer purchase order transaction log
    PurchaseOrderTransactionCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderTransaction"
          nullable: true
      additionalProperties: false
      description: "Collection of purchase order transactions returned as a whole. \r

        A collection is not paged."
    CustomerPurchaseOrderAccountCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerPurchaseOrderAccount"
          nullable: true
      additionalProperties: false
    LoginState:
      type: object
      properties:
        isPasswordChangeRequired:
          type: boolean
        lastPasswordChangeOn:
          type: string
          format: date-time
          nullable: true
        isLocked:
          type: boolean
        lastLockedOn:
          type: string
          format: date-time
          nullable: true
        failedLoginAttemptCount:
          type: integer
          format: int32
        remainingLoginAttempts:
          type: integer
          format: int32
        firstFailedLoginAttemptOn:
          type: string
          format: date-time
          nullable: true
        lastLoginOn:
          type: string
          format: date-time
          nullable: true
        createdOn:
          type: string
          format: date-time
          nullable: true
        updatedOn:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    CustomerPasswordInfo:
      type: object
      properties:
        oldPassword:
          type: string
          description: Old password.
          nullable: true
        newPassword:
          type: string
          description: New password.
          nullable: true
        externalPassword:
          type: string
          description: The External Password, typically used for imports in conjunction
            with a custom action
          nullable: true
      additionalProperties: false
      description: Old password and new password.
    AccountPasswordInfo:
      type: object
      properties:
        accountId:
          type: integer
          description: The Id of the Account which this password info applies
          format: int32
        userId:
          type: string
          description: If the account has multiple users, provide the Id of a specific user
          nullable: true
        unlockAccount:
          type: boolean
          description: Indicates to unlock the Account
          nullable: true
        passwordInfo:
          $ref: "#/components/schemas/CustomerPasswordInfo"
      additionalProperties: false
      description: Password information for an Account
    AccountPasswordInfoCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/AccountPasswordInfo"
          nullable: true
      additionalProperties: false
    ChangePasswordResult:
      type: object
      properties:
        accountId:
          type: integer
          format: int32
        succeeded:
          type: boolean
        errorMessage:
          type: string
          nullable: true
      additionalProperties: false
    ChangePasswordResultCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ChangePasswordResult"
          nullable: true
      additionalProperties: false
    CustomerResetPasswordInfo:
      type: object
      properties:
        emailAddress:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        customerSetCode:
          type: string
          nullable: true
      additionalProperties: false
    CustomerLoginInfo:
      type: object
      properties:
        emailAddress:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        externalPassword:
          type: string
          nullable: true
        isImport:
          type: boolean
          nullable: true
      additionalProperties: false
    CustomerAccountAndAuthInfo:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/CustomerAccount"
        password:
          type: string
          nullable: true
        externalPassword:
          type: string
          nullable: true
        isImport:
          type: boolean
      additionalProperties: false
    CustomerSetSite:
      type: object
      properties:
        siteId:
          type: integer
          format: int32
        customerSetCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    CustomerSetAggregateInfo:
      type: object
      properties:
        customerCount:
          type: integer
          format: int32
      additionalProperties: false
    CustomerSet:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the customer segment.
          nullable: true
        name:
          type: string
          description: Name of the customer segment.
          nullable: true
        description:
          type: string
          description: Description of the customer segment.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        sites:
          type: array
          items:
            $ref: "#/components/schemas/CustomerSetSite"
          nullable: true
        isDefault:
          type: boolean
        aggregateInfo:
          $ref: "#/components/schemas/CustomerSetAggregateInfo"
      additionalProperties: false
      description: A customer segment.
    CustomerSetCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CustomerSet"
          nullable: true
      additionalProperties: false
    Visit:
      type: object
      properties:
        id:
          type: string
          nullable: true
        accountId:
          type: integer
          format: int32
          nullable: true
        type:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
          nullable: true
        userId:
          type: string
          nullable: true
        webSiteId:
          type: integer
          format: int32
          nullable: true
        webReferrer:
          type: string
          nullable: true
        webSessionId:
          type: string
          nullable: true
        webUserAgent:
          type: string
          nullable: true
        browserLocationCode:
          type: string
          nullable: true
        locationCode:
          type: string
          nullable: true
      additionalProperties: false
    VisitCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Visit"
          nullable: true
      additionalProperties: false
    InStockNotificationSubscription:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          format: int32
          nullable: true
        email:
          type: string
          description: Email.  E-mail or CustomerId are required.
          nullable: true
        customerId:
          type: integer
          description: "Id of the N:Mozu.Customer\r

            that this subscription is assigned to.\r

            Optional.  E-mail or CustomerId are required."
          format: int32
          nullable: true
        productCode:
          type: string
          description: Product Code
          nullable: true
        locationCode:
          type: string
          description: Location Code
          nullable: true
        userId:
          type: string
          description: User Id for multi-user b2b accounts
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Inventory in-stock notification subscription.  Notification
        sender/processor view.  Generally for internal consumption only.
    InStockNotificationSubscriptionCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/InStockNotificationSubscription"
          nullable: true
      additionalProperties: false
      description: Collection of InStockNotificationSubscriptions
