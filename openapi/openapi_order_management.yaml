openapi: 3.0.1
info:
  title: Kibo Order Management API Services Documentation
  version: v1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  description: OpenAPI Spec for Kibo Order Management API Services
servers:
  - url: https://t{tenantId}.{env}.mozu.com/api
    description: Tenant Level Api
    variables:
      tenantId:
        default: "0"
        description: Id of the Tenant
      env:
        default: sb
        enum:
          - sb
          - tp1
          - tp2
          - tp3
          - tp4
          - tp5
          - stg1
          - perf1
  - url: https://t{tenantId}-s{siteId}.{env}.mozu.com/api
    description: Site Level Api
    variables:
      tenantId:
        default: "0"
        description: Id of the Tenant
      siteId:
        default: "0"
        description: Id of the Site
      env:
        default: sb
        enum:
          - sb
          - tp1
          - tp2
          - tp3
          - tp4
          - tp5
          - stg1
          - perf1
  - url: https://home.mozu.com/api
    description: HomePod Api
paths:
  /commerce/carts/summary:
    get:
      tags:
        - Cart
      summary: Retrieves the number of items in the active cart, total cost of items
        in the cart, and whether the cart has expired
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartSummary"
      description: (Carts of anonymous shoppers expire in 14 days.)
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/user/{userId}/summary":
    get:
      tags:
        - Cart
      summary: Retrieves the number of items in the active cart, total cost of items
        in the cart, and whether the cart has expired.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartSummary"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/summary":
    get:
      tags:
        - Cart
      summary: Retrieves the number of items in the specified cart, total cost of
        items in the cart, and whether the cart has expired.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/json:
              schema:
                $ref: "#/components/schemas/CartSummary"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartSummary"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/user/{userId}":
    get:
      tags:
        - Cart
      summary: Retrieves the details of the user's cart specified by user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Get the current cart or create a new cart for the user specified by
        user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates the cart of the user specified by user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the cart to update. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current:
    get:
      tags:
        - Cart
      summary: Retrieves a cart's contents for the current shopper
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: |-
        
        If the shopper does not have an active cart on the site, one is created.
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates the cart of the current shopper
      requestBody:
        description: "All properties of the cart to update. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Deletes the cart of the current shopper
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}":
    get:
      tags:
        - Cart
      summary: Retrieves the details of the cart specified by cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: >-
        
        This is useful for managing carts, for example, locating abandoned carts.
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates the cart specified by cart ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the cart to update. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Deletes the cart specified by its cart ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{userId}":
    delete:
      tags:
        - Cart
      summary: Deletes the cart for the user specified by user ID.
      description: Shoppers are not allowed to execute this call. If this ever
        changes, then auth logic will need to be added
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/rejectautodiscount/{discountId}":
    post:
      tags:
        - Cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/coupons/{couponCode}":
    delete:
      tags:
        - Cart
      summary: Removes a coupon that had been previously applied to the cart
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/coupons":
    delete:
      tags:
        - Cart
      summary: Removes all coupons that had been previously applied to the cart
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart with the coupon you want to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/coupons/{couponcode}":
    delete:
      tags:
        - Cart
      summary: Removes a coupon that had been previously applied to the cart
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/extendedproperties:
    get:
      tags:
        - Cart
      summary: Get extended properties on a cart
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Get extended properties on a cart
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Adds extended properties
      requestBody:
        description: Extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Adds extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updated extended properties
      parameters:
        - name: upsert
          in: query
          description: Allow insert or update
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Delete extended properties
      requestBody:
        description: Extended properties.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      description: Delete extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/extendedproperties/{key}":
    put:
      tags:
        - Cart
      summary: Updated extended property
      parameters:
        - name: key
          in: path
          description: Unique identifier of the cart item
          required: true
          schema:
            type: string
        - name: upsert
          in: query
          description: Extended property
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended property
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes a particular extended property
      parameters:
        - name: key
          in: path
          description: Unique identifier of the extended property
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Removes a particular extended property
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/items:
    get:
      tags:
        - Cart
      summary: "Retrieves the details of each cart item such as the product name,
        stock count, unit price, discounts, quantity ordered, and total price\r

        for the current shopper"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Clears all cart items from the cart of a current shopper
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Adds a product or other item to the cart of the current shopper
      requestBody:
        description: "All properties of the new cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/items":
    get:
      tags:
        - Cart
      summary: "Retrieves the details of each cart item such as the product name,
        stock count, unit price, discounts, quantity ordered, and total price\r

        for the cart specified by the cart ID"
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Clears all cart items from the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/json:
              schema:
                $ref: "#/components/schemas/Cart"
            text/plain:
              schema:
                $ref: "#/components/schemas/Cart"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Cart
      summary: Adds a product or other item to the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the new cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/items/{cartItemId}":
    get:
      tags:
        - Cart
      summary: Retrieves an individual cart item from the cart of the current shopper
        specified by its cart ID
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates a particular cart item in the cart of the current shopper
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the updated cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes a particular cart item from the cart of the current shopper
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/items/{cartItemId}":
    get:
      tags:
        - Cart
      summary: Retrieves an individual cart item from the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Cart
      summary: Updates a particular cart item in the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the updated cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes a particular cart item from the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/bulkitems:
    post:
      tags:
        - Cart
      summary: Adds multiple items to the cart of the current shopper
      parameters:
        - name: throwErrorOnInvalidItems
          in: query
          description: When set to true none of the items will be added when some items
            are invalid. when set to false valid items are added and invalid
            items are removed
          schema:
            type: boolean
      requestBody:
        description: The items to add to the cart
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/bulkitems":
    post:
      tags:
        - Cart
      summary: Adds multiple items to the cart specified by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: throwErrorOnInvalidItems
          in: query
          description: When set to true none of the items will be added when some items
            are invalid. when set to false valid items are added and invalid
            items are removed
          schema:
            type: boolean
      requestBody:
        description: The items to add to the cart
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/items/{cartItemId}/{quantity}":
    put:
      tags:
        - Cart
      summary: Updates the quantity of an individual cart item in the cart of the
        current shopper
      parameters:
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: New quantity for the specified cart item.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/{cartId}/items/{cartItemId}/{quantity}":
    put:
      tags:
        - Cart
      summary: Updates the quantity of an individual cart item in the cart specified
        by the cart ID
      parameters:
        - name: cartId
          in: path
          description: Unique identifier of the cart.
          required: true
          schema:
            type: string
        - name: cartItemId
          in: path
          description: Unique identifier of the cart item.
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: New quantity for the specified cart item.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CartItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/carts/current/messages:
    get:
      tags:
        - Cart
      summary: Retrieves messages to and from the current shopper
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartChangeMessageCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CartChangeMessageCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CartChangeMessageCollection"
      description: "These are messages supplied by the system to notify the shopper \r

        of price increases or decreases or product unavailability."
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Cart
      summary: Removes all messages associated with the cart of the current shopper
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/carts/current/messages/{messageId}":
    delete:
      tags:
        - Cart
      summary: Removes a single message associated with the cart of the current shopper
      parameters:
        - name: messageId
          in: path
          description: Unique identifier of the message to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/channels:
    get:
      tags:
        - Channel
      summary: Retrieves a list of channels according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the channel in which the
            results appear. Either ascending (a-z) or descending (z-a) channel.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Channel
      summary: Creates a new channel
      requestBody:
        description: All properties of the channel to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/plain:
              schema:
                $ref: "#/components/schemas/Channel"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/channels/{code}":
    get:
      tags:
        - Channel
      summary: Retrieves the details of an channel specified by the channel ID
      parameters:
        - name: code
          in: path
          description: Unique identifier of the channel whose details you want.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/plain:
              schema:
                $ref: "#/components/schemas/Channel"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Channel
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      requestBody:
        description: All properties of the channel to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/json:
              schema:
                $ref: "#/components/schemas/Channel"
            text/plain:
              schema:
                $ref: "#/components/schemas/Channel"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Channel
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/channelgroups:
    get:
      tags:
        - ChannelGroup
      summary: Retrieves a list of channel groups according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the channel in which the
            results appear. Either ascending (a-z) or descending (z-a) channel.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroupCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroupCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroupCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - ChannelGroup
      summary: Creates a new channel
      requestBody:
        description: All properties of the channel group to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelGroup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/channelgroups/{code}":
    get:
      tags:
        - ChannelGroup
      summary: Retrieves the details of an channel group specified by the channel ID
      parameters:
        - name: code
          in: path
          description: Unique identifier of the channel whose details you want.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - ChannelGroup
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      requestBody:
        description: All properties of the channel group to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelGroup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelGroup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - ChannelGroup
      summary: Updates a channel
      parameters:
        - name: code
          in: path
          description: ID of the channel to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/attributes":
    post:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: removeMissing
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}":
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Updates the details of a checkout specified by the checkout ID
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose details you want.
          required: true
          schema:
            type: string
      requestBody:
        description: Checkout that needs update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Checkout"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/checkouts:
    get:
      tags:
        - Checkout
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: qLimit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CheckoutCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CheckoutCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Creates a new checkout from an existing cart, that is, when the
        customer chooses to proceed to checkout
      parameters:
        - name: cartId
          in: query
          description: Unique identifier of the cart. This is the original cart ID
            expressed as a GUID.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/shippingMethods":
    get:
      tags:
        - Checkout
      summary: Retrieves available shipping methods for groupings
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose shipping methods you want
            to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutGroupRates"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutGroupRates"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckoutGroupRates"
      description: Typically used to display available shipping method options on the
        checkout page.
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Sets the shipping method for specified groupings
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose shipping methods you want
            to set.
          required: true
          schema:
            type: string
      requestBody:
        description: Pairings of checkout group to shipping method
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CheckoutGroupShippingMethod"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/actions":
    get:
      tags:
        - Checkout
      summary: Retrieves available actions which depends on the status of the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose available actions you want
            to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      summary: Perform an action on the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout.
          required: true
          schema:
            type: string
      requestBody:
        description: The action to perform
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: Available actions depend on the current state of the checkout. If
        in doubt, get a list of available checkout actions first.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}":
    put:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: digitalWalletType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalWallet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/priceList":
    put:
      tags:
        - Checkout
      summary: Changes the pricelist associated with a checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout to change
          required: true
          schema:
            type: string
      requestBody:
        description: The code for the pricelist to apply
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: |-
        
        The desired price list code should be specified on the ApiContext.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/email/resend":
    post:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/coupons/{couponCode}":
    delete:
      tags:
        - Checkout
      summary: Removes a coupon that had been previously applied to the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/coupons":
    delete:
      tags:
        - Checkout
      summary: Removes all coupons that had been previously applied to the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/coupons/{couponcode}":
    delete:
      tags:
        - Checkout
      summary: Removes a coupon that had been previously applied to the checkout
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/destinations/{destinationId}":
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeDestination"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/destinations":
    get:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Checkout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeDestination"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeDestination"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items":
    post:
      tags:
        - Checkout
      summary: Adds a product or other item to the checkout of the current shopper
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout to add an item to.
          required: true
          schema:
            type: string
      requestBody:
        description: "All properties of the new item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/{itemId}":
    delete:
      tags:
        - Checkout
      summary: Removes a particular item from the checkout of the current shopper
      parameters:
        - name: checkoutId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: Unique identifier of the item.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/{itemId}/split":
    post:
      tags:
        - Checkout
      summary: Splits an existing item into two
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout containing the item to split
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: The ID of the item to split
          required: true
          schema:
            type: string
        - name: quantity
          in: query
          description: What quantity to split off. Defaults to 1.
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: "The new item's quantity will be !:quantity, and the original
        item's\r

        quantity will be reduced accordingly."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}":
    put:
      tags:
        - Checkout
      summary: Associate an item to a destination
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: ID of the item to update
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          description: ID of the destination
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/items/destinations":
    post:
      tags:
        - Checkout
      summary: Associate an items to destinations in bulk
      parameters:
        - name: checkoutId
          in: path
          description: ID of the checkout
          required: true
          schema:
            type: string
      requestBody:
        description: Pairings of destination IDs with their associated items by ID
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ItemsForDestination"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/payments/actions":
    post:
      tags:
        - Checkout
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose payment action you want to
            change.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions":
    post:
      tags:
        - Checkout
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: checkoutId
          in: path
          description: Unique identifier of the checkout whose payment action you want to
            change.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            text/plain:
              schema:
                $ref: "#/components/schemas/Checkout"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/{paymentId}/actions":
    post:
      tags:
        - Order
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment action you want to
            change.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves available payment actions which depends on the status of the
        order's payment transaction
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose available payment actions you
            want to get.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: "\r

        Possible actions can be \"Create,\" \"Capture,\" \"Void,\"
        \"AuthCapture,\" or \"ReceiveCheck.\""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/{paymentId}":
    get:
      tags:
        - Order
      summary: Retrieves a specific payment transaction from the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment transaction you want
            to get.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: Unique identifier of the payment transaction you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/plain:
              schema:
                $ref: "#/components/schemas/Payment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments":
    get:
      tags:
        - Order
      summary: Retrieves payment transactions for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment transactions you want
            to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
      description: Allows filtering and sorting.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/autocapture":
    post:
      tags:
        - Order
      summary: Attempts to capture payments for any fulfilled shipments.
      description: Amount to capture is total of fulfilled shipments - order
        adjustment - amount already captured.
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order you want to auto capture.
          required: true
          schema:
            type: string
        - name: forceCapture
          in: query
          description: Also capture unfulfilled shipments (excluding backorder). Used when
            credit card auths are about to expire.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/pickups":
    post:
      tags:
        - Order
      summary: Apply a pickup to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
      requestBody:
        description: Pickup to create and add to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pickup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/plain:
              schema:
                $ref: "#/components/schemas/Pickup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/pickups/{pickupId}":
    put:
      tags:
        - Order
      summary: Delete an order pickup
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup to update on the order
          required: true
          schema:
            type: string
      requestBody:
        description: Pickup content to update on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pickup"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/plain:
              schema:
                $ref: "#/components/schemas/Pickup"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete an order pickup
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Get an order pickup
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the pickup.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/json:
              schema:
                $ref: "#/components/schemas/Pickup"
            text/plain:
              schema:
                $ref: "#/components/schemas/Pickup"
      description: Get an order pickup
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/pickups/{pickupId}/actions":
    get:
      tags:
        - Order
      summary: Retrieves available fulfillment actions
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order on which to get a list of available
            actions.
          required: true
          schema:
            type: string
        - name: pickupId
          in: path
          description: Pickup ID to get fulfillment actions for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/refunds":
    post:
      tags:
        - Order
      summary: Apply a refund to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
      requestBody:
        description: Refund to create on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Refund"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
            text/json:
              schema:
                $ref: "#/components/schemas/Refund"
            text/plain:
              schema:
                $ref: "#/components/schemas/Refund"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/refunds/{refundId}":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: refundId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/refunds/refundreasons:
    get:
      tags:
        - Order
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundReasonCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/RefundReasonCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/RefundReasonCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/returnableitems":
    get:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderReturnableItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderReturnableItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderReturnableItemCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments":
    post:
      tags:
        - Order
      summary: Creates a shipment by grouping together multiple packages into logical
        shipments
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order which is ready to be shipped.
          required: true
          schema:
            type: string
      requestBody:
        description: Package ids to use in creating shipments.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentId}":
    delete:
      tags:
        - Order
      summary: Deletes an existing order shipment
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes an existing order shipment
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Allows a shipment to be retrieved for the order
      parameters:
        - name: orderId
          in: path
          description: ID of the order
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: Shipment ID of the order.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/methods":
    get:
      tags:
        - Order
      summary: Retrieves available shipping methods
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose shipping methods you want to
            get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShippingRate"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShippingRate"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShippingRate"
      description: Typically used to display available shipping method options on the
        checkout page.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice":
    post:
      tags:
        - Order
      parameters:
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepriceShipmentObject"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments":
    post:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShipmentAdjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments":
    post:
      tags:
        - Order
      parameters:
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShipmentItemAdjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/shipments/{shipmentNumber}/split":
    post:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: shipmentNumber
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SplitShipmentsObject"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeShipment"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/validationresults":
    put:
      tags:
        - Order
      summary: Adds a validation result from an external system to an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a note.
          required: true
          schema:
            type: string
      requestBody:
        description: The order validation result.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderValidationResult"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Adds a validation result from an external system to an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a note.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderValidationResult"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderValidationResult"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderValidationResult"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/adjustment":
    put:
      tags:
        - Order
      summary: Apply a coupon to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Adjustment to apply to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Adjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: " coupon?"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: coupon?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/adjustment/shipping":
    put:
      tags:
        - Order
      summary: Apply a coupon to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Adjustment to apply to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Adjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: " coupon?"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: coupon?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/adjustment/handling":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Adjustment"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/attributes":
    post:
      tags:
        - Order
      summary: Adds a attributeSet to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a
            attributeSet.
          required: true
          schema:
            type: string
      requestBody:
        description: Attributes to upsert.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      description: This is an internal attributeSet that the merchant might want to
        add to an order.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves a list of all attributeSets for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose attributeSets you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updates a specific order attributeSet for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose attributeSet you want to update.
          required: true
          schema:
            type: string
        - name: removeMissing
          in: query
          description: Indicates that items missing from the collection should be removed.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Attributes to upsert.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/OrderAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderAttribute"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/billinginfo":
    get:
      tags:
        - Order
      summary: Retrieves the customer's billing address, and, if paying by credit
        card, the card's number, expiration date, card holder's name and billing
        address
      parameters:
        - name: orderId
          in: path
          description: Unique identifer of the order whose customer's payment source you
            want to get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Determines whether the draft version should be retrieved if one
            exists.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/BillingInfo"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Adds a payment source to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment source you want to
            update.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: All the properties that you want the payment source object to contain.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/BillingInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/BillingInfo"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/cancel/reasons:
    get:
      tags:
        - Order
      parameters:
        - name: category
          in: query
          schema:
            type: string
            default: SHOPPER
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelReasonCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CancelReasonCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CancelReasonCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/cancel/{orderId}":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeCanceledReason"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders:
    get:
      tags:
        - Order
      summary: Retrieves a list of orders according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: Text to perform a search on
          schema:
            type: string
        - name: qLimit
          in: query
          description: Limit of the records to include in a search, used for global search
          schema:
            type: integer
            format: int32
        - name: includeBin
          in: query
          description: Whether to include BIN numbers on credit card payments
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          description: Response groups to return or filter the order graph
          schema:
            type: string
        - name: mode
          in: query
          description: "'synthesized' to provide a synthesized order from shipment data"
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Order
      summary: Creates a new order for no-cart quick-ordering scenarios
      parameters:
        - name: cartId
          in: query
          description: Unique identifier of the cart. This is the original cart ID
            expressed as a GUID.
          schema:
            type: string
      requestBody:
        description: All properties of the order to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/users":
    put:
      tags:
        - Order
      summary: Changes the User ID associated with an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to change.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: (This will probably not be exposed.)
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/priceList":
    put:
      tags:
        - Order
      summary: Changes the pricelist associated with an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to change
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: The code for the pricelist to apply
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: |-
        
        The desired price list code should be specified on the ApiContext.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/email/resend":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderAction"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}":
    get:
      tags:
        - Order
      summary: Retrieves the details of an order specified by the order ID
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose details you want.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
        - name: includeBin
          in: query
          description: Whether to include BIN numbers on credit card payments
          schema:
            type: boolean
            default: false
        - name: mode
          in: query
          description: "'synthesized' to provide a synthesized order from shipment data"
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updates the billing and/or shipping information of an existing order
      parameters:
        - name: orderId
          in: path
          description: The order ID to update.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: All properties of the order to place.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}":
    put:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: digitalWalletType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalWallet"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/draft":
    put:
      tags:
        - Order
      summary: Deletes a draft version of an order
      parameters:
        - name: orderId
          in: path
          description: The order ID to update.
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/actions":
    post:
      tags:
        - Order
      summary: Set an action on the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to perform, which can be "Create," "Submit,"
          "SetAsProcessing," "Close," or "Cancel."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: Available actions depend on the current status of the order. If in
        doubt, get a list of available order actions first.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves available order actions which depends on the status of the
        order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose available order actions you
            want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: "\r

        Possible actions can be \"Create,\" \"Submit,\"
        \"SetAsProcessing,\" \"Close,\" or \"Cancel.\""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/taxableorders":
    get:
      tags:
        - Order
      summary: Gets an order divided up into "TaxableOrders" based on the source and
        delivery locations of the order items
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose taxable orders you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PricingTaxableOrder"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PricingTaxableOrder"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PricingTaxableOrder"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/discounts/{discountId}":
    put:
      tags:
        - Order
      summary: Apply a coupon to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          description: Identifies the discount to be updated.
          required: true
          schema:
            type: integer
            format: int32
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Discount information to use as the update source.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/price:
    post:
      tags:
        - Order
      parameters:
        - name: refreshShipping
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/sms/optout/{siteId}":
    put:
      tags:
        - Order
      parameters:
        - name: siteId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/coupons/{couponCode}":
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/coupons":
    delete:
      tags:
        - Order
      summary: Removes all coupons that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/coupons/{couponcode}":
    delete:
      tags:
        - Order
      summary: Removes a coupon that had been previously applied to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with the coupon you want to remove.
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code to remove.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalpackages":
    post:
      tags:
        - Order
      summary: Apply a digital package to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the digital
            package.
          required: true
          schema:
            type: string
      requestBody:
        description: Digital Package to create and add to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalPackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}":
    put:
      tags:
        - Order
      summary: Delete an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Package to update on the order
          required: true
          schema:
            type: string
      requestBody:
        description: Package content to update on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DigitalPackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete an order digital package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Digital package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Get an order digital package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Digital Package Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/json:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/DigitalPackage"
      description: Get an order digital package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions":
    get:
      tags:
        - Order
      summary: Retrieves available fulfillment actions
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order on which to get a list of available
            actions.
          required: true
          schema:
            type: string
        - name: digitalPackageId
          in: path
          description: Package ID to get fulfillment actions for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/extendedproperties":
    get:
      tags:
        - Order
      summary: Get extended properties on an order
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: ""
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Get extended properties on an order
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Order
      summary: Adds extended properties
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Extended properties.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Adds extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updated extended properties
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
        - name: upsert
          in: query
          description: Allow insert or update
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete extended properties
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Keys of extended properties
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
      description: Delete extended properties
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/extendedproperties/{key}":
    put:
      tags:
        - Order
      summary: Updated extended property
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: Key
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
        - name: upsert
          in: query
          description: Allow insert or update
          schema:
            type: boolean
            default: false
      requestBody:
        description: Extended property
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtendedProperty"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
            text/plain:
              schema:
                $ref: "#/components/schemas/ExtendedProperty"
      description: Updated extended property
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a particular order item from the order of the current shopper
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/fulfillment/actions":
    post:
      tags:
        - Order
      summary: Sets the fulfillment action to "Ship
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order which is ready to be shipped.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to perform along with metadata about which packages, digital
          packages, or pickups to perform the action on
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: " To ship an order, the order must have a customer name, the
        \"Open\" or \"OpenAdProcessing\"\r

        status, full shipping address, and shipping method."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/fulfillment/email/resend":
    post:
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/fulfillmentinfo":
    get:
      tags:
        - Order
      summary: Retrieves an order's fulfillment information specified by order ID
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Determines whether the draft version should be retrieved if one
            exists.
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Modifies an order's fulfillment information
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose fulfillment information you
            want to change.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: All properties that you want the updated fulfillment information to
          have.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FulfillmentInfo"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/FulfillmentInfo"
      description: For example, to update the fulfillment address, estimated delivery
        date, or the merchant's fulfillment cost.
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items":
    get:
      tags:
        - Order
      summary: Retrieves the details of all items in an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose items you want to get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Order
      summary: Adds a product or other item to the cart of the current shopper
      parameters:
        - name: orderId
          in: path
          description: ID of the order to add an item to.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
        - name: skipInventoryCheck
          in: query
          description: Determines wheter or not to check inventory on an item when adding
            an item to the order or when placing an order
          schema:
            type: boolean
      requestBody:
        description: "All properties of the new cart item. Required property:
          Product.ProductCode."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}":
    get:
      tags:
        - Order
      summary: Retrieves the details of a single order item
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose item you want to get.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item whose details you want to get.
          required: true
          schema:
            type: string
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Removes a particular order item from the order of the current shopper
      parameters:
        - name: orderId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{lineId}":
    get:
      tags:
        - Order
      summary: Retrieves the details of a single order item via its line id
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose item you want to get.
          required: true
          schema:
            type: string
        - name: lineId
          in: path
          description: Line ID of the order item whose details you want to get.
          required: true
          schema:
            type: integer
            format: int32
        - name: draft
          in: query
          description: Gets a draft copy of the order if one is available
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/price/{price}":
    put:
      tags:
        - Order
      summary: Updates the quantity of an individual cart item in the order of the
        current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: price
          in: path
          description: Price to update the item product to.
          required: true
          schema:
            type: number
            format: double
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: Quantity?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}":
    put:
      tags:
        - Order
      summary: Updates the quantity of an individual cart item in the order of the
        current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: New quantity for the specified order item.
          required: true
          schema:
            type: integer
            format: int32
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}":
    put:
      tags:
        - Order
      summary: Updates the quantity of an individual cart item in the order of the
        current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: dutyAmount
          in: path
          description: Duty amount to update the item product to.
          required: true
          schema:
            type: number
            format: double
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: Quantity?
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/fulfillment":
    put:
      tags:
        - Order
      summary: Updates the fullfillment method and/or location of an individual order
        item in the order of the current shopper
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          description: Determines the update strategy for this update (ApplyAndCommit,
            ApplyToOriginal, ApplyToDraft)
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: The order item containing fulfilment information to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}":
    put:
      tags:
        - Order
      summary: Update a discount on the order item to ignore or unignore it
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the coupon.
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          description: Unique identifier of the order item.
          required: true
          schema:
            type: string
        - name: discountId
          in: path
          description: Identifies the discount to be updated.
          required: true
          schema:
            type: integer
            format: int32
        - name: updateMode
          in: query
          description: Allows different update behaviors to impact the original or the
            draft.
          schema:
            type: string
        - name: version
          in: query
          description: Determines whether or not to check versioning of items for
            concurrency purposes.
          schema:
            type: string
      requestBody:
        description: Discount information to use as the update source.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/notes":
    post:
      tags:
        - Order
      summary: Adds a note to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order to which you want to add a note.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note. Maximum 256 characters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: This is an internal note that the merchant might want to add to an order.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Retrieves a list of all notes for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose notes you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/notes/{noteId}":
    get:
      tags:
        - Order
      summary: Retrieves a specific order note from an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose note you want to get.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Order
      summary: Updates a specific order note for an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose note you want to update.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Deletes a specific order note on an order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose note you want to delete.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages":
    post:
      tags:
        - Order
      summary: Apply a package to the order
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
      requestBody:
        description: Package to create and add to the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages/{packageId}":
    put:
      tags:
        - Order
      summary: Delete an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to update on the order
          required: true
          schema:
            type: string
      requestBody:
        description: Package content to update on the order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Order
      summary: Delete an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Order
      summary: Get an order package
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: Get an order package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages/{packageId}/label":
    get:
      tags:
        - Order
      summary: Get an order package label
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Get an order package label
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/packages/{packageId}/actions":
    get:
      tags:
        - Order
      summary: Retrieves available fulfillment actions
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order on which to get a list of available
            actions.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package ID to get fulfillment actions for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/{orderId}/payments/actions":
    post:
      tags:
        - Order
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: orderId
          in: path
          description: Unique identifier of the order whose payment action you want to
            change.
          required: true
          schema:
            type: string
      requestBody:
        description: Action to be performed, along with any metadata.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/orders/attributedefinition/attributes:
    get:
      tags:
        - OrderAttribute
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttributeCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - OrderAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/attributedefinition/attributes/{attributeFQN}/VocabularyValues":
    get:
      tags:
        - OrderAttribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/orders/attributedefinition/attributes/{attributeFQN}":
    get:
      tags:
        - OrderAttribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
        - name: responseGroups
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - OrderAttribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeAttribute"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeAttribute"
      security:
        - bearerAuth: []
          clientOauth2: []
  /ordervalidationcapability:
    post:
      tags:
        - OrderValidationCapability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderValidationResult"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/{quoteId}":
    get:
      tags:
        - Quote
      summary: Retrieves the details of a quote specified by the quote ID
      parameters:
        - name: quoteId
          in: path
          description: Unique identifier of the quote whose details you want.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Quote
      summary: Update quote
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Quote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Update quote
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Quote
      summary: Deletes a quote
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes a quote
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/quotes:
    get:
      tags:
        - Quote
      summary: Retrieves a list of Quotes according to any specified filter criteria
        and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: Text to perform a search on
          schema:
            type: string
        - name: qLimit
          in: query
          description: Limit of the records to include in a search, used for global search
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/QuoteCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Quote
      summary: Create quote
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Quote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Create quote
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/customers/{customerAccountId}/{quoteName}":
    get:
      tags:
        - Quote
      summary: Retrieves quote by name
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: quoteName
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Retrieves quote by name
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/{quoteId}/items":
    get:
      tags:
        - Quote
      summary: Returns a listing of Quotes
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: Returns a listing of Quotes
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Quote
      summary: Adds an item to the Quote of the current shopper
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/customers/{customerAccountId}/{quoteName}/items":
    get:
      tags:
        - Quote
      summary: Returns a listing of Quotes
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: quoteName
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: Returns a listing of Quotes
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/quotes/{quoteId}/items/{quoteItemId}":
    get:
      tags:
        - Quote
      summary: Retrieves an individual Quote item from a Quote
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quoteItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      description: Retrieves an individual Quote item from a Quote
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Quote
      summary: Update Quote item
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quoteItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimeOrderItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/json:
              schema:
                $ref: "#/components/schemas/Quote"
            text/plain:
              schema:
                $ref: "#/components/schemas/Quote"
      description: Update Quote item
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Quote
      summary: Delete / remove Quote item
      parameters:
        - name: quoteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quoteItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete / remove Quote item
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns:
    get:
      tags:
        - Return
      summary: Provides a paged, collection of returns for a Site
      parameters:
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
        - name: q
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Return
      summary: Creates a new Return for an order or product list
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Return"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns/email/resend:
    put:
      tags:
        - Return
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnAction"
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns/reasons:
    get:
      tags:
        - Return
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReasonCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReasonCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReasonCollection"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}":
    put:
      tags:
        - Return
      summary: Updates a return
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Return"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: Updates a return
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Allows for retrieval for a return given only the return Id
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: " Further manipulation of that returns must be done off of the order."
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/returns/actions:
    post:
      tags:
        - Return
      summary: Allows for batch processing of Returns easily
      requestBody:
        description: A ReturnAction instance that takes the name of the action to be
          performed and a list of Return Ids upon which to perform the action.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/ship":
    post:
      tags:
        - Return
      summary: Creates a child order for the return for processing replacments
      parameters:
        - name: returnId
          in: path
          description: The ID of the parent return
          required: true
          schema:
            type: string
      requestBody:
        description: Optionally specify which items to include and in what quantities
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ReturnItemSpecifier"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/json:
              schema:
                $ref: "#/components/schemas/Order"
            text/plain:
              schema:
                $ref: "#/components/schemas/Order"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/actions":
    get:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments":
    get:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/PaymentCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments/{paymentId}":
    get:
      tags:
        - Return
      summary: ""
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/plain:
              schema:
                $ref: "#/components/schemas/Payment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments/actions":
    post:
      tags:
        - Return
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to specify. Possible actions can be "Create," "Capture,"
          "Void," "AuthCapture," or "ReceiveCheck."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/payments/{paymentId}/actions":
    post:
      tags:
        - Return
      summary: Sets the action of the specified payment transaction interaction
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: Action to specify. Possible actions can be "Create," "Capture,"
          "Void," "AuthCapture," or "ReceiveCheck."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentAction"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: "Available actions depend on the current status of the payment
        transaction. \r

        If in doubt, get a list of available payment actions first."
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Retrieves available payment actions which depends on the status of the
        order's payment transaction
      parameters:
        - name: returnId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
      description: "\r

        Possible actions can be \"AuthorizePayment\", \"RequestCheck\",
        \"CapturePayment\", \"CreditPayment\", \"DeclineCheck\",
        \"VoidPayment\", \"AuthAndCapture\", or \"ReceiveCheck\"."
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/restock":
    post:
      tags:
        - Return
      summary: API to restock return item
      parameters:
        - name: returnId
          in: path
          description: Return ID
          required: true
          schema:
            type: string
      requestBody:
        description: List of return items with quantity to be restocked
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RestockableReturnItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/shipping/label":
    get:
      tags:
        - Return
      parameters:
        - name: returnId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarrierServiceGenerateLabelResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/CarrierServiceGenerateLabelResponse"
            text/plain:
              schema:
                $ref: "#/components/schemas/CarrierServiceGenerateLabelResponse"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/items":
    get:
      tags:
        - Return
      summary: Retrieves the details of all return items in an order
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose items you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnItemCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Return
      summary: Adds a return item to the return
      parameters:
        - name: returnId
          in: path
          description: ID of the order to add an item to.
          required: true
          schema:
            type: string
      requestBody:
        description: All properties of the new return item.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/items/{returnItemId}":
    get:
      tags:
        - Return
      summary: Retrieves the details of a single return item
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose item you want to get.
          required: true
          schema:
            type: string
        - name: returnItemId
          in: path
          description: Unique identifier of the return item whose details you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnItem"
            text/json:
              schema:
                $ref: "#/components/schemas/ReturnItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/ReturnItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{orderId}/items/{orderItemId}":
    delete:
      tags:
        - Return
      summary: Removes a particular order item from the order of the current shopper
      parameters:
        - name: returnId
          in: query
          description: ""
          schema:
            type: string
        - name: returnItemId
          in: query
          description: Unique identifier of the order item.
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - name: orderItemId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/json:
              schema:
                $ref: "#/components/schemas/Return"
            text/plain:
              schema:
                $ref: "#/components/schemas/Return"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/notes":
    post:
      tags:
        - Return
      summary: Adds a note to the return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return to which you want to add a note.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note. Maximum 256 characters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: This is an internal note that the merchant might want to add to a return.
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Retrieves a list of all notes for a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose notes you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/notes/{noteId}":
    get:
      tags:
        - Return
      summary: Retrieves a specific note from a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose note you want to get.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Return
      summary: Updates a specific note for a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose note you want to update.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Text of the note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderNote"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/json:
              schema:
                $ref: "#/components/schemas/OrderNote"
            text/plain:
              schema:
                $ref: "#/components/schemas/OrderNote"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Return
      summary: Deletes a specific note on a return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return whose note you want to delete.
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Unique identifier of the note whose text you want to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/packages":
    post:
      tags:
        - Return
      summary: Apply a package to the return
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
      requestBody:
        description: Package to create and add to the return
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: " package?"
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/packages/{packageId}":
    put:
      tags:
        - Return
      summary: Delete an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to update on the return
          required: true
          schema:
            type: string
      requestBody:
        description: Package content to update on the return
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommerceRuntimePackage"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Return
      summary: Delete an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Get an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimePackage"
      description: Get an order package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/packages/{packageId}/label":
    get:
      tags:
        - Return
      summary: Get an order package
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the return with which to associate the package.
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: Package to remove from the return
          required: true
          schema:
            type: string
        - name: returnAsBase64Png
          in: query
          description: Return as base64 png
          schema:
            type: boolean
      responses:
        "200":
          description: Success
      description: Get an order package
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/shipments":
    post:
      tags:
        - Return
      summary: Creates a shipment by grouping together multiple packages into logical
        shipments
      parameters:
        - name: returnId
          in: path
          description: Unique identifier of the order which is ready to be shipped.
          required: true
          schema:
            type: string
      requestBody:
        description: Package ids to use in creating shipments.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommerceRuntimePackage"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/returns/{returnId}/shipments/{shipmentId}":
    delete:
      tags:
        - Return
      summary: Deletes an existing return shipment
      parameters:
        - name: returnId
          in: path
          description: ID of the return
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: Shipment ID of the return.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes an existing return shipment
      security:
        - bearerAuth: []
          clientOauth2: []
    get:
      tags:
        - Return
      summary: Allows a shipment to be retrieved for the order
      parameters:
        - name: returnId
          in: path
          description: ID of the return
          required: true
          schema:
            type: string
        - name: shipmentId
          in: path
          description: Shipment ID of the return.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/json:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
            text/plain:
              schema:
                $ref: "#/components/schemas/CommerceRuntimeShipment"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  /commerce/wishlists:
    get:
      tags:
        - Wishlist
      summary: Retrieves a list of wishlists according to any specified filter
        criteria and sort options
      parameters:
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. \r

            \            For example, with a PageSize of 25, to get
            the 51st through the 75th items, startIndex=3. The default value is
            0. Optional."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for
            a query: eq=equals, ne=not equals, gt=greater than, lt = less than
            or equals, \r

            \            gt = greater than or equals, lt = less than
            or equals, sw = starts with, or cont = contains. Optional."
          schema:
            type: string
        - name: q
          in: query
          description: Text to perform a search on
          schema:
            type: string
        - name: qLimit
          in: query
          description: Limit of the records to include in a search, used for global search
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistCollection"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Wishlist
      summary: Create wishlist
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Create wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}":
    get:
      tags:
        - Wishlist
      summary: Retrieves the details of a wishlist specified by the wishlist ID
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Wishlist
      summary: Update Wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Wishlist"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Update Wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Wishlist
      summary: Deletes a wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Deletes a wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}":
    get:
      tags:
        - Wishlist
      summary: Retrieves wishlist by name
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: wishlistName
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Retrieves wishlist by name
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}/items":
    get:
      tags:
        - Wishlist
      summary: Returns a listing of wishlists
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
      description: Returns a listing of wishlists
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Wishlist
      summary: Clears all items in the wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/json:
              schema:
                $ref: "#/components/schemas/Wishlist"
            text/plain:
              schema:
                $ref: "#/components/schemas/Wishlist"
      description: Clears all items in the wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
    post:
      tags:
        - Wishlist
      summary: Adds an item to the wishlist of the current shopper
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WishlistItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: ""
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}/items":
    get:
      tags:
        - Wishlist
      summary: Returns a listing of wishlists
      parameters:
        - name: customerAccountId
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
        - name: wishlistName
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: startIndex
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: ""
          schema:
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: ""
          schema:
            type: string
        - name: filter
          in: query
          description: ""
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItemCollection"
      description: Returns a listing of wishlists
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}":
    get:
      tags:
        - Wishlist
      summary: Retrieves an individual wishlist item from a wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: Retrieves an individual wishlist item from a wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
    put:
      tags:
        - Wishlist
      summary: Update wishlist item
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WishlistItem"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: Update wishlist item
      security:
        - bearerAuth: []
          clientOauth2: []
    delete:
      tags:
        - Wishlist
      summary: Delete / remove wishlist item
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
      description: Delete / remove wishlist item
      security:
        - bearerAuth: []
          clientOauth2: []
  "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}/{quantity}":
    put:
      tags:
        - Wishlist
      summary: Updates the quantity of an item in the wishlist
      parameters:
        - name: wishlistId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: wishlistItemId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: quantity
          in: path
          description: ""
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/json:
              schema:
                $ref: "#/components/schemas/WishlistItem"
            text/plain:
              schema:
                $ref: "#/components/schemas/WishlistItem"
      description: Updates the quantity of an item in the wishlist
      security:
        - bearerAuth: []
          clientOauth2: []
  "/v1/bin/{bin_id}":
    post:
      tags:
        - InventoryBin
      description: Update the designated bin
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: bin_id
          in: path
          description: Id of bin to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/UpdateBinRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bin"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /v1/export/create:
    post:
      tags:
        - InventoryExportInventory
      description: Create an Export Settings
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/CreateExportSettingsRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportSettingsResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Service Error
  /v1/export:
    post:
      tags:
        - InventoryExportInventory
      description: Run Export Settings Job
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/ExportInventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportInventoryResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Service Error
  /v1/export/update:
    post:
      tags:
        - InventoryExportInventory
      description: Update an Export Settings
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/UpdateExportSettingsRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateExportSettingsResponse"
        "400":
          description: Bad Request
        "404":
          description: No Settings Found
        "500":
          description: Internal Service Error
  "/v1/export/{exportSettingsName}":
    delete:
      tags:
        - InventoryExportInventory
      description: Deletes an Export Settings
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/exportSettingsName"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedCountResponse"
        "400":
          description: Bad Request
  /v1/export/ftp/create:
    post:
      tags:
        - InventoryExportInventory
      description: Create an Export Settings FTP
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/CreateExportSettingsFTPRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportSettingsResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Service Error
  /v1/export/ftp/update:
    post:
      tags:
        - InventoryExportInventory
      description: Update an Export Settings FTP
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/UpdateExportSettingsFTPRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateExportSettingsFTPResponse"
        "400":
          description: Bad Request
        "404":
          description: No Settings Found
        "500":
          description: Internal Service Error
  "/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}":
    delete:
      tags:
        - InventoryExportInventory
      description: Not specifying exportSettingsFTPID deletes ALL ftp settings for the
        specified export settings.
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/exportSettingsName"
        - $ref: "#/components/parameters/exportSettingsFTPName"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedCountResponse"
        "400":
          description: Bad Request
      summary: Deletes an Export Settings FTP
  /v1/export/s3/create:
    post:
      tags:
        - InventoryExportInventory
      description: Create an Export Settings S3
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/CreateExportSettingsS3Request"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportSettingsResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Service Error
  /v1/export/s3/update:
    post:
      tags:
        - InventoryExportInventory
      description: Update an Export Settings S3
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/UpdateExportSettingsS3Request"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateExportSettingsS3Response"
        "400":
          description: Bad Request
        "404":
          description: No Settings Found
        "500":
          description: Internal Service Error
  "/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}":
    delete:
      tags:
        - InventoryExportInventory
      description: Not specifying exportSettingsS3ID deletes ALL s3 settings for the
        specified export settings.
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/exportSettingsName"
        - $ref: "#/components/parameters/exportSettingsS3Name"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedCountResponse"
        "400":
          description: Bad Request
      summary: Deletes an Export Settings S3
  "/v1/config/fetchfile/{fetchFileConfigID}":
    delete:
      tags:
        - InventoryFetchFileConfig
      description: Deletes a fetch file config
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: fetchFileConfigID
          in: path
          description: Id of fetch file config
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  "/v1/config/fetchfile/testConnection/{fetchFileConfigID}":
    get:
      tags:
        - InventoryFetchFileConfig
      description: Attempts to connect to a fetch file endpoint and lists current
        files if successful
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: fetchFileConfigID
          in: path
          description: Id of fetch file config
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchFileConnectionResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /v5/inventory/redistribute:
    post:
      tags:
        - InventoryModifyInventory
      description: Create jobs to redistribute inventory across tags for the given tenant
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobQueueResponse"
  "/v1/pendingItem/{pendingItemID}":
    delete:
      tags:
        - InventoryPendingItems
      description: Delete Pending Items
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: pendingItemID
          in: path
          description: Pending Item ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedResponse"
        "400":
          description: Bad Request
  "/v1/pendingItem/release/{tenantID}":
    post:
      tags:
        - InventoryPendingItems
      description: Release Pending Items
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: tenantID
          in: path
          description: Tenant ID to release
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "400":
          description: Bad Request
  /v1/productMapping:
    get:
      tags:
        - InventoryProductMapping
      description: Gets a list Product Mappings for the specified tenant
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductMappingResponse"
        "400":
          description: Bad Request
    post:
      tags:
        - InventoryProductMapping
      description: Creates a Product Mapping
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/ProductMappingRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductMapping"
        "400":
          description: Bad Request
  "/v1/productMapping/{direction}":
    delete:
      tags:
        - InventoryProductMapping
      description: Delete a Product Mapping
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: direction
          in: path
          description: Direction
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ProductMappingRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedResponse"
        "400":
          description: Bad Request
  /v1/silo/provision:
    post:
      tags:
        - InventorySilo
      description: ""
      requestBody:
        $ref: "#/components/requestBodies/ProvisionSiloRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantIDResponse"
        "400":
          description: Bad Request
      summary: Provision a silo based on a tenant ID
  /v1/site:
    post:
      tags:
        - InventorySite
      description: Creates a site
      requestBody:
        $ref: "#/components/requestBodies/CreateSiteRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteIDResponse"
        "400":
          description: Bad Request
  "/v1/tagCategory/{tag_category_name}/tag":
    post:
      tags:
        - InventoryTag
      description: Create a tag
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
      requestBody:
        $ref: "#/components/requestBodies/Tag"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: Bad Request
  "/v1/tagCategory/{tag_category_name}/tag/{tag_value}":
    get:
      tags:
        - InventoryTag
      description: Get a tag
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
        - $ref: "#/components/parameters/tagValue"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag Not Found
    put:
      tags:
        - InventoryTag
      description: Update the designated tag
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
        - $ref: "#/components/parameters/tagValue"
      requestBody:
        $ref: "#/components/requestBodies/Tag"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    delete:
      tags:
        - InventoryTag
      description: Delete a Tag
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
        - $ref: "#/components/parameters/tagValue"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedCountResponse"
        "400":
          description: Bad Request
        "404":
          description: Tag Not Found
  /v1/tagCategory:
    get:
      tags:
        - InventoryTagCategory
      description: Get all tag categories for a tenant
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagCategory"
        "404":
          description: Tag Categories Not Found
  "/v1/tagCategory/{tag_category_name}":
    get:
      tags:
        - InventoryTagCategory
      description: Get a tag category
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagCategory"
        "404":
          description: Tag Not Found
    put:
      tags:
        - InventoryTagcategory
      description: Update the designated tag category
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
      requestBody:
        $ref: "#/components/requestBodies/TagCategory"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagCategory"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
    delete:
      tags:
        - InventoryTagcategory
      description: Delete a Tag category
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/tagCategoryName"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedCountResponse"
        "400":
          description: Bad Request
        "404":
          description: Tag category Not Found
  /v1/tenant/clone:
    post:
      tags:
        - InventoryTenant
      description: Clones a tenant
      requestBody:
        $ref: "#/components/requestBodies/CloneTenantRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantIDResponse"
        "400":
          description: Bad Request
  /v1/tenant:
    post:
      tags:
        - InventoryTenant
      description: Creates a tenant
      requestBody:
        $ref: "#/components/requestBodies/CreateTenantRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantIDResponse"
        "400":
          description: Bad Request
  /v5/inventory/allocate:
    post:
      tags:
        - InventoryAllocation
      description: Allocates inventory based on the given request
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/AllocateInventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobQueueResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    $ref: "#/components/schemas/BaseResponse"
                type: object
  /v5/inventory/deallocate:
    post:
      tags:
        - InventoryAllocation
      description: Deallocates inventory based on the given request
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/AllocateInventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    $ref: "#/components/schemas/BaseResponse"
                type: object
  /v5/inventory/fulfill:
    post:
      tags:
        - InventoryAllocation
      description: Fulfills inventory based on the given request
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/AllocateInventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    $ref: "#/components/schemas/BaseResponse"
                type: object
  /v1/audit/search:
    post:
      tags:
        - InventoryAudit
      description: Search for a list of Audits
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/AuditSearchRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditSearchResponse"
        "400":
          description: Bad Request
  "/v1/audit/allOpen/{location_code}":
    get:
      tags:
        - InventoryAudit
      description: Get all of the open   audits at the given location
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: location_id
          in: path
          description: Id of location
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Audit"
        "400":
          description: Bad Request
  /v1/audit:
    post:
      tags:
        - InventoryAudit
      description: Create a new audit
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/CreateAuditRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Audit"
        "400":
          description: Bad Request
  "/v1/audit/{audit_id}/complete":
    post:
      tags:
        - InventoryAudit
      description: Complete an audit
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: audit_id
          in: path
          description: Id of audit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/LoadBinInventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Audit"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  "/v1/audit/{audit_id}/cancel":
    post:
      tags:
        - InventoryAudit
      description: Cancel an audit
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: audit_id
          in: path
          description: Id of audit
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  "/v1/audit/{audit_id}":
    get:
      tags:
        - InventoryAudit
      description: Get details of the specified audit
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: audit_id
          in: path
          description: Id of audit
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Audit"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
  /v1/bin:
    get:
      tags:
        - InventoryBin
      description: Get a list of bins
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: locationID
          in: query
          description: Id of location
          required: true
          schema:
            type: integer
            format: int64
        - name: searchTerm
          in: query
          description: Term to match in bins
          required: true
          schema:
            type: integer
            format: int64
        - name: perPage
          in: query
          description: Results per page
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page to show
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BinResponseModel"
        "404":
          description: Bins Not Found
    post:
      tags:
        - InventoryBin
      description: Create a bin
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/CreateBinRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BinIDResponse"
        "400":
          description: Bad Request
  /v1/bin/searchInventory:
    post:
      tags:
        - InventoryBin
      description: Search bins for a inventory by bin name or any product identifier
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/BinSearchRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BinSearchResponse"
        "400":
          description: Bad Request
  /v1/bin/loadInventory:
    post:
      tags:
        - InventoryBin
      description: Loads bin inventory for designated bins
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/LoadBinInventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoadBinInventoryResponse"
        "400":
          description: Bad Request
  /v1/bin/binTypes:
    get:
      tags:
        - InventoryBin
      description: Get list of bin types
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BinTypeModel"
        "400":
          description: Bad Request
  /v1/bin/binStatuses:
    get:
      tags:
        - InventoryBin
      description: Get list of bin statuses
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BinStatusModel"
        "400":
          description: Bad Request
  /v1/bin/updateBins:
    post:
      tags:
        - InventoryBin
      description: Update the designated bins
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/UpdateBinsRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateBinsResponse"
        "400":
          description: Bad Request
  /v1/config/fetchfile:
    get:
      tags:
        - InventoryFetchFileConfig
      description: Get the Fetch File Configs for the current tenant
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/M_FetchFileConfig"
        "404":
          description: Not Found
    post:
      tags:
        - InventoryFetchFileConfig
      description: Save a new Fetch File Config
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/FetchFileConfigRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "400":
          description: Bad Request
  /v5/inventory:
    get:
      tags:
        - Inventory
      description: Get inventory from specified location
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/x-vol-site"
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/items"
        - $ref: "#/components/parameters/requestLocation"
        - $ref: "#/components/parameters/locationWhitelist"
        - $ref: "#/components/parameters/locationBlacklist"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/ignoreSafetyStock"
        - $ref: "#/components/parameters/includeNegativeInventory"
        - $ref: "#/components/parameters/shippingLocation"
        - $ref: "#/components/parameters/transferEnabled"
        - $ref: "#/components/parameters/pickup"
        - $ref: "#/components/parameters/includeInAggregate"
        - $ref: "#/components/parameters/includeAttributes"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryResponse"
        "404":
          description: Bins Not Found
    post:
      tags:
        - Inventory
      description: Queries for specified inventory at given location
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/x-vol-site"
      requestBody:
        $ref: "#/components/requestBodies/InventoryRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryResponse"
        "400":
          description: Bad Request
  /v5/inventory/aggregate:
    post:
      tags:
        - Inventory
      description: Aggregates Inventory
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/x-vol-site"
      requestBody:
        $ref: "#/components/requestBodies/AggregateRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AggregateResponse"
        "400":
          description: Bad Request
  "/v1/queue/{jobID}":
    get:
      tags:
        - InventoryJob
      description: Get the specified job
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: jobID
          in: path
          description: Id of bin to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobQueueResponse"
        "404":
          description: Job Not Found
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
  /v1/queue:
    get:
      tags:
        - InventoryJob
      description: Get the requested jobs
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - name: locationCode
          in: query
          description: Tenant specified unique Identifier of the owning location
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/limit"
        - name: owner
          in: query
          description: User that owns the job
          required: false
          schema:
            type: string
        - name: types
          in: query
          description: Type of the Job Queue Request
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - REFRESH
                - ADJUST
                - RELEASE_SHIPMENTS
                - CREATE_PICK_WAVE
                - CLOSE_PICK_WAVE
                - PUT_AWAY_FILE
                - SHORT_PICK_ERROR
                - BIN_AUDIT_START
                - BIN_AUDIT_COMPLETION
                - CREATE_BIN_AUDIT
                - RELEASE_PENDING_ITEMS
        - name: originalFilename
          in: query
          description: The full name of the file that was picked up at the secure
            droppoint server before being split up by location.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobQueueResponse"
        "404":
          description: Job Not Found
  /v5/inventory/refresh:
    post:
      tags:
        - InventoryModifyInventory
      description: Refresh Inventory
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/RefreshRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIDResponse"
        "400":
          description: Bad Request
  /v5/inventory/sync-refresh:
    post:
      tags:
        - InventoryModifyInventory
      description: Refresh Inventory - synchronous
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/RefreshRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
  /v5/inventory/adjust:
    post:
      tags:
        - InventoryModifyInventory
      description: Adjust Inventory
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/AdjustRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIDResponse"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
  /v5/inventory/sync-adjust:
    post:
      tags:
        - InventoryModifyInventory
      description: Adjust Inventory - synchronous
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/AdjustRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
  /v5/inventory/delete:
    post:
      tags:
        - InventoryModifyInventory
      description: Delete Inventory
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/x-vol-site"
      requestBody:
        $ref: "#/components/requestBodies/DeleteItemRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteItemResponse"
        "400":
          description: Bad Request
  /v5/inventory/getOrderItemInformation:
    post:
      tags:
        - InventoryOrderItem
      description: Get Order Item Information
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/OrderItemInformationRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderItemInformation"
        "400":
          description: Bad Request
  /v5/inventory/getOrderItemLog:
    post:
      tags:
        - InventoryOrderItem
      description: Get Order Item Log
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/OrderItemLogRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderItemLogResponse"
        "400":
          description: Bad Request
  /v5/inventory/clearEventQueue:
    post:
      tags:
        - InventoryOrderItem
      description: Clear pending events
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/ClearEventQueueRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderItemLogResponse"
        "400":
          description: Bad Request
  /v1/pendingItem:
    get:
      tags:
        - InventoryPendingItems
      description: Get Pending Items
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
        - $ref: "#/components/parameters/locationName"
        - $ref: "#/components/parameters/locationID"
        - $ref: "#/components/parameters/currentPage"
        - $ref: "#/components/parameters/numberPerPage"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/shipmentID"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPendingItemsResponse"
        "400":
          description: Bad Request
  /v1/pendingItem/release:
    post:
      tags:
        - InventoryPendingItems
      description: Release All Pending Items
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "400":
          description: Bad Request
  /v1/tenantConfig:
    get:
      tags:
        - InventoryTenantConfig
      description: Gets tenant config
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantConfigModel"
        "404":
          description: Not Found
    post:
      tags:
        - InventoryTenantConfig
      description: Creates or updates tenant config
      parameters:
        - $ref: "#/components/parameters/x-vol-tenant"
      requestBody:
        $ref: "#/components/requestBodies/UpdateTenantConfigRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantConfigModel"
        "400":
          description: Bad Request
  /v1/wave/suggestion:
    post:
      tags:
        - InventoryWave
      description: Query Wave Suggestion (as a post)
      requestBody:
        $ref: "#/components/requestBodies/WaveSuggestionRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaveSuggestionResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
  "/api/v1/action/delete/{actionID}":
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
      summary: deleteAction
      parameters:
        - name: actionID
          in: path
          description: actionID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteAction
  /api/v1/action/noinv:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
      summary: saveNoInvAction
      parameters:
        - name: groupID
          in: query
          description: groupID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: loc
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupAfterAction"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupAfterAction"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: loc
      description: saveNoInvAction
  /api/v1/action/partial:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
      summary: savePartialAction
      parameters:
        - name: groupID
          in: query
          description: groupID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: loc
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupAfterAction"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupAfterAction"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: loc
      description: savePartialAction
  /api/v1/action/test:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
      summary: testAction
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupAfterAction"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: testAction
  "/api/v1/action/{actionID}":
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
      summary: getAction
      parameters:
        - name: actionID
          in: path
          description: actionID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupAfterAction"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getAction
  /api/v1/authtest:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: orderRouting
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: orderRouting
  /api/v1/authtest/associate:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: storeAssociate
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: storeAssociate
  /api/v1/authtest/filters:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: getFilters
      responses:
        "200":
          description: OK
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getFilters
  /api/v1/authtest/manager:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: storeManager
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: storeManager
  /api/v1/authtest/user/behaviors:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: getAuthorizedUserRoles
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getAuthorizedUserRoles
  /api/v1/authtest/user/hello:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: home
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: home
  /api/v1/authtest/user/principal:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: getPrincipal
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Principal"
            application/json:
              schema:
                $ref: "#/components/schemas/Principal"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getPrincipal
  /api/v1/authtest/user/username:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      summary: getAuthorizedUserName
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getAuthorizedUserName
  /api/v1/dataList:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
      summary: createCustomDataList
      requestBody:
        description: customDataList
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomDataList"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDataListResponse"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: customDataList
      description: createCustomDataList
  "/api/v1/dataList/{dataListID}":
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
      summary: getCustomDataList
      parameters:
        - name: dataListID
          in: path
          description: dataListID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDataListResponse"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getCustomDataList
    put:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
      summary: updateCustomDataList
      parameters:
        - name: dataListID
          in: path
          description: dataListID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: newDataList
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomDataList"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDataListResponse"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: newDataList
      description: updateCustomDataList
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
      summary: deleteCustomDataList
      parameters:
        - name: dataListID
          in: path
          description: dataListID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteCustomDataList
  /api/v1/environment/export:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingEnvironment
      summary: exportEnvironment
      parameters:
        - name: environmentID
          in: query
          description: environmentID
          required: true
          schema:
            type: integer
            format: int32
        - name: siteID
          in: query
          description: siteID
          required: true
          schema:
            type: integer
            format: int32
        - name: tenantID
          in: query
          description: tenantID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentExportModel"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: exportEnvironment
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingEnvironment
      summary: importEnvironment
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentExportModel"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: importEnvironment
  /api/v1/filter/criteriaSet:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: saveCriteriaSetFilter
      requestBody:
        description: loc
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationCriteriaSetFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFilter"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: loc
      description: saveCriteriaSetFilter
  /api/v1/filter/customDataListFilter:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: saveCustomDataListFilter
      requestBody:
        description: filter
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomDataListFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFilter"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: filter
      description: saveCustomDataListFilter
  /api/v1/filter/customDataValueFilter:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: saveCustomDataValueFilter
      requestBody:
        description: customDataValueFilter
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomDataValueFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFilter"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: customDataValueFilter
      description: saveCustomDataValueFilter
  "/api/v1/filter/delete/{filterID}":
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: deleteFilter
      parameters:
        - name: filterID
          in: path
          description: filterID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteFilter
  /api/v1/filter/testcriteria:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: testFilter
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFilter"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: testFilter
  /api/v1/filter/testset:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: testSetFilter
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFilter"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: testSetFilter
  "/api/v1/filter/{filterID}":
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      summary: getFilter
      parameters:
        - name: filterID
          in: path
          description: filterID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFilter"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getFilter
  "/api/v1/group/delete/{groupID}":
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      summary: deleteGroup
      parameters:
        - name: groupID
          in: path
          description: groupID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteGroup
  /api/v1/group/test:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      summary: testGroup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDocumentationLocationGroup"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: testGroup
  "/api/v1/group/{groupID}":
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      summary: getGroup
      parameters:
        - name: groupID
          in: path
          description: groupID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDocumentationLocationGroup"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getGroup
  "/api/v1/group/{groupID}/setFilters":
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      summary: setGroupFilters
      parameters:
        - name: groupID
          in: path
          description: groupID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: filterIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDocumentationLocationGroup"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: filterIDs
      description: setGroupFilters
  "/api/v1/group/{groupID}/setSorts":
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      summary: setGroupSorts
      parameters:
        - name: groupID
          in: path
          description: groupID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: sorts
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LocationSort"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDocumentationLocationGroup"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: sorts
      description: setGroupSorts
  /api/v1/routing/candidates:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
      summary: suggestCandidates
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CandidateSuggestionsRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateSuggestionsResponse"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: suggestCandidates
  /api/v1/routing/samplerequest:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
      summary: getSampleRequest
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestionRequest"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getSampleRequest
  /api/v1/routing/suggestion:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
      summary: suggestRouting
      parameters:
        - name: returnSuggestionLog
          in: query
          description: returnSuggestionLog
          schema:
            type: boolean
            default: false
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuggestionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestionResponse"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: suggestRouting
  /api/v1/settings:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: getSettings
      parameters:
        - name: getDefaults
          in: query
          description: getDefaults
          schema:
            type: boolean
            default: true
        - name: siteID
          in: query
          description: siteID
          schema:
            type: integer
            format: int32
        - name: tenantID
          in: query
          description: tenantID
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderRoutingSettings"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getSettings
    put:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: saveSettings
      requestBody:
        description: settings
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRoutingSettings"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderRoutingSettings"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: settings
      description: saveSettings
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: deleteSettings
      parameters:
        - name: siteID
          in: query
          description: siteID
          schema:
            type: integer
            format: int32
        - name: tenantID
          in: query
          description: tenantID
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteSettings
  /api/v1/settings/filterAttributes:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: getFilterAttributes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilterAttribute"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getFilterAttributes
    put:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: saveFilterAttribute
      requestBody:
        description: attribute
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterAttribute"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterAttribute"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: attribute
      description: saveFilterAttribute
  "/api/v1/settings/filterAttributes/{attributeName}":
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: getFilterAttribute
      parameters:
        - name: attributeName
          in: path
          description: attributeName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterAttribute"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getFilterAttribute
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      summary: deleteFilterAttribute
      parameters:
        - name: attributeName
          in: path
          description: attributeName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterAttribute"
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteFilterAttribute
  /api/v1/site:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSite
      summary: createSite
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiDocumentationCreateSiteRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiDocumentationSite"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: createSite
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSite
      summary: deleteTenantData
      requestBody:
        description: request
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DeleteSiteRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiDocumentationSite"
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: deleteTenantData
  "/api/v1/sort/delete/{sortID}":
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
      summary: deleteSort
      parameters:
        - name: sortID
          in: path
          description: sortID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      description: deleteSort
  /api/v1/sort/test:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
      summary: testSort
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationSort"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: testSort
  "/api/v1/sort/{sortID}":
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
      summary: getSort
      parameters:
        - name: sortID
          in: path
          description: sortID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationSort"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getSort
  /api/v1/tenant:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
      summary: createTenant
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiDocumentationCreateTenantRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiDocumentationTenant"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: createTenant
    delete:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
      summary: deleteTenantData
      requestBody:
        description: request
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/DeleteTenantRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiDocumentationTenant"
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: deleteTenantData
  /api/v1/tenant/clone:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
      summary: cloneTenantData
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiDocumentationCloneTenantRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiDocumentationTenant"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: request
      description: cloneTenantData
  /api/v1/group:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      summary: saveGroup
      requestBody:
        description: loc
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiDocumentationLocationGroup"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDocumentationLocationGroup"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: loc
      description: saveGroup
  /api/v1/routing/suggestionLog:
    get:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
      summary: getSuggestionLog
      parameters:
        - name: externalResponseID
          in: query
          description: externalResponseID
          schema:
            type: string
        - name: orderID
          in: query
          description: orderID
          schema:
            type: integer
            format: int32
        - name: responseID
          in: query
          description: responseID
          schema:
            type: integer
            format: int32
        - name: suggestionID
          in: query
          description: suggestionID
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JsonNode"
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      description: getSuggestionLog
  /api/v1/sort:
    post:
      tags:
        - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
      summary: saveSort
      requestBody:
        description: loc
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationSort"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationSort"
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: loc
      description: saveSort
tags:
  - name: Cart
    x-displayName: Cart
  - name: Channel
    x-displayName: Channel
  - name: ChannelGroup
    x-displayName: ChannelGroup
  - name: Checkout
    x-displayName: Checkout
  - name: Order
    x-displayName: Order
  - name: OrderAttribute
    x-displayName: OrderAttribute
  - name: OrderValidationCapability
    x-displayName: OrderValidationCapability
  - name: Quote
    x-displayName: Quote
  - name: Return
    x-displayName: Return
  - name: Wishlist
    x-displayName: Wishlist
  - name: InventoryBin
    x-displayName: InventoryBin
  - name: InventoryExportInventory
    x-displayName: InventoryExportInventory
  - name: InventoryFetchFileConfig
    x-displayName: InventoryFetchFileConfig
  - name: InventoryModifyInventory
    x-displayName: InventoryModifyInventory
  - name: InventoryPendingItems
    x-displayName: InventoryPendingItems
  - name: InventoryProductMapping
    x-displayName: InventoryProductMapping
  - name: InventorySilo
    x-displayName: InventorySilo
  - name: InventorySite
    x-displayName: InventorySite
  - name: InventoryTag
    x-displayName: InventoryTag
  - name: InventoryTagCategory
    x-displayName: InventoryTagCategory
  - name: InventoryTagcategory
    x-displayName: InventoryTagcategory
  - name: InventoryTenant
    x-displayName: InventoryTenant
  - name: InventoryAllocation
    x-displayName: InventoryAllocation
  - name: InventoryAudit
    x-displayName: InventoryAudit
  - name: Inventory
    x-displayName: Inventory
  - name: InventoryJob
    x-displayName: InventoryJob
  - name: InventoryOrderItem
    x-displayName: InventoryOrderItem
  - name: InventoryTenantConfig
    x-displayName: InventoryTenantConfig
  - name: InventoryWave
    x-displayName: InventoryWave
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingEnvironment
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingEnvironment
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingEnvironment
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSite
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSite
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSite
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
  - description: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
    name: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
    x-displayName: OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
x-tagGroups:
  - name: commerceruntime
    tags:
      - Cart
      - Channel
      - ChannelGroup
      - Checkout
      - Order
      - OrderAttribute
      - OrderValidationCapability
      - Quote
      - Return
      - Wishlist
  - name: inventory
    tags:
      - InventoryBin
      - InventoryExportInventory
      - InventoryFetchFileConfig
      - InventoryModifyInventory
      - InventoryPendingItems
      - InventoryProductMapping
      - InventorySilo
      - InventorySite
      - InventoryTag
      - InventoryTagCategory
      - InventoryTagcategory
      - InventoryTenant
      - InventoryAllocation
      - InventoryAudit
      - Inventory
      - InventoryJob
      - InventoryOrderItem
      - InventoryTenantConfig
      - InventoryWave
  - name: orderrouting
    tags:
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAfterAction
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingAuth
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingDataList
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingEnvironment
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingFilter
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingGroup
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingRouting
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSettings
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSite
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingSort
      - OrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingOrderRoutingTenant
    description: Api Documentation
components:
  schemas:
    CartSummary:
      type: object
      properties:
        itemCount:
          type: integer
          description: Number of items in the active cart.
          format: int32
          nullable: true
        totalQuantity:
          type: integer
          description: Total quantity of all items in the cart
          format: int32
          nullable: true
        total:
          type: number
          description: Total cost of items in the active cart.
          format: double
          nullable: true
        isExpired:
          type: boolean
          description: "If true, the cart has reached its expiration date
            (Cart.ExpirationDate) and considered abandoned. \r

            Carts of anonymous shoppers expire after 14 days of
            inactivity."
          nullable: true
        hasActiveCart:
          type: boolean
          description: If true, the cart is active. A shopper has added an item to a cart.
          nullable: true
      additionalProperties: false
      description: Cart summary, which is the number of items in the active cart,
        total cost of items in the cart, and whether the cart has expired.
    CommerceRuntimePhone:
      type: object
      properties:
        home:
          type: string
          nullable: true
        mobile:
          type: string
          nullable: true
        work:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeAddress:
      type: object
      properties:
        address1:
          type: string
          nullable: true
        address2:
          type: string
          nullable: true
        address3:
          type: string
          nullable: true
        address4:
          type: string
          nullable: true
        cityOrTown:
          type: string
          nullable: true
        stateOrProvince:
          type: string
          nullable: true
        postalOrZipCode:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        addressType:
          type: string
          nullable: true
        isValidated:
          type: boolean
          nullable: true
      additionalProperties: false
    CommerceRuntimeContact:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        email:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        middleNameOrInitial:
          type: string
          nullable: true
        lastNameOrSurname:
          type: string
          nullable: true
        companyOrOrganization:
          type: string
          nullable: true
        phoneNumbers:
          $ref: "#/components/schemas/CommerceRuntimePhone"
        address:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
    AdminUserAuditInfo:
      type: object
      properties:
        updateDate:
          type: string
          format: date-time
          nullable: true
        createDate:
          type: string
          format: date-time
          nullable: true
        updateBy:
          type: string
          nullable: true
        createBy:
          type: string
          nullable: true
      additionalProperties: false
    FulfillmentInfo:
      type: object
      properties:
        fulfillmentContact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        isDestinationCommercial:
          type: boolean
          description: Indicates that the destination is commercial
          nullable: true
        shippingMethodCode:
          type: string
          description: "Code that uniquely identifies the shipping method such as
            \"Ground,\" \"Overnight,\" or \"Digital.\"\r

            The site's shipping settings lists the valid shipping
            methods specified for this site."
          nullable: true
        shippingMethodName:
          type: string
          description: Readable name of the shipping method
          nullable: true
        data:
          type: object
          description: Custom data originated by the shipping service.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Shipment information, which includes the shipping address, price,
        estimated delivery date, tracking information, method (for example,
        Ground, Overnight, or Pick-up), \r

        carrier (for example, USPS, UPS, FedEx), and current status (for
        example, Not Shipped, In Transit, Delayed, or Returned To Sender)."
    CommerceRuntimeDiscount:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the discount.
          format: int32
        name:
          type: string
          description: Name of the discount in the language specified by LocaleCode.
          nullable: true
        itemIds:
          type: array
          items:
            type: string
          description: List of discounts for each order item.
          nullable: true
        expirationDate:
          type: string
          description: Date when the discount expires. Default is null (no expiration date).
          format: date-time
          nullable: true
        hasMultipleTargetProducts:
          type: boolean
          description: "Indicates that the discount targets more than a product.  Used\r

            primarily for BoGa discounts with multiple targets."
      additionalProperties: false
      description: "Discounts that apply to the order, if any. For example, when the
        \r

        subtotal of the order exceeds a certain amount, or for free
        shipping."
    CommerceRuntimeAppliedDiscount:
      type: object
      properties:
        impact:
          type: number
          description: Value of the discount applied. This is a negative number to be
            subtracted from the original price to get the final price.
          format: double
          nullable: true
        discount:
          $ref: "#/components/schemas/CommerceRuntimeDiscount"
        couponCode:
          type: string
          description: Code of the coupon associated with the discount if a coupon code is
            required to get the discount.
          nullable: true
        excluded:
          type: boolean
          description: Determines whether or not this discount is set up to be ignored by
            the pricing runtime.
          nullable: true
      additionalProperties: false
      description: "Discount applied to the order, which is a negative number to be
        subtracted from the original price to get the final price. \r

        If multiple discounts for the order exist, this is the value
        most advantageous to the shopper."
    SuggestedDiscount:
      type: object
      properties:
        productCode:
          type: string
          nullable: true
        autoAdd:
          type: boolean
        discountId:
          type: integer
          format: int32
        hasMultipleProducts:
          type: boolean
        hasOptions:
          type: boolean
      additionalProperties: false
    CommerceRuntimeChangeMessage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the  message. System-supplied. Read-only.
          nullable: true
        correlationId:
          type: string
          description: Correlation Id
          nullable: true
        userId:
          type: string
          description: User Id that identifies the user that performed the related change
          nullable: true
        userFirstName:
          type: string
          description: User First Name
          nullable: true
        userLastName:
          type: string
          description: User Last Name
          nullable: true
        userScopeType:
          type: string
          description: User Type (e.g. Shopper, Admin, etc.)
          nullable: true
        appId:
          type: string
          description: App Id that identifies the user that performed the related change
          nullable: true
        appKey:
          type: string
          description: App Key
          nullable: true
        appName:
          type: string
          description: App Name
          nullable: true
        subjectType:
          type: string
          description: Subject of the message, for example, "Product." System-supplied.
            Read-only.
          nullable: true
        success:
          type: boolean
          description: Indicates if the message is related to a success or failure.
          nullable: true
        identifier:
          type: string
          description: Unique identifier to what the message pertains, which can be a cart
            item, cart or another generic entity. System-supplied. Read-only.
          nullable: true
        subject:
          type: string
          description: Text on the subject line of the message, for example, the product
            name. System-supplied. Read-only.
          nullable: true
        verb:
          type: string
          description: "Action applicable to the message. This can be \"Increased,\" when
            the product price has increased, \"Decreased,\" when the \r

            product price has decreased, and \"Invalidated,\" when
            the product is no longer available. System-supplied. Read-only."
          nullable: true
        message:
          type: string
          description: Human readable message. System-supplied. Read-only.
          nullable: true
        metadata:
          description: Data. This property will be a JSON array that will contain 0-N
            items, when there is 1 item it will still be an array containing
            only one item. System-supplied. Read-only.
          nullable: true
        oldValue:
          type: string
          description: Original price of the item. System-supplied. Read-only.
          nullable: true
          deprecated: true
        newValue:
          type: string
          description: Current price of the item. System-supplied. Read-only.
          nullable: true
          deprecated: true
        amount:
          type: number
          description: Monetary amount that pertains to the change if applicable
          format: double
          nullable: true
          deprecated: true
        createDate:
          type: string
          description: When the message was created. System-supplied. Read-only.
          format: date-time
          nullable: true
      additionalProperties: false
      description: A message displayed by the system based on the last  action, for
        example, when a product price has changed. System-supplied and
        read-only.
    ExtendedProperty:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeThresholdMessage:
      type: object
      properties:
        discountId:
          type: integer
          format: int32
        message:
          type: string
          nullable: true
        thresholdValue:
          type: number
          format: double
        showOnCheckout:
          type: boolean
        showInCart:
          type: boolean
        requiresCouponCode:
          type: boolean
      additionalProperties: false
    CommerceAggregate:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the shopper who created the cart.
          nullable: true
        id:
          type: string
          description: Unique identifier of the CommerceAggregate object (e.g. order,
            cart, wishlist, etc.).
          nullable: true
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        currencyCode:
          type: string
          description: ISO Currency Code. Currently, only USD is supported.
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        fulfillmentInfo:
          $ref: "#/components/schemas/FulfillmentInfo"
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          description: The discount that has been applied to the cart itself. If multiple
            discounts exist, this is the discount that the system applies
            because it offers the best savings for the shopper. This is a
            negative number.
          nullable: true
        suggestedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/SuggestedDiscount"
          nullable: true
        rejectedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/SuggestedDiscount"
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        subtotal:
          type: number
          description: Combined price for all cart items, including all selected options
            but excluding any discounts.
          format: double
          nullable: true
        discountedSubtotal:
          type: number
          description: Combined price for all cart items, including all selected options
            as well as any discounts.
          format: double
          nullable: true
        discountTotal:
          type: number
          description: Amount of the discounts applied to all items in the cart. This is a
            negative number.  This also includes the order level discounts.
          format: double
          nullable: true
        discountedTotal:
          type: number
          description: Subtotal minus the discounted total
          format: double
          nullable: true
        shippingTotal:
          type: number
          description: Shipping does not appear on cart.
          format: double
          nullable: true
        shippingSubTotal:
          type: number
          description: Shipping total without discounts applied.
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          description: Not implemented. Tax does not appear on cart.
          format: double
          nullable: true
        handlingTaxTotal:
          type: number
          description: Total tax on handling
          format: double
          nullable: true
        itemTaxTotal:
          type: number
          description: Not implemented. Tax does not appear on cart.
          format: double
          nullable: true
        taxTotal:
          type: number
          description: Tax does not appear on cart.
          format: double
          nullable: true
        feeTotal:
          type: number
          description: Not implemented. Total cost of fees for all items in the cart.
          format: double
          nullable: true
        total:
          type: number
          description: Final total amount of the order including all discounts, shipping,
            and tax.
          format: double
          nullable: true
        lineItemSubtotalWithOrderAdjustments:
          type: number
          description: Line Item Subtotals with Order Adjustments
          format: double
          nullable: true
        shippingAmountBeforeDiscountsAndAdjustments:
          type: number
          description: Shipping Amount before discount and adjustements
          format: double
          nullable: true
        lastValidationDate:
          type: string
          description: "Occasionally the commerce runtime may validate that item/product
            names, descriptions, and prices have not changed. \r

            If changed, it updates LastValidationDate."
          format: date-time
          nullable: true
        expirationDate:
          type: string
          description: "When the order will no longer be active. That is, the order is
            considered abandoned. \r

            Orders of anonymous shoppers expire after 14 days of
            inactivity. \r

            An order never expires for shoppers who are logged into
            their account. \r

            Date in UTC Date/Time."
          format: date-time
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: List of messages displayed by the system based on the last cart
            action, for example, when a product price has changed or is
            out-of-stock. System-supplied and read-only.
          nullable: true
        extendedProperties:
          type: array
          items:
            $ref: "#/components/schemas/ExtendedProperty"
          description: Extra properties (key-value pairs) that extend the primary object.
            Think of this as a property bag of string keys and string values.
          nullable: true
        discountThresholdMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeThresholdMessage"
          description: List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage
            objects that are valid for the current value of the cart/order.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Base class for cart and order
    ProductStock:
      type: object
      properties:
        manageStock:
          type: boolean
        isOnBackOrder:
          type: boolean
        availableDate:
          type: string
          format: date-time
          nullable: true
        stockAvailable:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CommerceRuntimeMeasurement:
      type: object
      properties:
        unit:
          type: string
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    CommerceRuntimePackageMeasurements:
      type: object
      properties:
        height:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        width:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        length:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
        weight:
          $ref: "#/components/schemas/CommerceRuntimeMeasurement"
      additionalProperties: false
      description: Physical dimensions of the package required to ship the product and
        its weight.
    ProductBase:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code that uniquely identifies the product.
          nullable: true
        name:
          type: string
          description: Name of the product, this is the current value of the product's
            name in the language specified by LocaleCode.
          nullable: true
        description:
          type: string
          description: Short description of the product in the language specified by
            LocaleCode.
          nullable: true
        goodsType:
          type: string
          description: Goods Type
          nullable: true
        isPackagedStandAlone:
          type: boolean
          description: Indicates that this product ships by itself.
        stock:
          $ref: "#/components/schemas/ProductStock"
        productReservationId:
          type: integer
          description: Reservation ID associated with this product in the bundle.
          format: int32
          nullable: true
        allocationId:
          type: integer
          description: Allocation ID associated with this product on this order.
          format: int32
          nullable: true
        allocationExpiration:
          type: string
          description: Allocation ID associated with this product on this order.
          format: date-time
          nullable: true
        measurements:
          $ref: "#/components/schemas/CommerceRuntimePackageMeasurements"
        fulfillmentStatus:
          type: string
          description: Fulfillment status of the product.
          nullable: true
      additionalProperties: false
    CommerceRuntimeProductOption:
      type: object
      properties:
        name:
          type: string
          description: Name of the product option that appears with the order item in the
            language specified by LocaleCode.
          nullable: true
        value:
          description: Value of the product option.
          nullable: true
        shopperEnteredValue:
          description: The value entered by the shopper if this is an option that requires
            shopper input, for example, a monogram.
          nullable: true
        attributeFQN:
          type: string
          description: Value of the product option.
          nullable: true
        dataType:
          type: string
          description: Value of the product option.
          nullable: true
        stringValue:
          type: string
          description: Value of the product option.
          nullable: true
      additionalProperties: false
      description: "Product option for the product listed on this order item. If the
        product contains \r

        configurable or stand-alone options, this is a product option
        that the shopper has selected."
    CommerceRuntimeProductPropertyValue:
      type: object
      properties:
        stringValue:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    CommerceRuntimeProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        isMultiValue:
          type: boolean
        values:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductPropertyValue"
          nullable: true
      additionalProperties: false
    CommerceRuntimeCategory:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the category. System-supplied and read-only.
          format: int32
          nullable: true
        parent:
          $ref: "#/components/schemas/CommerceRuntimeCategory"
      additionalProperties: false
      description: Categories to which the product belongs. Discounts can apply to
        categories where any product in the category is discounted.
    CommerceRuntimeProductPrice:
      type: object
      properties:
        price:
          type: number
          description: Price of the product. This is the price that the merchant intends
            to sell the product if no sale price is present.
          format: double
          nullable: true
        salePrice:
          type: number
          description: Current sale price of the product, which is a specific numerical
            amount (not a percentage off).
          format: double
          nullable: true
        tenantOverridePrice:
          type: number
          description: An override price applied on the product by the tenant.
          format: double
          nullable: true
        msrp:
          type: number
          description: MSRP of product.
          format: double
          nullable: true
        creditValue:
          type: number
          description: Credit Value when the product happens to be a gift card or similar
            product
          format: double
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the product
          nullable: true
        priceListEntryMode:
          type: string
          description: "Pricelist entry mode of the product.\r

            Note: possible values are below\r

            1. null : Product doesn't participate in pricelist\r

            2. Bulk : Bulk volume price available(unit price vary
            based on quantity)\r

            3. Simple:"
          nullable: true
      additionalProperties: false
      description: Price of the product with any sale and discounts applied.
    CommerceRuntimeBundledProduct:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductBase"
      properties:
        quantity:
          type: integer
          description: Quantity of the product included in the bundle.
          format: int32
        optionAttributeFQN:
          type: string
          description: Fully Qualified Name of the selected option's attribute
          nullable: true
        optionValue:
          description: Value of the selected option
          nullable: true
        creditValue:
          type: number
          description: Credit value.  Only populated if the bundled product is a gift card
            or digital credit
          format: double
          nullable: true
        deltaPrice:
          type: number
          description: Only populated for extras
          format: double
          nullable: true
      additionalProperties: false
      description: Describes products that are bundled inside of a main bundle product.
    CommerceRuntimeProduct:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductBase"
      properties:
        mfgPartNumber:
          type: string
          description: Manufacturing Part Number of the product.
          nullable: true
        upc:
          type: string
          description: Universal Product Code of the product.
          nullable: true
        sku:
          type: string
          description: Product Identifier specific to the store
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Types of fulfillment that are supported for this product.
          nullable: true
        imageAlternateText:
          type: string
          description: Descriptive text of the image associated with the product in the
            language specified by LocaleCode.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image that appears next to the product on the order
            item. Optional.
          nullable: true
        variationProductCode:
          type: string
          description: For configurable products, the unique identifier of the product
            variation that has been selected.
          nullable: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductOption"
          description: If the product contains configurable or stand-alone options, the
            list of product options that the shopper selected for this product.
          nullable: true
        properties:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductProperty"
          description: If the product contains properties, the list of properties that the
            shopper selected for this product.
          nullable: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeCategory"
          description: Categories to which this product belongs.
          nullable: true
        price:
          $ref: "#/components/schemas/CommerceRuntimeProductPrice"
        discountsRestricted:
          type: boolean
          description: Is the product discount restricted
          nullable: true
        discountsRestrictedStartDate:
          type: string
          description: Product discount restriction start date
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          description: Product discount restriction end date
          format: date-time
          nullable: true
        isRecurring:
          type: boolean
          description: If true, the product is purchased or fulfilled at regular
            intervals, for example, a monthly billing or a subscription.
          nullable: true
        isTaxable:
          type: boolean
          description: If true, the product is eligible for tax.
          nullable: true
        productType:
          type: string
          description: Type of product, which can be a product with configurable options,
            a product with stand-alone options, or a simple product with no
            options.
          nullable: true
        productUsage:
          type: string
          description: Usage of the product, primarily used to indicate a bundle in this
            context
          nullable: true
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeBundledProduct"
          description: Products bundled with this product (if the current product is a
            bundle)
          nullable: true
      additionalProperties: false
      description: The product as it appears on the order item.
    CommerceUnitPrice:
      type: object
      properties:
        extendedAmount:
          type: number
          description: "Extended amount, this is in order of precedence: OverrideAmount,
            SaleAmount, ListAmount"
          format: double
          nullable: true
        listAmount:
          type: number
          description: Product list amount.
          format: double
          nullable: true
        saleAmount:
          type: number
          description: Sale amount indicated on the product.
          format: double
          nullable: true
        overrideAmount:
          type: number
          description: Amount as manually overridden by the Merchant
          format: double
          nullable: true
      additionalProperties: false
      description: Pricing details for the product listed on a cart item, including
        the original price, discount amount, and final price.
    CommerceRuntimeAppliedProductDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      properties:
        productQuantity:
          type: integer
          description: Quantity of products priced. This is always one unless calculating
            pricing on the order or cart.
          format: int32
          nullable: true
          deprecated: true
        impactPerUnit:
          type: number
          description: Impact for a quantity of one product; that is, the value of the
            discount for one product.
          format: double
          nullable: true
          deprecated: true
        appliesToSalePrice:
          type: boolean
          description: Determines if the discount applies to the sale price of the order
          nullable: true
      additionalProperties: false
      description: Details of the discount applied to a product.
    CommerceRuntimeAppliedLineItemProductDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceRuntimeAppliedProductDiscount"
      properties:
        appliesToSalePrice:
          type: boolean
          description: Determines if the discount applies to the sale price of the order
          nullable: true
        discountQuantity:
          type: integer
          description: The number of the line item that can be used for this particular
            discount.
          format: int32
      additionalProperties: false
    ShippingDiscount:
      type: object
      properties:
        methodCode:
          type: string
          description: Unique identifier of the shipping method discount.
          nullable: true
        discount:
          $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
      additionalProperties: false
      description: Value of the shipping discount.
    CommerceRuntimeAppliedLineItemShippingDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/ShippingDiscount"
      properties:
        methodCode:
          type: string
          description: Unique identifier of the shipping method discount.
          nullable: true
        discount:
          $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
        discountQuantity:
          type: integer
          description: The number of the line item that can be used for this particular
            discount.
          format: int32
        impactPerUnit:
          type: number
          description: The impact of this discount pur discount quantity.
          format: double
      additionalProperties: false
    CommerceItem:
      type: object
      properties:
        localeCode:
          type: string
          description: "Locale code for language that appears in text and descriptions on
            the site, for example, en_US. \r

            This is not the currency code. Currently only en_US is
            supported."
          nullable: true
        purchaseLocation:
          type: string
          description: "The location where the product is being purchased.. default is
            null. Products can have different prices\r

            by purchaseLocation via custom priceListResolution..."
          nullable: true
        lineId:
          type: integer
          description: "The line id assigned to the order item. Visible only in the Admin,
            this is set from the Admin or\r

            in CommerceRuntime when a cart is converted to an
            order."
          format: int32
          nullable: true
        product:
          $ref: "#/components/schemas/CommerceRuntimeProduct"
        quantity:
          type: integer
          description: Number of products ordered.
          format: int32
        isRecurring:
          type: boolean
          description: If true, the cart item lists a product that can be purchased or
            fulfilled at regular intervals, for example, monthly billing or a
            subscription.
          nullable: true
        isTaxable:
          type: boolean
          description: Not implemented. If true, the cart item is eligible for tax.
          nullable: true
        subtotal:
          type: number
          description: Line item subtotal (quantity multiplied by price) before discounts.
          format: double
          nullable: true
        extendedTotal:
          type: number
          description: Line item extended total (quantity multiplied by unit extended
            price) before discounts.
          format: double
          nullable: true
        taxableTotal:
          type: number
          description: Line item subtotal (quantity multiplied by price) before discounts.
          format: double
          nullable: true
        discountTotal:
          type: number
          description: How much the shopper saves with the applied discount or sale price.
            This is a negative number.
          format: double
          nullable: true
        discountedTotal:
          type: number
          description: Subtotal minus any discounts.
          format: double
          nullable: true
        itemTaxTotal:
          type: number
          description: Total price of taxes that apply to products in this item.
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          description: Total price of taxes that apply to the shipping of this item.
          format: double
          nullable: true
        shippingTotal:
          type: number
          description: Total price of shipping that apply to this item.
          format: double
          nullable: true
        handlingAmount:
          type: number
          description: Handling Amount for this item
          format: double
          nullable: true
        feeTotal:
          type: number
          description: Not implemented. Total cost of fees that apply to this item.
          format: double
          nullable: true
        total:
          type: number
          description: Total price of this cart item taking into account any discounts.
          format: double
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/CommerceUnitPrice"
        productDiscount:
          $ref: "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
        productDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
          description: A list of discounts applied to the product
          nullable: true
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedLineItemShippingDiscount"
          description: A discount applied to the shipping
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        shippingAmountBeforeDiscountsAndAdjustments:
          type: number
          description: Shipping amount before Discounts and adjustments
          format: double
          nullable: true
        weightedOrderAdjustment:
          type: number
          description: Order Level Manual Adjustment applied to this Item
          format: double
          nullable: true
        weightedOrderDiscount:
          type: number
          description: Order Level Discount applied to this Item
          format: double
          nullable: true
        adjustedLineItemSubtotal:
          type: number
          description: Order Level taxable sub total
          format: double
          nullable: true
        totalWithoutWeightedShippingAndHandling:
          type: number
          description: Taxable Subtotal including Weighted Order amounts
          format: double
          nullable: true
        weightedOrderTax:
          type: number
          description: Order Level tax applied to this Item
          format: double
          nullable: true
        weightedOrderShipping:
          type: number
          description: Order Level Shipping applied to this Item
          format: double
          nullable: true
        weightedOrderShippingDiscount:
          type: number
          description: Order Level Shipping discount applied to this Item
          format: double
          nullable: true
        weightedOrderShippingManualAdjustment:
          type: number
          description: Order Level Shipping Manual Adjustment applied to this Item
          format: double
          nullable: true
        weightedOrderShippingTax:
          type: number
          description: Order Level Shipping Tax applied to this Item
          format: double
          nullable: true
        weightedOrderHandlingFee:
          type: number
          description: Order Level handling fee applied to this item
          format: double
          nullable: true
        weightedOrderHandlingFeeTax:
          type: number
          description: Order Level handling fee tax applied to this item
          format: double
          nullable: true
        weightedOrderHandlingFeeDiscount:
          type: number
          description: Order Level handling fee discount applied to this item
          format: double
          nullable: true
        weightedOrderDuty:
          type: number
          description: Order Level Duty applied to this Item
          format: double
          nullable: true
        totalWithWeightedShippingAndHandling:
          type: number
          description: Line item total with line item, Tax, Weighted Tax with Weighted
            shipping and handling costs
          format: double
          nullable: true
        weightedOrderHandlingAdjustment:
          type: number
          description: Order level handling adjusment that applies to this item.
          format: double
          nullable: true
        autoAddDiscountId:
          type: integer
          description: Track the discoutid from which the item was auto added
          format: int32
          nullable: true
      additionalProperties: false
      description: Base class for cart and order items
    CartItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceItem"
      properties:
        id:
          type: string
          description: Unique identifier of the item in the cart.
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        fulfillmentMethod:
          type: string
          description: Fulfillment method used to fulfill this item
          nullable: true
      additionalProperties: false
      description: Details of an item in the shopper's cart, such as the product name,
        stock count, unit price, discounts, quantity ordered, and total price.
    InvalidCoupon:
      type: object
      properties:
        couponCode:
          type: string
          description: Code that identifies the coupon.
          nullable: true
        reasonCode:
          type: integer
          description: Code that identifies the reason the coupon was invalid.
          format: int32
        reason:
          type: string
          description: Description text of the reason.
          nullable: true
        createDate:
          type: string
          description: Create date of the invalid coupon.
          format: date-time
        discountId:
          type: integer
          format: int32
      additionalProperties: false
      description: Represents a coupon that is considered invalid by the Mozu pricing
        service.
    CartMessage:
      type: object
      properties:
        message:
          type: string
          nullable: true
        messageType:
          type: string
          nullable: true
        productsRemoved:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProduct"
          nullable: true
      additionalProperties: false
    Cart:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceAggregate"
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
          description: List of items in the cart.
          nullable: true
        couponCodes:
          type: array
          items:
            type: string
          description: Coupon codes associated with this order.  Only set on order import.
          nullable: true
        invalidCoupons:
          type: array
          items:
            $ref: "#/components/schemas/InvalidCoupon"
          description: A list of invalid coupons that were attempted on the cart
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code
          nullable: true
        cartMessage:
          $ref: "#/components/schemas/CartMessage"
        cartMessages:
          type: array
          items:
            $ref: "#/components/schemas/CartMessage"
          nullable: true
        handlingAmount:
          type: number
          description: Order level handling fees excluding any discounts.
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          description: Handling fees for the Order as well as CartItems (e.g. if the Cart
            has a $5 handling fee and an CartItem has a $2 handling fee per item
            quantity and the quantity of items is 2 then the value in this
            property would be $9)
          format: double
          nullable: true
        handlingTotal:
          type: number
          description: Handling fees including any discounts.
          format: double
          nullable: true
      additionalProperties: false
      description: "Details of the current cart, including shopper's user ID, items
        listed in the cart, and any system messages. \r

        For each item, contains the list of available discounts and the
        actual discount applied to the cart item."
    CartItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
          nullable: true
      additionalProperties: false
      description: Collection of items in the cart. A collection is not paged.
    CartChangeMessageCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          nullable: true
      additionalProperties: false
      description: Collection of cart messages returned as a whole. A collection is
        not paged.
    Channel:
      type: object
      properties:
        tenantId:
          type: integer
          description: Tenant that owns the channel.
          format: int32
        code:
          type: string
          description: Code to uniquely identify the channel.
          nullable: true
        name:
          type: string
          description: Friendly name of the channel.
          nullable: true
        region:
          type: string
          description: Country code of the channel.
          nullable: true
        countryCode:
          type: string
          description: Country code of the channel.
          nullable: true
        groupCode:
          type: string
          description: Code to uniquely identify the channel group, if any that contains
            this channel.
          nullable: true
        siteIds:
          type: array
          items:
            type: integer
            format: int32
          description: A list of site Id's that this channel contains.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Channel used to group sites for commerce purposes.
    ChannelCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
          nullable: true
      additionalProperties: false
    ChannelGroup:
      type: object
      properties:
        tenantId:
          type: integer
          description: Tenant that owns the channel.
          format: int32
        code:
          type: string
          description: Code to uniquely identify the channel.
          nullable: true
        name:
          type: string
          description: Friendly name of the channel.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Used to group channels together to manage common channel information.
    ChannelGroupCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ChannelGroup"
          nullable: true
      additionalProperties: false
    OrderAttribute:
      type: object
      properties:
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        fullyQualifiedName:
          type: string
          nullable: true
        attributeDefinitionId:
          type: integer
          format: int32
          nullable: true
        values:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    CommerceRuntimeOrderItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceItem"
      properties:
        id:
          type: string
          description: Unique identifier of the order line item. System-supplied and
            read-only.
          nullable: true
        destinationId:
          type: string
          description: The destination associated with this item when used with a
            multi-ship checkout.
          nullable: true
        originalCartItemId:
          type: string
          description: "Unique identifier of the cart item that is associated with this
            line item. \r

            (This is the original Cart Item ID expressed as a
            GUID.)"
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        fulfillmentMethod:
          type: string
          description: Fulfillment method used to fulfill this item
          nullable: true
        dutyAmount:
          type: number
          description: Duty or Tariff for this item
          format: double
          nullable: true
        expectedDeliveryDate:
          type: string
          description: Expected Delivery Date of shipment
          format: date-time
          nullable: true
      additionalProperties: false
      description: A single line item of an order.
    CheckoutGrouping:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this grouping.
          nullable: true
        destinationId:
          type: string
          description: The DestinationId used by items in this grouping, which may be
            {null}.
          nullable: true
        fulfillmentMethod:
          type: string
          description: The FulfillmentMethod used by items in this grouping.
          nullable: true
        orderItemIds:
          type: array
          items:
            type: string
          description: Identifiers of the items that make up this grouping.
          nullable: true
        shippingMethodCode:
          type: string
          description: "Code that uniquely identifies the shipping method such as
            \"Ground,\" \"Overnight,\" or \"Digital.\"\r

            The site's shipping settings lists the valid shipping
            methods specified for this site."
          nullable: true
        shippingMethodName:
          type: string
          description: Readable name of the shipping method.
          nullable: true
        standaloneGroup:
          type: boolean
          description: Indicates whether a non ship group should combine with a ship group
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingDiscount"
          nullable: true
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        dutyAmount:
          type: number
          description: Any duty fee applied directly to this group. Items can also have
            their own duty fee.
          format: double
          nullable: true
        dutyTotal:
          type: number
          description: Total raw duty amounts for this group.
          format: double
        shippingAmount:
          type: number
          description: If a shipping method applies directly to this grouping (versus the
            items), this is the raw shipping amount for the group.
          format: double
          nullable: true
        shippingSubTotal:
          type: number
          description: The raw shipping amount minus shipping discounts.
          format: double
        itemLevelShippingDiscountTotal:
          type: number
          description: The total value of item-level shipping discounts applied to this
            group.
          format: double
        orderLevelShippingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) shipping discounts
            applied to this group.
          format: double
        shippingTax:
          type: number
          description: Group-level shipping tax. Does not account for item shipping tax.
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          description: The total shipping tax for this group, accounting for both
            group-level and item-level shipping tax.
          format: double
        shippingTotal:
          type: number
          description: The total shipping cost for this group, accounting for discounts
            and tax.
          format: double
        handlingAmount:
          type: number
          description: The handling fee amount that's applicable to this grouping.
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          description: The total raw handling amounts minus handling discounts.
          format: double
        itemLevelHandlingDiscountTotal:
          type: number
          description: The total value of item-level handling discounts applied to this
            group.
          format: double
        orderLevelHandlingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) handling discounts
            applied to this group.
          format: double
        handlingTax:
          type: number
          description: Group-level handling tax. Does not account for item handling tax.
          format: double
          nullable: true
        handlingTaxTotal:
          type: number
          description: The total handling tax for this group, accounting for both
            group-level and item-level handling tax.
          format: double
        handlingTotal:
          type: number
          description: The total handling cost for this group, accounting for discounts
            and tax.
          format: double
        taxData:
          type: object
          nullable: true
      additionalProperties: false
    CommerceRuntimeDestination:
      type: object
      properties:
        id:
          type: string
          description: An identifier for this entry.
          nullable: true
        destinationContact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        isDestinationCommercial:
          type: boolean
          description: Indicates that the destination is commercial
          nullable: true
        data:
          type: object
          description: Custom data
          nullable: true
      additionalProperties: false
    PaymentActionTarget:
      type: object
      properties:
        targetType:
          type: string
          description: Specifies if the
            Mozu.CommerceRuntime.Contracts.Payments.PaymentActionTarget.TargetId
            is a Checkout Id, Order Id, or Return Id.
          nullable: true
        targetId:
          type: string
          description: The Id of the Checkout/Order/Return to target.
          nullable: true
        targetNumber:
          type: integer
          description: The number of the Checkout/Order/Return to target.
          format: int32
          nullable: true
      additionalProperties: false
    PaymentCardReference:
      type: object
      properties:
        paymentOrCardType:
          type: string
          description: Card type such as Visa, MasterCard, American Express, or Discover.
          nullable: true
        cardNumberPartOrMask:
          type: string
          description: "The visible part of the card number that the merchant uses to
            refer to \r

            payment information, for example, the last for digits of
            the card number."
          nullable: true
        expireMonth:
          type: integer
          description: Month when the card expires.
          format: int32
        expireYear:
          type: integer
          description: Year when the card expires.
          format: int32
        bin:
          type: string
          description: Year when the card expires.
          nullable: true
      additionalProperties: false
    PaymentCard:
      type: object
      allOf:
        - $ref: "#/components/schemas/PaymentCardReference"
      properties:
        paymentServiceCardId:
          type: string
          description: Credit card number.
          nullable: true
        isUsedRecurring:
          type: boolean
          description: If true, the credit card is charged on a regular interval, such as
            for a subscription. (Not supported currently.)
          nullable: true
        nameOnCard:
          type: string
          description: Card holder's name as it appears on the card.
          nullable: true
        isCardInfoSaved:
          type: boolean
          description: If true, the card information is stored in the customer's account.
        isTokenized:
          type: boolean
          description: If true, the card is tokenized by external provider
      additionalProperties: false
      description: "If the customer is paying by credit card, the card holder's
        details, such as the name on the card, number, billing \r

        address, and expiration dates."
    PaymentToken:
      type: object
      properties:
        paymentServiceTokenId:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimePurchaseOrderPaymentTerm:
      type: object
      properties:
        code:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimePurchaseOrderCustomField:
      type: object
      properties:
        code:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    PurchaseOrderPayment:
      type: object
      properties:
        purchaseOrderNumber:
          type: string
          description: Purchase order number
          nullable: true
        paymentTerm:
          $ref: "#/components/schemas/CommerceRuntimePurchaseOrderPaymentTerm"
        customFields:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePurchaseOrderCustomField"
          description: Memo/custom fields
          nullable: true
      additionalProperties: false
      description: Purchase order payment
    CheckPayment:
      type: object
      properties:
        checkNumber:
          type: string
          nullable: true
      additionalProperties: false
    BillingInfo:
      type: object
      properties:
        paymentType:
          type: string
          description: "Type of payment, such as credit card, check by mail, or PayPal.\r

            see
            Mozu.CommerceRuntime.Contracts.Payments.PaymentTypeConst for valid
            values"
          nullable: true
        paymentWorkflow:
          type: string
          nullable: true
        billingContact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        isSameBillingShippingAddress:
          type: boolean
          description: Indicates that billing and shipping address are the same
        card:
          $ref: "#/components/schemas/PaymentCard"
        token:
          $ref: "#/components/schemas/PaymentToken"
        purchaseOrder:
          $ref: "#/components/schemas/PurchaseOrderPayment"
        check:
          $ref: "#/components/schemas/CheckPayment"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        storeCreditCode:
          type: string
          description: The store credit to use for this purchase
          nullable: true
        storeCreditType:
          type: string
          description: The type of store credit used for this purchase
          nullable: true
        customCreditType:
          type: string
          description: Name of custom stored credit type
          nullable: true
        externalTransactionId:
          type: string
          description: Transaction Id from third party payment source like Visa Checkout,
            Amazon
          nullable: true
        data:
          type: object
          description: Custom data from payment providers
          nullable: true
      additionalProperties: false
      description: "Customer's payment details such as payment type (credit card,
        check by mail, or PayPal)\r

        and cardholder information if payment is by credit card."
    SubPayment:
      type: object
      properties:
        status:
          type: string
          nullable: true
        amountCollected:
          type: number
          format: double
        amountCredited:
          type: number
          format: double
        amountRequested:
          type: number
          format: double
        amountRefunded:
          type: number
          format: double
        target:
          $ref: "#/components/schemas/PaymentActionTarget"
      additionalProperties: false
    PaymentGatewayResponseData:
      type: object
      properties:
        key:
          type: string
          description: Key from payment gateway
          nullable: true
        value:
          type: string
          description: Value from payment gateway
          nullable: true
      additionalProperties: false
      description: Payment gateway reponse data
    CapturableShipmentSummary:
      type: object
      properties:
        shipmentNumber:
          type: integer
          format: int32
        shipmentTotal:
          type: number
          format: double
      additionalProperties: false
    PaymentInteraction:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of this payment transaction interaction.
          nullable: true
        gatewayInteractionId:
          type: integer
          description: "Unique identifier of the gateway interaction. Used for credit card
            transactions, where the\r

            payment service creates a GatewayInteractionId for each
            transaction interaction."
          format: int32
          nullable: true
        paymentId:
          type: string
          description: Unique identifier of the original transaction of which this current
            interaction is a part.
          nullable: true
        orderId:
          type: string
          description: Unique identifier of the order with which this transaction is
            associated.
          nullable: true
        target:
          $ref: "#/components/schemas/PaymentActionTarget"
        currencyCode:
          type: string
          description: ISO currency code for the transaction. Currently, only USD is
            supported.
          nullable: true
        interactionType:
          type: string
          description: "Types of transaction interactions which can be \"Authorization,\"
            \"Capture,\" \"AuthorizeAndCapture,\"\r

            \"Void,\" or \"Credit,\" \"CheckRequested,\" or
            \"CheckReceived.\""
          nullable: true
        checkNumber:
          type: string
          description: If paying by check, the check number.
          nullable: true
        status:
          type: string
          description: Status of the payment transaction interaction which can be either
            "Success" or "Failure."
          nullable: true
        paymentEntryStatus:
          type: string
          description: Status of the payment when the transaction interaction was created
          nullable: true
        isRecurring:
          type: boolean
          description: If true, the product is purchased or fulfilled at regular
            intervals, for example, a monthly billing or a subscription. (Not
            currently implemented.)
          nullable: true
        isManual:
          type: boolean
          description: If the payment is a manual payment, this is set to true
        gatewayTransactionId:
          type: string
          description: Unique identifier of the transaction supplied by PCIaaS.
          nullable: true
        gatewayAuthCode:
          type: string
          description: If required by the payment gateway, the authorization code of the
            transaction. Supplied by PCIaaS.
          nullable: true
        gatewayAVSCodes:
          type: string
          description: Gateway AVS Codes. Supplied by PCIaaS.
          nullable: true
        gatewayCVV2Codes:
          type: string
          description: Gateway CVV2 Codes. Supplied by PCIaaS.
          nullable: true
        gatewayResponseCode:
          type: string
          description: Gateway response code. Supplied by PCIaaS.
          nullable: true
        gatewayResponseText:
          type: string
          description: Gateway response text. Supplied by PCIaaS.
          nullable: true
        gatewayResponseData:
          type: array
          items:
            $ref: "#/components/schemas/PaymentGatewayResponseData"
          description: A List of payment response data required to act on authorization
            when using external order management systems
          nullable: true
        paymentTransactionInteractionIdReference:
          type: integer
          description: "Unique identifier of previous PaymentTransactionInteraction that
            this PaymentTransactionInteraction is modifying.\r

            For instance, when crediting a capture, set the
            PaymentTransactionInteractionIdReference to the capture
            PaymentTransactionInteractionID."
          format: int32
          nullable: true
        amount:
          type: number
          description: Amount of funds associated with this interaction.
          format: double
          nullable: true
        note:
          type: string
          description: Note to be entered by merchant/application
          nullable: true
        interactionDate:
          type: string
          description: Date the interaction occurred
          format: date-time
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        returnId:
          type: string
          description: Return Id, if the interaction is a Credit for a return-refund.
          nullable: true
        refundId:
          type: string
          description: Refund Id, if the interaction is for a stand alone refund.
          nullable: true
        capturableShipmentsSummary:
          type: array
          items:
            $ref: "#/components/schemas/CapturableShipmentSummary"
          description: Stores pairings of shipment number to shipment total for all
            captured shipments. This was added for generating TLogs.
          nullable: true
      additionalProperties: false
      description: "A single interaction of a potential list of intereactions for a
        transaction. The scope of the transaction is the entire payment\r

        interchange. It is created upon authorization and is used for
        all subsequent interactions performed against the authorize,\r

        such as consecutive captures."
    GatewayGiftCard:
      type: object
      properties:
        cardNumber:
          type: string
          nullable: true
        amount:
          type: number
          format: double
        currencyCode:
          type: string
          nullable: true
      additionalProperties: false
    Payment:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of this order transaction.
          nullable: true
        groupId:
          $ref: "#/components/schemas/PaymentActionTarget"
        paymentServiceTransactionId:
          type: string
          description: Unique identifier of the transaction, specified by the payment
            service processesing this transaction.
          nullable: true
        availableActions:
          type: array
          items:
            type: string
          description: Actions available to the payment
          nullable: true
        orderId:
          type: string
          description: Unique identifier of the order with which this transaction is
            associated.
          nullable: true
        paymentType:
          type: string
          description: Type of Payment
          nullable: true
        paymentWorkflow:
          type: string
          description: The source of data for this payment.  By default, this will be set
            to 'mozu'
          nullable: true
        externalTransactionId:
          type: string
          description: The external/third party transaction Id for this payment. This is
            used to store the transaction Id from digital wallet like Visa
            Checkout
          nullable: true
        billingInfo:
          $ref: "#/components/schemas/BillingInfo"
        data:
          type: object
          description: Custom data from payment providers
          nullable: true
        status:
          type: string
          description: Current status of this transaction which are described by the
            PaymentStatusConst class.
          nullable: true
        subPayments:
          type: array
          items:
            $ref: "#/components/schemas/SubPayment"
          description: List of sub payments that correspond to child orders in case of
            multiship orders.
          nullable: true
        interactions:
          type: array
          items:
            $ref: "#/components/schemas/PaymentInteraction"
          description: "List of intereactions for this transaction. A transaction is
            created upon authorization and lasts across the payment \r

            interchange, which can consist of multiple interactions,
            such as consecutive captures."
          nullable: true
        isRecurring:
          type: boolean
          description: "If true, the product is purchased or fulfilled at regular
            intervals, for example, \r

            monthly billing or a subscription. (Not currently
            supported.)"
        amountCollected:
          type: number
          description: Amount collected on the payment
          format: double
        amountCredited:
          type: number
          description: Amount credited back to the payment.
          format: double
        amountRequested:
          type: number
          description: "Derived from the Amount on the initial payment create, used to
            help storefront determine how much can be captured for multiple
            payments.\r

            See Order.AmountRemainingForPayment for an example."
          format: double
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the payment.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        gatewayGiftCard:
          $ref: "#/components/schemas/GatewayGiftCard"
      additionalProperties: false
      description: "Payment transaction associated with this order. It is the entire
        payment interchange between the merchant who is forwarding the
        customer's payment \r

        information and the payment service who is authorizing and
        capturing payment. Payment can be either by credit card, check, or
        PayPal. (PayPal not\r

        currently supported.)"
    CommerceRuntimeShopperNotes:
      type: object
      properties:
        giftMessage:
          type: string
          description: Gift message associated with this order.
          nullable: true
        comments:
          type: string
          description: Comments associated with this order.
          nullable: true
      additionalProperties: false
      description: Notes that the shopper has added to this order, for example, a gift
        message or other comments.
    Checkout:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier.
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
        number:
          type: integer
          description: A checkout number that is only assigned after the checkout is placed.
          format: int32
          nullable: true
        originalCartId:
          type: string
          description: Unique identifier for the cart that was converted to checkout.
          nullable: true
        submittedDate:
          type: string
          description: When the customer placed (submitted) the order.
          format: date-time
          nullable: true
        type:
          type: string
          description: Is this Order Online or Offline? Online means shopper entered at
            checkout, offline means a phone order.
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          description: List of items in the checkout.
          nullable: true
        groupings:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutGrouping"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeDestination"
          nullable: true
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          description: "Payment transaction associated with this checkout. It is the
            entire payment interchange between the merchant \r

            who is forwarding the customer's payment information and
            the payment service who is authorizing and \r

            capturing payment. Payment can be either by credit card,
            check, or PayPal."
          nullable: true
        amountRemainingForPayment:
          type: number
          description: "A counter for how much of the total has not been claimed by
            payments.\r

            This is computed by Total - (sum of Payments where State
            is not Voided/Declined)"
          format: double
        acceptsMarketing:
          type: boolean
          description: Does the customer accept marketing
          nullable: true
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        email:
          type: string
          description: Email address for checkout
          nullable: true
        customerTaxId:
          type: string
          description: The customers tax ID. If Customer Account ID exists in the system,
            will set this.
          nullable: true
          readOnly: true
        isTaxExempt:
          type: boolean
          description: Unique identifier of the customer account.
          nullable: true
          readOnly: true
        currencyCode:
          type: string
          description: ISO Currency Code.
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the checkout
          nullable: true
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/OrderAttribute"
          nullable: true
        shopperNotes:
          $ref: "#/components/schemas/CommerceRuntimeShopperNotes"
        availableActions:
          type: array
          items:
            type: string
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        locationCode:
          type: string
          description: Identifies the location at which the order was placed if the order
            was placed externally.
          nullable: true
        ipAddress:
          type: string
          description: IP address of the user placing the order. (User or customer?)
          nullable: true
        sourceDevice:
          type: string
          description: Source device of the user placing the order. (User or customer?)
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        couponCodes:
          type: array
          items:
            type: string
          description: Coupon codes associated with this order.
          nullable: true
        invalidCoupons:
          type: array
          items:
            $ref: "#/components/schemas/InvalidCoupon"
          description: A list of invalid coupons that were attempted on the order.
          nullable: true
        suggestedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/SuggestedDiscount"
          nullable: true
        discountThresholdMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeThresholdMessage"
          description: List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage
            objects that are valid for the current value of the cart/order.
          nullable: true
        dutyTotal:
          type: number
          description: Total duty fees
          format: double
          nullable: true
        feeTotal:
          type: number
          description: Total Fees
          format: double
        subTotal:
          type: number
          description: Subtotal before any coupon codes, taxes, fees, etc.
          format: double
        itemLevelProductDiscountTotal:
          type: number
          description: The total value of item-level product discounts.
          format: double
        orderLevelProductDiscountTotal:
          type: number
          description: The total value of order-level (group-level) product discounts.
          format: double
        itemTaxTotal:
          type: number
          description: Total tax on products.
          format: double
        itemTotal:
          type: number
          description: The total product cost, accounting for discounts and tax.
          format: double
        shippingSubTotal:
          type: number
          description: Shipping does not appear on cart.
          format: double
        itemLevelShippingDiscountTotal:
          type: number
          description: The total value of item-level shipping discounts.
          format: double
        orderLevelShippingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) shipping discounts.
          format: double
        shippingTaxTotal:
          type: number
          description: Total tax on shipping.
          format: double
        shippingTotal:
          type: number
          description: Overall shipping total, accounting for item and order-level
            shipping costs, any shipping discounts, and shipping tax.
          format: double
        handlingSubTotal:
          type: number
          description: "Pre-Discounted Handling Subtotal of the CommerceAggregate and its
            Items.\r

            Returns {null} if the calculated value is negative."
          format: double
        itemLevelHandlingDiscountTotal:
          type: number
          description: The total value of item-level handling discounts.
          format: double
        orderLevelHandlingDiscountTotal:
          type: number
          description: The total value of order-level (group-level) handling discounts.
          format: double
        handlingTaxTotal:
          type: number
          description: Total tax on handling.
          format: double
        handlingTotal:
          type: number
          description: Overall handling total, accounting for line and order-level
            handling costs, any handling discounts, and handling tax.
          format: double
        total:
          type: number
          description: Final total
          format: double
      additionalProperties: false
    CheckoutCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Checkout"
          nullable: true
      additionalProperties: false
      description: Paged collection of checkouts.
    ShippingPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: ISO currency code such as US dollars. Currently, only USD is
            supported.
          nullable: true
        price:
          type: number
          description: How much the customer pays for shipping which includes any shipping
            discounts that the merchant offers.
          format: double
          nullable: true
      additionalProperties: false
      description: Shipping pricing information which includes the cost to the
        merchant and the price that the customer pays.
    CommerceRuntimeShippingRate:
      type: object
      allOf:
        - $ref: "#/components/schemas/ShippingPrice"
      properties:
        shippingMethodCode:
          type: string
          description: Code that uniquely identifies the selected shipping method.
          nullable: true
        shippingMethodName:
          type: string
          description: Shipping Method Name
          nullable: true
        shippingZoneCode:
          type: string
          description: The shipping zone to which this rate applies.
          nullable: true
        isValid:
          type: boolean
          description: If true, the shipping rate is valid.
          nullable: true
        messages:
          type: array
          items:
            type: string
          description: Messages and detail about why the shipping rate may be invalid.
          nullable: true
        data:
          type: object
          description: Custom data returned by the shipping service.
          nullable: true
      additionalProperties: false
      description: "How much the customer and merchant pay for shipping based on the
        current shipping rate. \r

        The cost can differ between the merchant and customer depending
        on any merchant discounts or \r

        extra fees."
    CheckoutGroupRates:
      type: object
      properties:
        groupingId:
          type: string
          nullable: true
        shippingRates:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeShippingRate"
          nullable: true
      additionalProperties: false
    CheckoutGroupShippingMethod:
      type: object
      properties:
        groupingId:
          type: string
          nullable: true
        shippingRate:
          $ref: "#/components/schemas/CommerceRuntimeShippingRate"
      additionalProperties: false
    CheckoutAction:
      type: object
      properties:
        actionName:
          type: string
          nullable: true
      additionalProperties: false
    DigitalWallet:
      type: object
      properties:
        digitalWalletData:
          type: string
          description: "Digital wallet data.\r

            Note: Transform the Json data to a string."
          nullable: true
        cartId:
          type: string
          description: "Cart ID\r

            Note: This property should only be set if the order is
            not created and user opted to \r

            create the order from cart using digital wallet."
          nullable: true
      additionalProperties: false
      description: Digital wallet contract
    ItemsForDestination:
      type: object
      properties:
        destinationId:
          type: string
          nullable: true
        itemIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    PaymentGatewayInteraction:
      type: object
      properties:
        gatewayInteractionId:
          type: integer
          description: Gateway Transaction Id from PCIaaS.  Not populated by incoming
            request.
          format: int32
          nullable: true
        gatewayTransactionId:
          type: string
          description: Gateway Transaction Id from PCIaaS.  Not populated by incoming
            request.
          nullable: true
        gatewayAuthCode:
          type: string
          description: Gateway Transaction Id from PCIaaS.  Not populated by incoming
            request.
          nullable: true
        gatewayAVSCodes:
          type: string
          description: Not populated by incoming request.
          nullable: true
        gatewayCVV2Codes:
          type: string
          description: Not populated by incoming request.
          nullable: true
        gatewayResponseCode:
          type: string
          description: Not populated by incoming request.
          nullable: true
        gatewayResponseText:
          type: string
          description: Gateway response text. Supplied by PCIaaS.
          nullable: true
      additionalProperties: false
      description: Represents a manually entered payment gateway interaction.
    PaymentAction:
      type: object
      properties:
        actionName:
          type: string
          description: Name of the Action to post
          nullable: true
        currencyCode:
          type: string
          description: ISO currency code for the transaction. Currently, only USD is
            supported.
          nullable: true
        checkNumber:
          type: string
          description: If paying by check, the check number.
          nullable: true
        returnUrl:
          type: string
          description: If paying by Paypal Express or some other potential non-gateway
            payment provider, a return redirect URL must be provided.
          nullable: true
        cancelUrl:
          type: string
          description: "If paying by Paypal Express or some other potential non-gateway
            payment provider, a cancel redirect URL must be provided.\r

            This will be used if something goes wrong on the
            third-party side."
          nullable: true
        amount:
          type: number
          description: Amount of funds to withdraw to pay for this order.
          format: double
          nullable: true
        interactionDate:
          type: string
          description: Date the interaction occurred
          format: date-time
          nullable: true
        newBillingInfo:
          $ref: "#/components/schemas/BillingInfo"
        referenceSourcePaymentId:
          type: string
          description: Reference payment id from which to copy the billing info.
          nullable: true
        manualGatewayInteraction:
          $ref: "#/components/schemas/PaymentGatewayInteraction"
        externalTransactionId:
          type: string
          nullable: true
        data:
          type: object
          description: Custom data from payment providers
          nullable: true
      additionalProperties: false
    Adjustment:
      type: object
      properties:
        amount:
          type: number
          format: double
          nullable: true
        description:
          type: string
          nullable: true
        internalComment:
          type: string
          nullable: true
      additionalProperties: false
    OrderNote:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the note. System-supplied and read-only.
          nullable: true
        text:
          type: string
          description: Text of the note. Maximum 250 characters.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: Internal notes that a merchant may add to the order. Maximum 250
        characters.
    OrderValidationMessage:
      type: object
      properties:
        orderItemId:
          type: string
          description: Order item id that this message applies to.  Can be empty.
          nullable: true
        messageType:
          type: string
          description: Identifier to indicate the type of the message, See
            OrderValidatorMessageTypeConst for options.
          nullable: true
        message:
          type: string
          description: Actual message returned by the validator.
          nullable: true
      additionalProperties: false
      description: Validation message returned by an order validator.
    OrderValidationResult:
      type: object
      properties:
        validationId:
          type: string
          description: Identifier set by the capability that states the id of this
            specific validation attempt
          nullable: true
        validatorName:
          type: string
          description: Identifier set by the capability that states the specific name of
            this validator.
          nullable: true
        validatorType:
          type: string
          description: Identifies the type of the validator (types are enumerated in
            OrderValidatorTypeConst)
          nullable: true
        status:
          type: string
          description: Status of the order validation result.  See
            OrderValidatorStatusConst for options.
          nullable: true
        createdDate:
          type: string
          description: DateTime that this validation result was created
          format: date-time
          nullable: true
        messages:
          type: array
          items:
            $ref: "#/components/schemas/OrderValidationMessage"
          description: Messages returned by the order validator
          nullable: true
      additionalProperties: false
      description: The result of an order validator.
    Refund:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of this order transaction.
          nullable: true
        orderId:
          type: string
          description: Unique identifier of the order with which this refund is associated.
          nullable: true
        reason:
          type: string
          description: Merchant-entered reason for this refund.
          nullable: true
        reasonCode:
          type: string
          nullable: true
        payment:
          $ref: "#/components/schemas/Payment"
        amount:
          type: number
          description: Amount refunded.
          format: double
        refundMethod:
          type: string
          description: Refund Method.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
      description: "Refund associated with an order. A refund is a single exchange of
        money from merchant to customer\r

        that either encapsulates a refund to a credit card or an
        issuance of a store credit.\r

        A refund does not reduce the 'amount collected' on an order and
        it is possible for a refund to exceed the total order amount."
    AbstractFulfillmentItem:
      type: object
      properties:
        productCode:
          type: string
          description: Code of the Product to be fulfilled.
          nullable: true
        quantity:
          type: integer
          description: Quantity of the order item
          format: int32
        fulfillmentItemType:
          type: string
          description: The type of fulfillment item
          nullable: true
        lineId:
          type: integer
          description: The line id associated with the fulfillment.
          format: int32
          nullable: true
        optionAttributeFQN:
          type: string
          nullable: true
      additionalProperties: false
    PackageItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractFulfillmentItem"
      additionalProperties: false
      description: An item in a package representing a particular product.
    CollectionOfPackageItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the fulfillment unit.
          nullable: true
        code:
          type: string
          description: "A human-readable identifier for this fulfillment unit.  If not set
            on create, will be autogenerated as a string of the form\r

            \    {fulfillmentUnitType} #{next available int}"
          nullable: true
        status:
          type: string
          description: "Status of the fulfillment unit\r

            See FulfillmentStatusConst"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/PackageItem"
          description: List of items in the fulfillment unit
          nullable: true
        fulfillmentDate:
          type: string
          description: Date of the pickup
          format: date-time
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        availableActions:
          type: array
          items:
            type: string
          description: Actions that can be taken on this fulfillment unit
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the fulfillment unit.
          nullable: true
      additionalProperties: false
    CommerceRuntimeTracking:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties: {}
          nullable: true
        number:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimePackage:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionOfPackageItem"
      properties:
        shippingMethodCode:
          type: string
          description: Code describing the shipping method.
          nullable: true
        shippingMethodName:
          type: string
          description: Name of the shipping method
          nullable: true
        shipmentId:
          type: string
          description: ID of the related shipment
          nullable: true
        trackingNumber:
          type: string
          description: Tracking number of this package (to support classic use cases)
          nullable: true
        trackingNumbers:
          type: array
          items:
            type: string
          description: Tracking number of this package
          nullable: true
        packagingType:
          type: string
          description: Packaging type of this package
          nullable: true
        hasLabel:
          type: boolean
          description: If there is a shipping label present for this Package, this will be
            set to true
        measurements:
          $ref: "#/components/schemas/CommerceRuntimePackageMeasurements"
        carrier:
          type: string
          description: Carrier of this package
          nullable: true
        signatureRequired:
          type: boolean
          description: SignatureRequired for this package
          nullable: true
        trackings:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeTracking"
          description: Tracking number and url data for this package
          nullable: true
      additionalProperties: false
      description: Describes a package that will be shipped to somebody
    CommerceRuntimePickupItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractFulfillmentItem"
      additionalProperties: false
      description: Item that goes into the pickup to determine which items will be
        picked up.
    CollectionOfPickupItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the fulfillment unit.
          nullable: true
        code:
          type: string
          description: "A human-readable identifier for this fulfillment unit.  If not set
            on create, will be autogenerated as a string of the form\r

            \    {fulfillmentUnitType} #{next available int}"
          nullable: true
        status:
          type: string
          description: "Status of the fulfillment unit\r

            See FulfillmentStatusConst"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePickupItem"
          description: List of items in the fulfillment unit
          nullable: true
        fulfillmentDate:
          type: string
          description: Date of the pickup
          format: date-time
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        availableActions:
          type: array
          items:
            type: string
          description: Actions that can be taken on this fulfillment unit
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the fulfillment unit.
          nullable: true
      additionalProperties: false
    Pickup:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionOfPickupItem"
      additionalProperties: false
      description: Represents a pickup by a customer from a merchant.
    DigitalPackageItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractFulfillmentItem"
      properties:
        giftCardCode:
          type: string
          nullable: true
      additionalProperties: false
    CollectionOfDigitalPackageItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the fulfillment unit.
          nullable: true
        code:
          type: string
          description: "A human-readable identifier for this fulfillment unit.  If not set
            on create, will be autogenerated as a string of the form\r

            \    {fulfillmentUnitType} #{next available int}"
          nullable: true
        status:
          type: string
          description: "Status of the fulfillment unit\r

            See FulfillmentStatusConst"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/DigitalPackageItem"
          description: List of items in the fulfillment unit
          nullable: true
        fulfillmentDate:
          type: string
          description: Date of the pickup
          format: date-time
          nullable: true
        fulfillmentLocationCode:
          type: string
          description: Location code from which to obtain this item
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        availableActions:
          type: array
          items:
            type: string
          description: Actions that can be taken on this fulfillment unit
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the fulfillment unit.
          nullable: true
      additionalProperties: false
    DigitalPackage:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionOfDigitalPackageItem"
      additionalProperties: false
    CommerceRuntimeShipmentStatusReason:
      type: object
      properties:
        reasonCode:
          type: string
          nullable: true
        moreInfo:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeLink:
      type: object
      properties:
        deprecation:
          type: string
          nullable: true
        href:
          type: string
          nullable: true
        hreflang:
          type: string
          nullable: true
        media:
          type: string
          nullable: true
        rel:
          type: string
          nullable: true
        templated:
          type: boolean
          nullable: true
        title:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeTaskInput:
      type: object
      properties:
        helpMessage:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        maxLength:
          type: integer
          format: int32
          nullable: true
        maximum:
          type: number
          format: double
        minLength:
          type: integer
          format: int32
          nullable: true
        minimum:
          type: number
          format: double
        name:
          type: string
          nullable: true
        options:
          type: array
          items: {}
          nullable: true
        pattern:
          type: string
          nullable: true
        required:
          type: boolean
          nullable: true
        type:
          type: string
          nullable: true
      additionalProperties: false
    FulfillmentTask:
      type: object
      properties:
        links:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CommerceRuntimeLink"
          nullable: true
        active:
          type: boolean
          nullable: true
        attributes:
          type: object
          additionalProperties: {}
          nullable: true
        completed:
          type: boolean
          nullable: true
        completedDate:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeTaskInput"
          nullable: true
        name:
          type: string
          nullable: true
        skippable:
          type: boolean
          nullable: true
        subject:
          type: string
          nullable: true
        taskId:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeWorkflowState:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties: {}
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        completedDate:
          type: string
          format: date-time
          nullable: true
        processInstanceId:
          type: string
          nullable: true
        shipmentState:
          type: string
          nullable: true
        taskList:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentTask"
          nullable: true
      additionalProperties: false
    ShipmentItem:
      type: object
      properties:
        lineId:
          type: integer
          format: int32
        originalOrderItemId:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
        productCode:
          type: string
          nullable: true
        variationProductCode:
          type: string
          nullable: true
        optionAttributeFQN:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        fulfillmentLocationCode:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        isTaxable:
          type: boolean
        quantity:
          type: integer
          format: int32
        unitPrice:
          type: number
          format: double
        actualPrice:
          type: number
          format: double
        overridePrice:
          type: number
          format: double
          nullable: true
        itemDiscount:
          type: number
          format: double
        lineItemCost:
          type: number
          format: double
        itemTax:
          type: number
          format: double
        shipping:
          type: number
          format: double
        shippingDiscount:
          type: number
          format: double
        shippingTax:
          type: number
          format: double
        handling:
          type: number
          format: double
        handlingDiscount:
          type: number
          format: double
        handlingTax:
          type: number
          format: double
        duty:
          type: number
          format: double
        isPackagedStandAlone:
          type: boolean
          nullable: true
        readyForPickupQuantity:
          type: integer
          format: int32
          nullable: true
        backorderReleaseDate:
          type: string
          format: date-time
          nullable: true
        measurements:
          $ref: "#/components/schemas/CommerceRuntimePackageMeasurements"
        options:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeProductOption"
          nullable: true
        data:
          type: object
          nullable: true
        taxData:
          type: object
          nullable: true
        weightedShipmentAdjustment:
          type: number
          format: double
        weightedLineItemTaxAdjustment:
          type: number
          format: double
        weightedShippingAdjustment:
          type: number
          format: double
        weightedShippingTaxAdjustment:
          type: number
          format: double
        weightedHandlingAdjustment:
          type: number
          format: double
        weightedHandlingTaxAdjustment:
          type: number
          format: double
        weightedDutyAdjustment:
          type: number
          format: double
        taxableShipping:
          type: number
          format: double
        taxableLineItemCost:
          type: number
          format: double
        taxableHandling:
          type: number
          format: double
      additionalProperties: false
    CommerceRuntimeCanceledReason:
      type: object
      properties:
        reasonCode:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        moreInfo:
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeCanceledItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ShipmentItem"
      properties:
        canceledReason:
          $ref: "#/components/schemas/CommerceRuntimeCanceledReason"
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
      additionalProperties: false
    CommerceRuntimeShipment:
      type: object
      properties:
        id:
          type: string
          description: ID of the shipment
          nullable: true
        externalShipmentId:
          type: string
          nullable: true
        number:
          type: integer
          format: int32
          nullable: true
        orderId:
          type: string
          nullable: true
        orderNumber:
          type: integer
          format: int32
        email:
          type: string
          nullable: true
        currencyCode:
          type: string
          nullable: true
        customerAccountId:
          type: integer
          format: int32
          nullable: true
        customerTaxId:
          type: string
          nullable: true
          readOnly: true
        shipmentType:
          type: string
          nullable: true
        shippingMethodCode:
          type: string
          nullable: true
        shippingMethodName:
          type: string
          nullable: true
        fulfillmentLocationCode:
          type: string
          nullable: true
        origin:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        destination:
          $ref: "#/components/schemas/CommerceRuntimeDestination"
        shipmentStatus:
          type: string
          nullable: true
        shipmentStatusReason:
          $ref: "#/components/schemas/CommerceRuntimeShipmentStatusReason"
        transferShipmentNumbers:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        isTransfer:
          type: boolean
          nullable: true
        originalShipmentNumber:
          type: integer
          format: int32
          nullable: true
        parentShipmentNumber:
          type: integer
          format: int32
          nullable: true
        fulfillmentStatus:
          type: string
          nullable: true
        workflowProcessId:
          type: string
          nullable: true
        workflowProcessContainerId:
          type: string
          nullable: true
        workflowState:
          $ref: "#/components/schemas/CommerceRuntimeWorkflowState"
        backorderCreatedDate:
          type: integer
          format: int32
          nullable: true
        fulfillmentDate:
          type: string
          format: date-time
          nullable: true
        orderSubmitDate:
          type: string
          format: date-time
          nullable: true
        pickStatus:
          type: string
          nullable: true
        pickType:
          type: string
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          nullable: true
        packages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePackage"
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentItem"
          nullable: true
        canceledItems:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeCanceledItem"
          nullable: true
        data:
          type: object
          nullable: true
        taxData:
          type: object
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        shipmentAdjustment:
          type: number
          format: double
        lineItemSubtotal:
          type: number
          format: double
        lineItemTaxAdjustment:
          type: number
          format: double
        lineItemTaxTotal:
          type: number
          format: double
        lineItemTotal:
          type: number
          format: double
        shippingAdjustment:
          type: number
          format: double
        shippingSubtotal:
          type: number
          format: double
        shippingTaxAdjustment:
          type: number
          format: double
        shippingTaxTotal:
          type: number
          format: double
        shippingTotal:
          type: number
          format: double
        handlingAdjustment:
          type: number
          format: double
        handlingSubtotal:
          type: number
          format: double
        handlingTaxAdjustment:
          type: number
          format: double
        handlingTaxTotal:
          type: number
          format: double
        handlingTotal:
          type: number
          format: double
        dutyAdjustment:
          type: number
          format: double
        dutyTotal:
          type: number
          format: double
        total:
          type: number
          format: double
        cost:
          type: number
          format: double
          nullable: true
        externalOrderId:
          type: string
          nullable: true
        isExpress:
          type: boolean
          nullable: true
        readyToCapture:
          type: boolean
        pickupInfo:
          type: object
          nullable: true
      additionalProperties: false
    Order:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceAggregate"
      properties:
        orderNumber:
          type: integer
          description: Order Number. This is an integer that is only assigned after an
            order is placed and enters the open state.
          format: int32
          nullable: true
        locationCode:
          type: string
          description: Identifies the location at which the order was placed if the order
            was placed externally.
          nullable: true
        version:
          type: string
          description: Version for concurrency purposes
          nullable: true
        parentOrderId:
          type: string
          description: If this Order has a parent order, this should be the parent's ID.
          nullable: true
        parentOrderNumber:
          type: integer
          description: If this order has a parent order, this should be the parent's
            Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.
          format: int32
          nullable: true
        parentCheckoutId:
          type: string
          description: If this order originated from a multi-ship enabled site, this is
            the identifier of the originating checkout.
          nullable: true
        parentCheckoutNumber:
          type: integer
          description: If this order originated from a multi-ship enabled site, this is
            the number of the originating checkout.
          format: int32
          nullable: true
        partialOrderNumber:
          type: integer
          description: If this order originated from a checkout, this is a sequence number
            out of the total orders created from that checkout.
          format: int32
          nullable: true
        partialOrderCount:
          type: integer
          description: If this order originated from a checkout, this is the total number
            of orders created from that checkout.
          format: int32
          nullable: true
        isPartialOrder:
          type: boolean
          description: Returns {true} if this order originated from a checkout and has
            sibling partial orders, otherwise {false}.
        parentReturnId:
          type: string
          description: If this order was created as part of a return, this should be the
            return's ID.
          nullable: true
        parentReturnNumber:
          type: integer
          description: If this order was created as part of a return, this should be the
            return's ReturnNumber.
          format: int32
          nullable: true
        originalCartId:
          type: string
          description: Unique identifier for the cart that was converted to order.
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the order
          nullable: true
        availableActions:
          type: array
          items:
            type: string
          description: Actions available to the payment
          nullable: true
        shopperNotes:
          $ref: "#/components/schemas/CommerceRuntimeShopperNotes"
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        customerTaxId:
          type: string
          description: The customers tax ID.  If Customer Account ID exists in the system,
            will set this.
          nullable: true
        isTaxExempt:
          type: boolean
          description: Unique identifier of the customer account.
          nullable: true
        email:
          type: string
          description: Email address of the customer at the time the order is placed.
          nullable: true
        ipAddress:
          type: string
          description: IP address of the user placing the order. (User or customer?)
          nullable: true
        sourceDevice:
          type: string
          description: Source device of the user placing the order. (User or customer?)
          nullable: true
        acceptsMarketing:
          type: boolean
          description: Does the customer accept marketing
          nullable: true
        status:
          type: string
          description: Current status of the order, which can be viewed in
            OrderStatusConst. System-supplied and read-only.
          nullable: true
        type:
          type: string
          description: Is this Order Online or Offline? Online means shopper entered at
            checkout, offline means a phone order.
          nullable: true
        paymentStatus:
          type: string
          description: "Current status of payment, which can be \"Null,\"
            \"AwaitingCheck,\" \"AwaitingPayment,\" \"Paid,\" \"Authorized,\" or
            \"Void.\" \r

            System-supplied and read-only."
          nullable: true
        returnStatus:
          type: string
          description: System-supplied and read-only.
          nullable: true
        isEligibleForReturns:
          type: boolean
          description: Marker for determining if the order is a) complete or b) has some
            items that are shipped and not part of any other return
        totalCollected:
          type: number
          description: Total amount of money collected on the order via payments.
          format: double
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/OrderAttribute"
          nullable: true
        adjustment:
          $ref: "#/components/schemas/Adjustment"
        shippingAdjustment:
          $ref: "#/components/schemas/Adjustment"
        handlingAdjustment:
          $ref: "#/components/schemas/Adjustment"
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingDiscount"
          nullable: true
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          description: The list of historically-applied handling discounts.  The active
            one will have IsExcluded == false
          nullable: true
        handlingAmount:
          type: number
          description: Order level handling fees excluding any discounts.
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          description: Handling fees for the Order as well as OrderItems (e.g. if the
            Order has a $5 handling fee and an OrderItem has a $2 handling fee
            per item quantity and the quantity of items is 2 then the value in
            this property would be $9)
          format: double
          nullable: true
        handlingTotal:
          type: number
          description: Handling fees including any discounts.
          format: double
          nullable: true
        dutyAmount:
          type: number
          description: Order level duty or tariff amount. Does not take into account
            duties or tariffs specifically on items on the order
          format: double
          nullable: true
        dutyTotal:
          type: number
          description: Duties or tariffs for the Order as well as OrderItems (e.g. if the
            Order has a $5 duty or tariff for any reason and an OrderItem has a
            $2 duty or tariff then the value in this property would be $7)
          format: double
          nullable: true
        fulfillmentStatus:
          type: string
          description: "Current fulfillment status, which can be \"NotFulfilled,\",
            \"PartiallyFulfilled\", or \"Fufilled.\" \r

            System-supplied and read-only.  Values are available in
            FulfillmentStatusConst of this class."
          nullable: true
        submittedDate:
          type: string
          description: When the customer placed (submitted) the order.
          format: date-time
          nullable: true
        cancelledDate:
          type: string
          description: Date the order was cancelled.
          format: date-time
          nullable: true
        closedDate:
          type: string
          description: Date the order was closed. A closed order means that the order has
            been processed and items shipped.
          format: date-time
          nullable: true
        acceptedDate:
          type: string
          description: When the order was accepted by the merchant
          format: date-time
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/OrderNote"
          description: Internal notes that a merchant may add to the order. Maximum 250
            characters.
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          description: List of items in the order.
          nullable: true
        validationResults:
          type: array
          items:
            $ref: "#/components/schemas/OrderValidationResult"
          description: Validation results for the order when processes against validation
            capabilities.
          nullable: true
        billingInfo:
          $ref: "#/components/schemas/BillingInfo"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          description: "Payment transaction associated with this order. It is the entire
            payment interchange between the merchant \r

            who is forwarding the customer's payment information and
            the payment service who is authorizing and \r

            capturing payment. Payment can be either by credit card,
            check, or PayPal."
          nullable: true
        refunds:
          type: array
          items:
            $ref: "#/components/schemas/Refund"
          description: "Refunds associated with this order. A refund is a single exchange
            of money from merchant to customer\r

            that either encapsulates a refund to a credit card or an
            issuance of a store credit.\r

            Refunds does not reduce the 'amount collected' on an
            order and it is possible for refunds to exceed the total order
            amount."
          nullable: true
        packages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePackage"
          description: Shipping package associated with this order.
          nullable: true
        pickups:
          type: array
          items:
            $ref: "#/components/schemas/Pickup"
          description: Fulfillment pickups associated with this order.
          nullable: true
        digitalPackages:
          type: array
          items:
            $ref: "#/components/schemas/DigitalPackage"
          description: Fulfillment digital packages associated with this order.
          nullable: true
        shipments:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeShipment"
          description: Package shipments associated with this order.
          nullable: true
        isDraft:
          type: boolean
          description: Is this order a draft version
          nullable: true
        hasDraft:
          type: boolean
          description: Does this order have a draft version.
          nullable: true
        isImport:
          type: boolean
          description: Was this order initiated from an external system
          nullable: true
        importDate:
          type: string
          description: Date this item was imported
          format: date-time
          nullable: true
        isUnified:
          type: boolean
          description: Was this order created by the Unified platform.
        externalId:
          type: string
          description: An order number to link this order to an external system
          nullable: true
        couponCodes:
          type: array
          items:
            type: string
          description: Coupon codes associated with this order.  Only set on order import.
          nullable: true
        invalidCoupons:
          type: array
          items:
            $ref: "#/components/schemas/InvalidCoupon"
          description: A list of invalid coupons that were attempted on the order
          nullable: true
        amountAvailableForRefund:
          type: number
          description: "This property represents AmountCaptured - AmountRefunded via
            returns.\r

            It is read only."
          format: double
        amountRemainingForPayment:
          type: number
          description: "A counter for how much of the order total has not been claimed by
            payments.\r

            This is computed by Order.Total-(sum of Order.Payments
            where State is not voided/declined)"
          format: double
        amountRefunded:
          type: number
          description: "A counter for how much money has been issued in refunds.\r

            This calculated field does NOT include refunds issued in
            returns."
          format: double
        readyToCapture:
          type: boolean
        isOptInForSms:
          type: boolean
          description: Whether the shopper opts in to curbside text notifications.
      additionalProperties: false
      description: Order form.
    PaymentCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          nullable: true
      additionalProperties: false
      description: A collection of payment transactions.
    ReasonItemBase:
      type: object
      properties:
        reasonCode:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        needsMoreInfo:
          type: boolean
      additionalProperties: false
    RefundReasonItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ReasonItemBase"
      additionalProperties: false
    RefundReasonCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/RefundReasonItem"
          nullable: true
      additionalProperties: false
    OrderReturnableItem:
      type: object
      properties:
        productCode:
          type: string
          description: The product code of the associated item.
          nullable: true
        productName:
          type: string
          description: The name of the associated product.
          nullable: true
        shipmentNumber:
          type: integer
          description: Shipment Number associated with product
          format: int32
          nullable: true
        shipmentItemId:
          type: integer
          description: Shipment Item Id Number associated with product
          format: int32
          nullable: true
        quantityOrdered:
          type: integer
          description: The number of units ordered.
          format: int32
        quantityFulfilled:
          type: integer
          description: The number of units fulfilled.
          format: int32
        quantityReturned:
          type: integer
          description: The number if times this item configuration was found in live
            returns (not cancelled or rejected).
          format: int32
        quantityReturnable:
          type: integer
          format: int32
          readOnly: true
        fulfillmentStatus:
          type: string
          nullable: true
        orderItemId:
          type: string
          nullable: true
        orderLineId:
          type: integer
          format: int32
        orderItemOptionAttributeFQN:
          type: string
          nullable: true
        unitQuantity:
          type: integer
          format: int32
        parentProductCode:
          type: string
          nullable: true
        parentProductName:
          type: string
          nullable: true
      additionalProperties: false
    OrderReturnableItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderReturnableItem"
          nullable: true
      additionalProperties: false
      description: Collection of fulfillment information for items on an order.
    RepriceShipmentObject:
      type: object
      properties:
        originalShipment:
          $ref: "#/components/schemas/CommerceRuntimeShipment"
        newShipment:
          $ref: "#/components/schemas/CommerceRuntimeShipment"
      additionalProperties: false
    ShipmentAdjustment:
      type: object
      properties:
        itemAdjustment:
          type: number
          format: double
          nullable: true
        itemTaxAdjustment:
          type: number
          format: double
          nullable: true
        shippingAdjustment:
          type: number
          format: double
          nullable: true
        shippingTaxAdjustment:
          type: number
          format: double
          nullable: true
        handlingAdjustment:
          type: number
          format: double
          nullable: true
        handlingTaxAdjustment:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ShipmentItemAdjustment:
      type: object
      properties:
        overridePrice:
          type: number
          description: Unit price override
          format: double
          nullable: true
      additionalProperties: false
    SplitShipmentsObject:
      type: object
      properties:
        originalShipment:
          $ref: "#/components/schemas/CommerceRuntimeShipment"
        newShipments:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeShipment"
          nullable: true
      additionalProperties: false
    CancelReasonItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ReasonItemBase"
      additionalProperties: false
    CancelReasonCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CancelReasonItem"
          nullable: true
      additionalProperties: false
    OrderCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Order"
          nullable: true
      additionalProperties: false
      description: "Paged collection of orders. This is paged in case it's returning a
        long list the orders. \r

        for a store."
    OrderAction:
      type: object
      properties:
        actionName:
          type: string
          nullable: true
      additionalProperties: false
    PricingTaxContext:
      type: object
      properties:
        taxContextId:
          type: string
          nullable: true
        customerId:
          type: string
          nullable: true
        taxExemptId:
          type: string
          nullable: true
        originAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
        destinationAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
    PricingProductPropertyValue:
      type: object
      properties:
        value:
          nullable: true
        stringValue:
          type: string
          nullable: true
      additionalProperties: false
    PricingProductAttribute:
      type: object
      properties:
        inputType:
          type: string
          nullable: true
        valueType:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    PricingProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          nullable: true
        values:
          type: array
          items:
            $ref: "#/components/schemas/PricingProductPropertyValue"
          nullable: true
        attributeDetail:
          $ref: "#/components/schemas/PricingProductAttribute"
        isHidden:
          type: boolean
          nullable: true
        isMultiValue:
          type: boolean
          nullable: true
      additionalProperties: false
    PricingDiscountTarget:
      type: object
      properties:
        type:
          type: string
          nullable: true
        includedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        excludedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        includedCategoriesOperator:
          type: string
          nullable: true
        excludedCategoriesOperator:
          type: string
          nullable: true
        includedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        excludedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        includeAllProducts:
          type: boolean
        shippingMethods:
          type: array
          items:
            type: string
          nullable: true
        shippingZones:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    PricingDiscountCondition:
      type: object
      properties:
        requiresCoupon:
          type: boolean
        couponCode:
          type: string
          nullable: true
        minimumQuantityProductsRequiredInCategories:
          type: integer
          format: int32
          nullable: true
        includedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        excludedCategoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        minimumQuantityRequiredProducts:
          type: integer
          format: int32
          nullable: true
        includedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        excludedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        paymentWorkflows:
          type: array
          items:
            type: string
          nullable: true
        customerSegmentIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        minimumOrderAmount:
          type: number
          format: double
          nullable: true
        maximumOrderAmount:
          type: number
          format: double
          nullable: true
        minimumLifetimeValueAmount:
          type: number
          format: double
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        expirationDate:
          type: string
          format: date-time
          nullable: true
        minimumCategorySubtotalBeforeDiscounts:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PricingDiscount:
      type: object
      properties:
        discountId:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        friendlyDescription:
          type: string
          nullable: true
        amount:
          type: number
          format: double
        scope:
          type: string
          nullable: true
        maxRedemptions:
          type: integer
          format: int32
          nullable: true
        maximumUsesPerUser:
          type: integer
          format: int32
          nullable: true
        requiresAuthenticatedUser:
          type: boolean
        doesNotApplyToProductsWithSalePrice:
          type: boolean
        maximumRedemptionsPerOrder:
          type: integer
          format: int32
          nullable: true
        maximumDiscountValuePerOrder:
          type: number
          format: double
          nullable: true
        maxDiscountValuePerRedemption:
          type: number
          format: double
          nullable: true
        doesNotApplyToMultiShipToOrders:
          type: boolean
          nullable: true
        includedPriceLists:
          type: array
          items:
            type: string
          nullable: true
        redemptions:
          type: integer
          format: int32
        type:
          type: string
          nullable: true
        amountType:
          type: string
          nullable: true
        target:
          $ref: "#/components/schemas/PricingDiscountTarget"
        condition:
          $ref: "#/components/schemas/PricingDiscountCondition"
        expirationDate:
          type: string
          format: date-time
          nullable: true
          deprecated: true
        stackingLayer:
          type: integer
          format: int32
      additionalProperties: false
    PricingAppliedDiscount:
      type: object
      properties:
        impact:
          type: number
          format: double
        discount:
          $ref: "#/components/schemas/PricingDiscount"
        couponCode:
          type: string
          nullable: true
        couponSetId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    PricingAppliedLineItemDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedDiscount"
      properties:
        quantity:
          type: integer
          format: int32
        impactPerUnit:
          type: number
          format: double
        isForced:
          type: boolean
        normalizedImpact:
          type: number
          format: double
      additionalProperties: false
    PricingAppliedLineItemProductDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedLineItemDiscount"
      properties:
        appliesToSalePrice:
          type: boolean
      additionalProperties: false
    PricingAppliedLineItemShippingDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedLineItemDiscount"
      properties:
        shippingMethodCode:
          type: string
          nullable: true
      additionalProperties: false
    PricingTaxableLineItem:
      type: object
      properties:
        id:
          type: string
          nullable: true
        productCode:
          type: string
          nullable: true
        variantProductCode:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        productProperties:
          type: array
          items:
            $ref: "#/components/schemas/PricingProductProperty"
          nullable: true
        quantity:
          type: integer
          format: int32
        lineItemPrice:
          type: number
          format: double
        discountTotal:
          type: number
          format: double
          nullable: true
        discountedTotal:
          type: number
          format: double
          nullable: true
        shippingAmount:
          type: number
          format: double
        handlingAmount:
          type: number
          format: double
          nullable: true
        feeTotal:
          type: number
          format: double
          nullable: true
        isTaxable:
          type: boolean
          nullable: true
        reason:
          type: string
          nullable: true
        data:
          type: object
          nullable: true
        productDiscount:
          $ref: "#/components/schemas/PricingAppliedLineItemProductDiscount"
        shippingDiscount:
          $ref: "#/components/schemas/PricingAppliedLineItemShippingDiscount"
        productDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedLineItemProductDiscount"
          nullable: true
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedLineItemShippingDiscount"
          nullable: true
        originAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
        destinationAddress:
          $ref: "#/components/schemas/CommerceRuntimeAddress"
      additionalProperties: false
    PricingTaxAttribute:
      type: object
      properties:
        fullyQualifiedName:
          type: string
          nullable: true
        attributeDefinitionId:
          type: integer
          format: int32
          nullable: true
        values:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    PricingAppliedOrderShippingDiscount:
      type: object
      allOf:
        - $ref: "#/components/schemas/PricingAppliedDiscount"
      properties:
        shippingMethodCode:
          type: string
          nullable: true
      additionalProperties: false
    PricingTaxableOrder:
      type: object
      properties:
        orderDate:
          type: string
          format: date-time
        taxContext:
          $ref: "#/components/schemas/PricingTaxContext"
        lineItems:
          type: array
          items:
            $ref: "#/components/schemas/PricingTaxableLineItem"
          nullable: true
        shippingAmount:
          type: number
          format: double
        currencyCode:
          type: string
          nullable: true
        handlingFee:
          type: number
          format: double
        originalDocumentCode:
          type: string
          nullable: true
        orderId:
          type: string
          nullable: true
        orderNumber:
          type: integer
          format: int32
          nullable: true
        originalOrderDate:
          type: string
          format: date-time
        data:
          type: object
          nullable: true
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/PricingTaxAttribute"
          nullable: true
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedOrderShippingDiscount"
          nullable: true
        shippingDiscount:
          $ref: "#/components/schemas/PricingAppliedOrderShippingDiscount"
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedDiscount"
          nullable: true
        orderDiscount:
          $ref: "#/components/schemas/PricingAppliedDiscount"
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/PricingAppliedDiscount"
          nullable: true
        handlingDiscount:
          $ref: "#/components/schemas/PricingAppliedDiscount"
        shippingMethodCode:
          type: string
          nullable: true
        shippingMethodName:
          type: string
          nullable: true
        taxRequestType:
          type: string
          nullable: true
      additionalProperties: false
    FulfillmentAction:
      type: object
      properties:
        actionName:
          type: string
          description: Name of the fulfillment action to perform
          nullable: true
        packageIds:
          type: array
          items:
            type: string
          description: Ids of packages to mark as fulfilled
          nullable: true
        pickupIds:
          type: array
          items:
            type: string
          description: Ids of pickups to mark as fulfilled
          nullable: true
        digitalPackageIds:
          type: array
          items:
            type: string
          description: Ids of digital packages to mark as fulfilled
          nullable: true
      additionalProperties: false
      description: Action to perform a fulfillment operation on the order.
    OrderItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          nullable: true
      additionalProperties: false
      description: Collection of items listed on the order.
    CommerceRuntimeAttributeMetadataItem:
      required:
        - key
        - value
      type: object
      properties:
        key:
          maxLength: 50
          type: string
        value:
          type: string
      additionalProperties: false
    CommerceRuntimeAttributeLocalizedContent:
      type: object
      properties:
        localeCode:
          maxLength: 8
          type: string
          nullable: true
        value:
          maxLength: 100
          type: string
          nullable: true
      additionalProperties: false
    CommerceRuntimeAttributeValidation:
      type: object
      properties:
        regularExpression:
          maxLength: 200
          type: string
          nullable: true
        minStringLength:
          type: integer
          format: int32
          nullable: true
        maxStringLength:
          type: integer
          format: int32
          nullable: true
        minNumericValue:
          type: number
          format: double
          nullable: true
        maxNumericValue:
          type: number
          format: double
          nullable: true
        minDateTime:
          type: string
          format: date-time
          nullable: true
        maxDateTime:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    AttributeValueLocalizedContent:
      required:
        - localeCode
        - value
      type: object
      properties:
        localeCode:
          type: string
        value:
          type: string
      additionalProperties: false
    CommerceRuntimeAttributeVocabularyValue:
      required:
        - value
      type: object
      properties:
        value:
          maxLength: 50
          type: string
        sequence:
          type: integer
          format: int32
          nullable: true
        isHidden:
          type: boolean
          nullable: true
        content:
          $ref: "#/components/schemas/AttributeValueLocalizedContent"
      additionalProperties: false
    CommerceRuntimeAttribute:
      required:
        - attributeCode
        - displayGroup
        - valueType
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        adminName:
          maxLength: 50
          type: string
          nullable: true
        namespace:
          maxLength: 200
          type: string
          nullable: true
        attributeCode:
          maxLength: 50
          type: string
        inputType:
          type: string
          nullable: true
        valueType:
          type: string
        dataType:
          type: string
          nullable: true
        attributeMetadata:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAttributeMetadataItem"
          nullable: true
        attributeFQN:
          type: string
          nullable: true
        content:
          $ref: "#/components/schemas/CommerceRuntimeAttributeLocalizedContent"
        validation:
          $ref: "#/components/schemas/CommerceRuntimeAttributeValidation"
        vocabularyValues:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        isActive:
          type: boolean
          nullable: true
        isRequired:
          type: boolean
          nullable: true
        isReadOnly:
          type: boolean
        isMultiValued:
          type: boolean
          nullable: true
        isVisible:
          type: boolean
          nullable: true
        order:
          type: integer
          format: int32
          nullable: true
        displayGroup:
          type: string
      additionalProperties: false
    CommerceRuntimeAttributeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAttribute"
          nullable: true
      additionalProperties: false
    Quote:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier.
          nullable: true
        name:
          type: string
          description: Name of the quote
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
        number:
          type: integer
          description: Auto generated number that is assigned to the quote when creation.
          format: int32
          nullable: true
        submittedDate:
          type: string
          description: When the customer placed (submitted) the Quote.
          format: date-time
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeOrderItem"
          description: List of items in the Quote.
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        comments:
          type: array
          items:
            type: string
          description: Comments on a quote
          nullable: true
        expirationDate:
          type: string
          description: "When the quote will no longer be active. That is, the quote is
            considered abandoned. \r

            Date in UTC Date/Time."
          format: date-time
          nullable: true
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeDestination"
          nullable: true
        userId:
          type: string
          nullable: true
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        email:
          type: string
          description: Email address for checkout
          nullable: true
        customerTaxId:
          type: string
          description: The customers tax ID. If Customer Account ID exists in the system,
            will set this.
          nullable: true
          readOnly: true
        isTaxExempt:
          type: boolean
          description: Unique identifier of the customer account.
          nullable: true
          readOnly: true
        currencyCode:
          type: string
          description: ISO Currency Code.
          nullable: true
        priceListCode:
          type: string
          description: Pricelist code for the checkout
          nullable: true
        data:
          type: object
          description: Custom data for a given vendor set within the commerce process.
          nullable: true
        taxData:
          type: object
          description: Storage for any additional/custom tax data.
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        locationCode:
          type: string
          description: Identifies the location at which the order was placed if the order
            was placed externally.
          nullable: true
        ipAddress:
          type: string
          description: IP address of the user placing the order. (User or customer?)
          nullable: true
        sourceDevice:
          type: string
          description: Source device of the user placing the order. (User or customer?)
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        orderDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        subTotal:
          type: number
          description: Subtotal before any coupon codes, taxes, fees, etc.
          format: double
        itemLevelProductDiscountTotal:
          type: number
          description: The total value of item-level product discounts.
          format: double
        orderLevelProductDiscountTotal:
          type: number
          description: The total value of order-level (group-level) product discounts.
          format: double
        itemTaxTotal:
          type: number
          description: Total tax on products.
          format: double
        itemTotal:
          type: number
          description: The total product cost, accounting for discounts and tax.
          format: double
        total:
          type: number
          description: Final total
          format: double
        shippingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingDiscount"
          nullable: true
        itemLevelShippingDiscountTotal:
          type: number
          format: double
        orderLevelShippingDiscountTotal:
          type: number
          format: double
        shippingAmount:
          type: number
          format: double
        shippingSubTotal:
          type: number
          format: double
        shippingTax:
          type: number
          format: double
          nullable: true
        shippingTaxTotal:
          type: number
          format: double
        shippingTotal:
          type: number
          format: double
        handlingDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeAppliedDiscount"
          nullable: true
        itemLevelHandlingDiscountTotal:
          type: number
          format: double
        orderLevelHandlingDiscountTotal:
          type: number
          format: double
        handlingAmount:
          type: number
          format: double
          nullable: true
        handlingSubTotal:
          type: number
          format: double
        handlingTax:
          type: number
          format: double
          nullable: true
        handlingTaxTotal:
          type: number
          format: double
        handlingTotal:
          type: number
          format: double
        dutyAmount:
          type: number
          format: double
          nullable: true
        dutyTotal:
          type: number
          format: double
        feeTotal:
          type: number
          format: double
        shippingMethodCode:
          type: string
          nullable: true
        shippingMethodName:
          type: string
          nullable: true
      additionalProperties: false
    QuoteCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Quote"
          nullable: true
      additionalProperties: false
    ReturnReason:
      type: object
      properties:
        reason:
          type: string
          description: The reason this item has been returned.
          nullable: true
        quantity:
          type: integer
          description: The quantity associated with this Reason.
          format: int32
      additionalProperties: false
      description: Represents a quantity associated with a given reason for a return
    ReturnBundle:
      type: object
      properties:
        productCode:
          type: string
          description: Merchant-created code that uniquely identifies the product.
          nullable: true
        quantity:
          type: integer
          description: The amount of this particular product in a bundle that is in this
            Return
          format: int32
      additionalProperties: false
    ReturnItem:
      type: object
      properties:
        id:
          type: string
          description: The identifer of the return
          nullable: true
        orderItemId:
          type: string
          description: The OrderItem that this ReturnItem is associated with. Either the
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.Product or the
            OrderItemId must be present.
          nullable: true
        orderLineId:
          type: integer
          description: The OrderLineId that this ReturnItem is associated with. If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.OrderItemId is
            present, the OrderLineId should be present also.
          format: int32
          nullable: true
        orderItemOptionAttributeFQN:
          type: string
          description: If this item refers to a product extra, provide the item's
            corresponding OptionAttributeFQN.
          nullable: true
        product:
          $ref: "#/components/schemas/CommerceRuntimeProduct"
        reasons:
          type: array
          items:
            $ref: "#/components/schemas/ReturnReason"
          description: "For a given return reason (Damaged, Defective, MissingParts,
            DifferentExpectations, Late, NoLongerWanted, Other),\r

            how many of the above OrderItem are to be
            replaced.  This value is provided by the Shopper when they request a
            Return."
          nullable: true
        excludeProductExtras:
          type: boolean
          description: "If this return item refers to a product/bundle that has product
            extras, this specifies whether those child items should be included
            or excluded.\r

            For backward compatibility, a null value will be treated
            as false, i.e. include the extras."
          nullable: true
        returnType:
          type: string
          description: Specifies whether the requested resolution for this item is Refund
            or Replace.
          nullable: true
        returnNotRequired:
          type: boolean
          description: "Specifies whether this item should be returned to the merchant,
            e.g. if the item is irreparably damaged and it's not worth shipping
            back.\r

            Even if this is set to true,
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityShipped
            should still be set to the quantity of items involved in the
            return."
        quantityReceived:
          type: integer
          description: "The amount of this item actually received from the shopper. It may
            differ from the sum of the ReturnReasons.\r

            This is populated by the system when the Receive action
            is performed."
          format: int32
        receiveStatus:
          type: string
          description: "Describes the receive status of this item.\r

            If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnNotRequired
            is {true}, then this should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatus\
            Const.NOT_REQUESTED.\r

            Otherwise the value should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatus\
            Const.RECEIVED or
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatus\
            Const.WAITING depending on
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReceived."
          nullable: true
        quantityShipped:
          type: integer
          description: The quantity of this item fulfilled on the parent order.
          format: int32
        replaceStatus:
          type: string
          description: "Describes the replace status of this item.\r

            If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REFUN\
            D, then this should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatus\
            Const.NOT_REQUESTED.\r

            Otherwise the value should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatus\
            Const.REPLACED or
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatus\
            Const.NOT_REPLACED depending on
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReplaced."
          nullable: true
        quantityRestockable:
          type: integer
          description: "Of the quantity returned, how many of this item can be added back
            into the inventory? This item is set by the merchant via an
            UpdateReturn call.\r

            It is used during the Restock action to set some
            quantity of this item back into the inventory management system."
          format: int32
        quantityRestocked:
          type: integer
          description: Field to specify How many items added to inventory
          format: int32
        refundAmount:
          type: number
          description: If a refund is issued for the return, how much of the refund amount
            is for this particular item.
          format: double
          nullable: true
        refundStatus:
          type: string
          description: "Describes the refund status of this item.\r

            If
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REPLA\
            CE, then this should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusC\
            onst.NOT_REQUESTED.\r

            Otherwise the value should be
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusC\
            onst.REFUNDED or
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusC\
            onst.NOT_REFUNDED depending on
            Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.RefundAmount."
          nullable: true
        quantityReplaced:
          type: integer
          description: "Specifies the quantity of this item that has been marked as
            replaced, i.e. it has been used to generate a replacement order for
            the return.\r

            Note that the quantity replaced may not line up with the
            quantity of the item actually sent back to the shopper,\r

            such as in the case of an exchange, e.g. swapping a
            medium shirt for a large shirt."
          format: int32
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/OrderNote"
          description: Any merchant-supplied notes for this ReturnItem.
          nullable: true
        productLossAmount:
          type: number
          description: The loss incurred of the returned products, used for accounting
            purposes.
          format: double
          nullable: true
        productLossTaxAmount:
          type: number
          description: The tax on the returned products, used for accounting purposes.
          format: double
          nullable: true
        shippingLossAmount:
          type: number
          description: The loss incurred of the returned product shipping, used for
            accounting purposes.
          format: double
          nullable: true
        shippingLossTaxAmount:
          type: number
          description: The tax on the returned product shipping, used for accounting
            purposes.
          format: double
          nullable: true
        bundledProducts:
          type: array
          items:
            $ref: "#/components/schemas/ReturnBundle"
          description: Deprecated. Not used.
          nullable: true
          deprecated: true
        totalWithoutWeightedShippingAndHandling:
          type: number
          description: Taxable Subtotal including Weighted Order amounts
          format: double
          nullable: true
        totalWithWeightedShippingAndHandling:
          type: number
          description: Line item total with line item, Tax, Weighted Tax with Weighted
            shipping and handling costs
          format: double
          nullable: true
        shipmentItemId:
          type: integer
          description: The identifer of the item
          format: int32
          nullable: true
        shipmentNumber:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
      description: ""
    Return:
      type: object
      properties:
        id:
          type: string
          description: Unique Identifier for this Return
          nullable: true
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        visitId:
          type: string
          description: Identifies the Visit ID that was current when the order was placed
            or when the cart was last updated.
          nullable: true
        webSessionId:
          type: string
          description: Identifies the web session used to place the order or last update
            the cart.
          nullable: true
        customerInteractionType:
          type: string
          description: "Determines the interaction type that a customer will use to create
            this object.\r

            Valid values are: Website, Store, Call, Unknown"
          nullable: true
        availableActions:
          type: array
          items:
            type: string
          description: Current available actions.
          nullable: true
        returnNumber:
          type: integer
          description: A human-facing identifier that is unique within a tenant to
            represent the sequential ordering of Returns.
          format: int32
          nullable: true
        contact:
          $ref: "#/components/schemas/CommerceRuntimeContact"
        locationCode:
          type: string
          description: Location code where the return was made/processed
          nullable: true
        originalOrderId:
          type: string
          description: The Id of the Order that this Return was generated from.
          nullable: true
        originalOrderNumber:
          type: integer
          description: The order number that this return was generated from.
          format: int32
          nullable: true
        returnOrderId:
          type: string
          description: The Id of the Order that represents the items shipped to the
            shopper for this Return.
          nullable: true
        currencyCode:
          type: string
          description: ISO Currency Code. Currently, only USD is supported.
          nullable: true
        status:
          type: string
          description: "The Status of the Return.  Valid values are \r

            \    Null, Created, ReturnAuthorized, ReturnPending,
            ReturnReceived, ReplacementShipped, Cancelled, and Closed."
          nullable: true
        receiveStatus:
          type: string
          description: "A rollup status describing whether the return items have been
            received.\r

            See
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReceiveStatusConst for
            possible values."
          nullable: true
        refundStatus:
          type: string
          description: "A rollup status describing whether the return items have been
            refunded.\r

            See
            Mozu.CommerceRuntime.Contracts.Returns.Return.RefundStatusConst for
            possible values."
          nullable: true
        replaceStatus:
          type: string
          description: "A rollup status describing whether the return items have been
            marked as replaced.\r

            See
            Mozu.CommerceRuntime.Contracts.Returns.Return.ReplaceStatusConst for
            possible values."
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/ReturnItem"
          description: The list of items being returned by the Shopper and replaced by the
            Merchant in this Return.
          nullable: true
        notes:
          type: array
          items:
            $ref: "#/components/schemas/OrderNote"
          description: Any Merchant Notes for this Return.
          nullable: true
        rmaDeadline:
          type: string
          description: The deadline for a Shopper to ship the items in this Return to the
            Merchant.
          format: date-time
          nullable: true
        returnType:
          type: string
          description: Specifies whether this Return was a Refund or a Replace
          nullable: true
        refundAmount:
          type: number
          description: If this Return was refunded,  how much was credited to the shopper?
            This amount is summed from the refund payments.
          format: double
          nullable: true
        auditInfo:
          $ref: "#/components/schemas/AdminUserAuditInfo"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
          description: Any Refund payments associated with this Return.
          nullable: true
        packages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimePackage"
          description: Shipping package associated with this return.
          nullable: true
        productLossTotal:
          type: number
          description: "The Total Loss Amount is equal to the (cost of item) * quantity of
            item returned.\r

            It is meant to represent the product value to the
            merchant of the items damaged or returned by a shopper."
          format: double
          nullable: true
        shippingLossTotal:
          type: number
          description: "The Shipping Loss Total is equal to the (shipping cost of item) *
            quantity of item returned.\r

            It is meant to represent the product value to the
            merchant of the items damaged or returned by a shopper."
          format: double
          nullable: true
        lossTotal:
          type: number
          description: Sum of the ProductLossTotal and the ShippingLossTotal.
          format: double
          nullable: true
        productLossTaxTotal:
          type: number
          description: The Total Taxes assessed on the product loss.
          format: double
          nullable: true
        shippingLossTaxTotal:
          type: number
          description: The Total Taxes assessed on the shipping loss.
          format: double
          nullable: true
        tenantId:
          type: integer
          description: Unique identifier of the Tenant.
          format: int32
          nullable: true
        siteId:
          type: integer
          description: Unique identifier of the Site.
          format: int32
          nullable: true
        userId:
          type: string
          description: Unique identifier of the current user.
          nullable: true
        channelCode:
          type: string
          description: Unique identifier of the channel for this item.
          nullable: true
        changeMessages:
          type: array
          items:
            $ref: "#/components/schemas/CommerceRuntimeChangeMessage"
          description: Change messages related to the return.
          nullable: true
        actionRequired:
          type: boolean
          description: To find Returns that have failed to refund.
        isUnified:
          type: boolean
          description: Was this return created by the Unified platform.
      additionalProperties: false
      description: ""
    ReturnCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Return"
          nullable: true
      additionalProperties: false
      description: "Paged collection of returns. This is paged in case it's returning
        a long list of returns. \r

        for a store."
    ReturnAction:
      type: object
      properties:
        actionName:
          type: string
          description: The name of the action to perform, query the Return for Available
            actions to get valid values. This is required.
          nullable: true
        returnIds:
          type: array
          items:
            type: string
          description: The list of Returns upon which to perform the action. This is
            required.
          nullable: true
      additionalProperties: false
      description: ""
    ReasonCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ReturnItemSpecifier:
      type: object
      properties:
        returnItemId:
          type: string
          nullable: true
        quantity:
          type: integer
          format: int32
      additionalProperties: false
    RestockableReturnItem:
      type: object
      properties:
        returnItemId:
          type: string
          nullable: true
        quantity:
          type: integer
          format: int32
        locationCode:
          type: string
          nullable: true
      additionalProperties: false
    CarrierServiceGenerateLabelResponse:
      type: object
      properties:
        imageURL:
          type: string
          nullable: true
        integratorId:
          type: string
          nullable: true
        price:
          type: number
          format: double
          nullable: true
        trackingNumber:
          type: string
          nullable: true
      additionalProperties: false
    ReturnItemCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ReturnItem"
          nullable: true
      additionalProperties: false
      description: Collection of return items listed on the order.
    WishlistItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceItem"
      properties:
        id:
          type: string
          description: Unique identifier of the wishlist line item. System-supplied and
            read-only.
          nullable: true
        comments:
          type: string
          description: Comments for the wishlist item that are entered by the wishlist owner
          nullable: true
        priorityType:
          type: string
          description: Wishlist item priority that is a hint to how much this item is
            needed or desired
          nullable: true
        purchasableStatusType:
          type: string
          description: Is the item purchasable?
          nullable: true
      additionalProperties: false
      description: A single line item of an order.
    Wishlist:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommerceAggregate"
      properties:
        customerAccountId:
          type: integer
          description: Unique identifier of the customer account.
          format: int32
          nullable: true
        typeTag:
          type: string
          description: Open-ended Wishlist type, e.g. giftlist, gift, wish, wishlist,
            wedding, baby.  If the merchant does not need this level of
            granularity this is always null.
          nullable: true
        name:
          type: string
          description: Name of the list that is display or potentially shared (e.g.
            friends and family may view this description if the list is public
            and the list owner may see this description when viewing the list)
          nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/WishlistItem"
          description: List of items in the wishlist.
          nullable: true
        privacyType:
          type: string
          description: Is the wishlist public, viewable only through a shared link, or
            private (only the owner of the list may view the wishlist)?
          nullable: true
        sortOrder:
          type: integer
          description: The wishlist sort order.  Useful for scenarios where there is a
            default wishlist and other wishlists or arbitrary ordering
          format: int32
          nullable: true
        version:
          type: string
          description: Version for concurrency purposes
          nullable: true
        isImport:
          type: boolean
          description: Was this object imported from an external system?
          nullable: true
        importDate:
          type: string
          description: Date this item was imported
          format: date-time
          nullable: true
        externalId:
          type: string
          description: Id in an external system this item may have been imported from
          nullable: true
      additionalProperties: false
      description: Details of the wishlist, items listed in the wishlist, and any
        system messages.
    WishlistCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Wishlist"
          nullable: true
      additionalProperties: false
      description: Paged collection of wishlists.
    WishlistItemCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/WishlistItem"
          nullable: true
      additionalProperties: false
      description: Paged collection of wishlists.
    BaseRequest:
      title: Base Request
      description: Base Request Model
      properties:
        locationCode:
          title: location code
          description: Location Code
          type: string
        userID:
          description: user id
          type: integer
        pageSize:
          description: how many results to show per page
          type: integer
        pageNum:
          description: which page to show
          type: integer
        sortBy:
          description: index to sort results by
          type: string
      type: object
    UpdateBinRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Update Bin Request
          description: Request needed for updating a bin
          required:
            - binID
            - locationCode
          properties:
            binID:
              description: Bin identifier
              type: integer
            binTypeID:
              description: New Bin's Type ID
              type: integer
            binStatusID:
              description: New Bin's Status ID
              type: integer
          type: object
    BaseResponse:
      title: Base Response
      description: Base Response Model
      properties:
        success:
          description: Flag for success
          type: boolean
        messages:
          description: List of messages
          type: array
          items:
            type: string
        numResults:
          description: Number of results
          type: integer
      type: object
    Bin:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Bin Inventory Response
          description: Response object for a bin
          properties:
            name:
              description: Bin Name
              type: string
            binID:
              description: Bin ID
              type: integer
            locationCode:
              description: Location Code
              type: string
            binTypeID:
              description: Bin Type ID
              type: integer
            binStatusID:
              description: Bin Status ID
              type: integer
          type: object
    ExportSettingsFTP:
      title: Export Settings FTP
      description: Export Settings FTP
      required:
        - name
        - ftpServer
        - ftpPort
        - ftpDirectory
      properties:
        active:
          description: Flag for Active State
          type: boolean
        exportSettingsID:
          description: Export Settings ID
          type: integer
        name:
          description: Export Settings FTP Name
          type: string
        ftpServer:
          description: FTP Server Address
          type: string
        ftpPort:
          description: FTP Server Port
          type: integer
        ftpDirectory:
          description: FTP Server Directory
          type: string
        ftpDirectoryControlFile:
          description: FTP Server Control File Directory
          type: string
        ftpUser:
          description: FTP Username
          type: string
        ftpPassword:
          description: FTP Password
          type: string
        deliveryClass:
          description: FTP Delivery Class. Defaults to ExportDeliveryDefault
          type: string
        controlFile:
          description: Control File
          type: string
        controlFileEmail:
          description: Control File Email
          type: string
        remoteFileName:
          description: Remote File Name
          type: string
        controlFileName:
          description: Control File Name
          type: string
        endpoint:
          description: Endpoint
          type: string
        environment:
          description: Environment
          type: string
      type: object
    ExportSettingsS3:
      title: Export Settings S3
      description: Export Settings S3
      required:
        - name
        - region
        - key
        - secret
        - bucket
      properties:
        exportSettingsID:
          description: Export Settings ID
          type: integer
        name:
          description: Export Settings S3 Name
          type: string
        active:
          description: Flag for Active State
          type: boolean
        region:
          description: S3 Region
          type: string
        s3Key:
          description: S3 Key
          type: string
        secret:
          description: S3 Secret
          type: string
        bucket:
          description: S3 Bucket (directory)
          type: string
      type: object
    tags:
      description: Associative Map of <String, String> for tagCategoryName => tagName
      type: object
      additionalProperties:
        type: string
    ExportSettings:
      title: Export Settings
      description: Export Settings
      required:
        - name
        - fileFormat
        - exportType
        - ftpInformation
      properties:
        name:
          description: Export Settings Name
          type: string
        fileFormat:
          description: Format for the export file
          type: string
          enum:
            - XML
            - CSV
        exportType:
          description: Type of exportGG for the settings
          type: string
          enum:
            - AGGREGATE
            - LOCATION
        onlySendAvailable:
          description: Flag for only sending available
          type: boolean
        onlySendActiveLocations:
          description: Flag for only sending from active locations
          type: boolean
        ftpInformation:
          description: List of export FTP settings
          type: array
          items:
            $ref: "#/components/schemas/ExportSettingsFTP"
        s3Information:
          description: List of export S3 settings
          type: array
          items:
            $ref: "#/components/schemas/ExportSettingsS3"
        exportSingleFile:
          description: Flag for exporting as a single file
          type: boolean
        safetyStock:
          description: Safety Stock
          type: string
          enum:
            - SAFETY_STOCK_MAX
            - SAFETY_STOCK_MIN
            - SAFETY_STOCK_AVG
            - SAFETY_STOCK_SUM
        floor:
          description: Floor
          type: string
          enum:
            - FLOOR_MAX
            - FLOOR_MIN
            - FLOOR_AVG
            - FLOOR_SUM
        ltd:
          description: LTD
          type: string
          enum:
            - LTD_MAX
            - LTD_MIN
            - LTD_AVG
            - LTD_SUM
        fileName:
          description: Name for the export file
          type: string
        includeAttributes:
          description: Flag for including attributes
          type: boolean
        zipFiles:
          description: Flag for zipping the files
          type: boolean
        zipFileName:
          description: Name for the zipped file
          type: string
        untransformedFileName:
          description: Untransformed File Name
          type: string
        untransformedZipFileName:
          description: Untransformed Zip File Name
          type: string
        locationGroupIDs:
          description: Location Group Ids associated with the settings
          type: array
          items:
            type: integer
        siteIDs:
          description: Site Ids associated with the settings
          type: array
          items:
            type: integer
        directShip:
          description: Flag for only using locations with Direct Ship enabled
          type: boolean
        pickup:
          description: Flag for only using locations with In Store Pickup enabled
          type: boolean
        transfer:
          description: Flag for only using locations with Transfer enabled
          type: boolean
        productMapping:
          title: productMapping
          description: Enum for export productMapping
          type: string
          enum:
            - SWAP_PART_NUMBER_WITH_UPC
            - SWAP_SKU_WITH_UPC
        isClassic:
          description: Flag for marking the setting as a classic export
          type: boolean
        ignoreNegativeInventoryLocations:
          description: Flag for excluding negative inventory locations
          type: boolean
        tags:
          $ref: "#/components/schemas/tags"
      type: object
    CreateExportSettingsRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Export Settings Request
          description: Request needed for creating Export Settings
          required:
            - exportSettings
          properties:
            exportSettings:
              description: Export Settings to create
              type: object
              $ref: "#/components/schemas/ExportSettings"
          type: object
    ExportSettingsResponse:
      title: Job ID Response
      description: Job ID Response
      properties:
        exportSettingsName:
          description: Created Export Settings Name
          type: string
        exportSettingsFTPName:
          description: Created Export Settings FTP Name
          type: string
        exportSettingsS3Name:
          description: Created Export Settings S3 Name
          type: string
      type: object
    ExportInventoryRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Export Inventory Request
          description: Export Inventory Request
          properties:
            exportSettingsName:
              description: Name of the Export Settings to use
              type: string
            exportSettingsFTPName:
              description: Name of the FTP Settings to use. Will only check for this if
                exportID is already set
              type: string
            exportSettingsS3Name:
              description: Name of the S3 Settings to use. Will only check for this if
                exportID is already set
              type: string
            development:
              description: Flag for sending the exports to the development droppoint
              type: boolean
          type: object
    ExportInventoryJobResponse:
      title: Export Inventory Job Response
      description: Response for each export job creation
      properties:
        exportSettingsID:
          description: Export Settings ID
          type: integer
        jobID:
          description: ID of newly created job
          type: integer
      type: object
    ExportInventoryResponse:
      title: Export Inventory Response
      description: Response for Export Inventory api
      properties:
        exportInventoryJobResponses:
          description: List of Export Inventory Job Responses
          type: array
          items:
            $ref: "#/components/schemas/ExportInventoryJobResponse"
      type: object
    UpdateExportSettingsRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Update Export Settings Request
          description: Request needed updating existing Export Settings
          required:
            - exportSettingsID
            - exportSettings
          properties:
            exportSettings:
              description: Export Settings to update
              type: object
              $ref: "#/components/schemas/ExportSettings"
          type: object
    UpdateExportSettingsResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Update Export Settings Response
          description: Update Export Settings Response
          properties:
            tenantID:
              description: Tenant ID
              type: integer
            name:
              description: Name
              type: string
          type: object
    DeletedCountResponse:
      title: Deleted Count Response
      description: Deleted Count Response Model
      properties:
        deleted:
          description: Count of deleted entries
          type: integer
      type: object
    CreateExportSettingsFTPRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Export Settings FTP Request
          description: Request needed for creating Export Settings FTP
          required:
            - exportSettingsFTP
            - exportSettingsName
          properties:
            exportSettingsName:
              description: Export Settings Name to associate the ftp settings with
              type: string
            exportSettingsFTP:
              description: Export Settings FTP to create
              type: object
              $ref: "#/components/schemas/ExportSettingsFTP"
          type: object
    UpdateExportSettingsFTPRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Update Export Settings FTP Request
          description: Request needed updating existing Export Settings FTP
          required:
            - exportSettingsName
            - exportSettingsFTP
          properties:
            exportSettingsName:
              description: Export Settings Name to associate the ftp settings with
              type: string
            exportSettingsFTP:
              description: Export Settings FTP to update
              type: object
              $ref: "#/components/schemas/ExportSettingsFTP"
          type: object
    UpdateExportSettingsFTPResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Update Export Settings FTP Response
          description: Update Export Settings FTP Response
          properties:
            tenantID:
              description: Tenant ID
              type: integer
            exportSettingsFTPName:
              description: Export Settings FTP Name
              type: string
            exportSettingsName:
              description: Export Settings Name to associate the ftp settings with
              type: string
          type: object
    CreateExportSettingsS3Request:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Export Settings S3 Request
          description: Request needed for creating Export Settings S3
          required:
            - exportSettingsS3
            - exportSettingsName
          properties:
            exportSettingsName:
              description: Export Settings Name to associate the ftp settings with
              type: string
            exportSettingsS3:
              description: Export Settings S3 to create
              type: object
              $ref: "#/components/schemas/ExportSettingsS3"
          type: object
    UpdateExportSettingsS3Request:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Update Export Settings S3 Request
          description: Request needed updating existing Export Settings S3
          required:
            - exportSettingsName
            - exportSettingsS3
          properties:
            exportSettingsName:
              description: Export Settings Name to associate the ftp settings with
              type: string
            exportSettingsS3:
              description: Export Settings S3 to update
              type: object
              $ref: "#/components/schemas/ExportSettingsS3"
          type: object
    UpdateExportSettingsS3Response:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Update Export Settings S3 Response
          description: Update Export Settings S3 Response
          properties:
            tenantID:
              description: Tenant ID
              type: integer
            exportSettingsS3ID:
              description: Export Settings S3 ID
              type: integer
            exportSettingsID:
              description: Export Settings ID to associate the s3 settings with
              type: integer
          type: object
    DeletedResponse:
      title: Deleted Response
      description: Deleted Response Model
      properties:
        deleted:
          description: Whether the delete was successful
          type: boolean
      type: object
    FetchFileConnectionResponse:
      title: FetchFileConnectionResponse
      description: FetchFileConnectionResponse
      properties:
        ftpFiles:
          description: List of files found on the specified sftp directory
          type: array
          items:
            type: string
        ftpArchiveFiles:
          description: List of files found on the specified sftp archive directory
          type: array
          items:
            type: string
        s3Files:
          description: List of files found on the specified s3 bucket/path
          type: array
          items:
            type: string
        s3ArchiveFiles:
          description: List of files found on the specified s3 archive bucket/path
          type: array
          items:
            type: string
      type: object
    JobQueueResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Job Queue Response
          description: Response for getting a job
          properties:
            jobID:
              description: Internal identifier that uniquely identifies a single job
              type: integer
            tenantID:
              description: Unique internal identifier of the tenant that owns the job
              type: integer
            locationCode:
              description: Unique internal Identifier of the owning location
              type: string
            type:
              description: Purpose of the job
              type: string
              enum:
                - REFRESH
                - ADJUST
                - RELEASE_SHIPMENTS
                - CREATE_PICK_WAVE
                - CLOSE_PICK_WAVE
                - PUT_AWAY_FILE
                - SHORT_PICK_ERROR
                - BIN_AUDIT_START
                - BIN_AUDIT_COMPLETION
                - CREATE_BIN_AUDIT
                - RELEASE_PENDING_ITEMS
            added:
              description: Time and date the job was added to the queue in ISO8601 format in
                UTC
              type: string
            started:
              description: Time and date the job was started in ISO8601 format in UTC
              type: string
            finished:
              description: Time and date the job was finished in ISO8601 format in UTC
              type: string
            originalFilename:
              description: The full name of the file that was picked up at the secure
                droppoint server before being split up by location. Applies only
                to refresh and adjust jobs created via file fetch process
              type: string
            hasData:
              description: True if the job was not created from a fetched file
              type: boolean
            itemCount:
              description: The number of items processed, only for job types REFRESH and
                ADJUST
              type: integer
            status:
              description: Current status of job completion
              type: string
              enum:
                - PENDING
                - WORKING
                - SUCCESS
                - FAILED
          type: object
    ProductMapping:
      title: Product Mapping
      description: Product Mapping
      properties:
        tenantID:
          title: tenantID
          description: Tenant Identifier
          type: integer
        direction:
          title: direction
          description: Enum for direction of the mapping
          type: string
          enum:
            - INBOUND
            - OUTBOUND
            - SKIP
        mapping:
          title: mapping
          description: Enum for mapping rule
          type: string
          enum:
            - DEFAULT_MAPPING
            - CUSTOM_MAPPING_PART_TO_ALL
            - CUSTOM_MAPPING_PART_TO_SKU
            - CUSTOM_MAPPING_ONLY_UPC
            - CUSTOM_MAPPING_PART_TO_UPC_IF_EMPTY
            - CUSTOM_MAPPING_SKU_TO_PART_UPC_SKU
            - CUSTOM_MAPPING_SKU_TO_PART
            - CUSTOM_MAPPING_SKU_TO_UPC_IF_EMPTY
      type: object
    ProductMappingResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Product Mapping Response
          description: Product Mapping Response
          properties:
            productMappings:
              description: Product Mapping
              type: object
              $ref: "#/components/schemas/ProductMapping"
          type: object
    ProductMappingRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Product Mapping Request
          description: Request needed to interact with Product Mappings
          properties:
            direction:
              title: direction
              description: Enum for direction of the mapping
              type: string
              enum:
                - INBOUND
                - OUTBOUND
                - SKIP
            mapping:
              title: mapping
              description: Enum for mapping rule
              type: string
              enum:
                - DEFAULT_MAPPING
                - CUSTOM_MAPPING_PART_TO_ALL
                - CUSTOM_MAPPING_PART_TO_SKU
                - CUSTOM_MAPPING_ONLY_UPC
                - CUSTOM_MAPPING_PART_TO_UPC_IF_EMPTY
                - CUSTOM_MAPPING_SKU_TO_PART_UPC_SKU
                - CUSTOM_MAPPING_SKU_TO_PART
          type: object
    ProvisionSiloRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Site Request
          description: Request for creating a site
          properties:
            tenantID:
              title: tenantID
              description: Tenant ID
              type: integer
          type: object
    TenantIDResponse:
      title: Tenant ID Response
      description: Tenant ID Response
      properties:
        tenantID:
          description: Tenant ID
          type: integer
      type: object
    InventoryCreateSiteRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Site Request
          description: Request for creating a site
          properties:
            name:
              title: name
              description: Site name
              type: string
            siteID:
              title: siteID
              description: Site ID
              type: integer
            tenantID:
              title: tenantID
              description: Tenant ID
              type: integer
          type: object
    SiteIDResponse:
      title: Site ID Response
      description: Site ID Response
      properties:
        siteID:
          description: Site ID
          type: integer
      type: object
    Tag:
      title: Tag Response
      description: Request/Response object for a tag
      properties:
        tagID:
          description: Tag ID
          type: integer
        tagValue:
          description: Tag Value
          type: string
        isDefault:
          description: Whether or not this tag is the default tag for its category.
          type: boolean
        percent:
          description: Percentage of available inventory this tag will get when the
            percentage update is performed. Must be between 0 and 100
            (inclusive).
          type: integer
        created:
          description: Date this tag was created
          type: string
        updated:
          description: Date this tag was last updated
          type: string
      type: object
    TagCategory:
      title: Tag Category Response
      description: Request and response object for a tag category
      properties:
        tagCategoryID:
          description: Tag Category ID
          type: integer
        name:
          description: Tag Category Name
          type: string
        created:
          description: Date tag category was created.
          type: string
        tags:
          description: Tags within this category
          type: array
          items:
            $ref: "#/components/schemas/Tag"
      type: object
    InventoryCloneTenantRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Clone Tenant Request
          description: Request for creating a tenant
          properties:
            targetTenantName:
              title: targetTenantName
              description: Target Tenant name
              type: string
            sourceTenantID:
              title: sourceTenantID
              description: Source Tenant ID
              type: integer
            targetTenantID:
              title: targetTenantID
              description: Target Tenant ID
              type: integer
          type: object
    InventoryCreateTenantRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Tenant Request
          description: Request for creating a tenant
          properties:
            name:
              title: name
              description: Tenant name
              type: string
            tenantID:
              title: tenantID
              description: Tenant ID
              type: integer
          type: object
    AllocateItem:
      title: AllocateItem
      description: Item for Allocation
      required:
        - quantity
        - orderItemID
        - orderID
        - shipmentID
        - locationID
      properties:
        partNumber:
          title: part number
          description: part number
          type: string
        upc:
          title: upc
          description: upc
          type: string
        sku:
          title: sku
          description: sku
          type: string
        quantity:
          title: quantity
          description: quantity
          type: integer
        orderID:
          title: order ID
          description: order ID
          type: integer
        orderItemID:
          title: order item ID
          description: order item ID
          type: integer
        shipmentID:
          title: shipment ID
          description: shipment ID
          type: integer
        locationCode:
          title: location Code
          description: location Code
          type: string
        previousOrderItemID:
          title: previous order item ID
          description: previous order item ID
          type: integer
        binID:
          title: bin ID
          description: Bin Location Identifier
          type: integer
        blockAssignment:
          title: Block Item Assignment
          description: Block assignment of item at product/location level. ONLY allowed on
            deallocate.
          type: boolean
        tags:
          $ref: "#/components/schemas/tags"
      type: object
    AllocateInventoryRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Allocate Inventory Request
          description: Request needed for allocating inventory
          required:
            - tenantID
            - items
          properties:
            items:
              description: list of AllocateItems
              type: array
              items:
                $ref: "#/components/schemas/AllocateItem"
            orderDate:
              description: order date
              type: string
            orderWeight:
              description: order weight
              type: integer
            decrementOnHandOnDeallocate:
              description: flag to determine deallocation on decrements
              type: boolean
          type: object
    DateRange:
      title: Date Range
      description: Range of dates
      properties:
        startDate:
          description: Start Date
          type: string
        endDate:
          description: End Date
          type: string
      type: object
    ProductMatch:
      title: Product Match
      description: Product Match
      properties:
        matchType:
          description: How the product matches with the identifier
          type: string
        identifier:
          description: Identifier
          type: string
        value:
          description: Value
          type: string
      type: object
    AuditSearchRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Audit Search Request
          description: Request for searching audits
          properties:
            auditID:
              description: Audit identifier
              type: integer
            binName:
              description: Name of the bin
              type: string
            auditStatus:
              description: Audit Status
              type: string
            dateRange:
              description: Date Range
              type: object
              $ref: "#/components/schemas/DateRange"
            products:
              description: List of matching products
              type: array
              items:
                $ref: "#/components/schemas/ProductMatch"
          type: object
    AuditItemQuantity:
      title: Audit Item Quantity
      description: Audit Item Quantity
      properties:
        partNumber:
          description: Part Number
          type: string
        upc:
          description: UPC
          type: string
        sku:
          description: SKU
          type: string
        expectedQuantity:
          description: Expected Quantity of items
          type: integer
        actualQuantity:
          description: Actual quantity of items
          type: integer
      type: object
    AuditItem:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Audit Item
          description: Audit Item
          properties:
            auditItemID:
              description: Audit Item identifier
              type: integer
            binName:
              description: Bin Name
              type: string
            product:
              description: Audit Item and its quantity
              type: object
              $ref: "#/components/schemas/AuditItemQuantity"
          type: object
    Audit:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Audit
          description: Audit
          properties:
            auditID:
              description: Audit identifier
              type: integer
            userID:
              description: User identifier
              type: integer
            locationCode:
              description: Location code
              type: string
            status:
              description: Audit status
              type: string
            dateRequested:
              description: Date the audit was requested
              type: string
            dateStarted:
              description: Date the audit was started
              type: string
            items:
              description: List of Audit Items
              type: array
              items:
                $ref: "#/components/schemas/AuditItem"
          type: object
    AuditSearchResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Audit Search Response
          description: Audit Search Response
          properties:
            audits:
              description: List of found audits
              type: array
              items:
                $ref: "#/components/schemas/Audit"
          type: object
    InventoryProduct:
      title: Product
      description: Product within a bin
      properties:
        partNumber:
          description: Part Number
          type: string
        upc:
          description: UPC
          type: string
        sku:
          description: SKU
          type: string
      type: object
    CreateAuditRequestBin:
      title: Create Audit Request Bin
      description: Request for creating an audit bin
      properties:
        binName:
          description: Name of bin
          type: string
        products:
          description: List of Products within a bin
          type: array
          items:
            $ref: "#/components/schemas/InventoryProduct"
      type: object
    CreateAuditRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Audit Request
          description: Request for creating an audit
          properties:
            bins:
              description: List of Create Audit Request Bins
              type: array
              items:
                $ref: "#/components/schemas/CreateAuditRequestBin"
          type: object
    ProductQuantity:
      title: Product Quantities
      description: A product and its associated quantity
      properties:
        partNumber:
          description: Part Number
          type: string
        upc:
          description: UPC
          type: string
        sku:
          description: SKU
          type: string
        quantity:
          description: Quantity of product
          type: integer
        binID:
          description: ID of associated bin
          type: integer
        locationID:
          description: Location Identifier of the owning location
          type: integer
        binTypeID:
          description: Bin Type ID
          type: integer
        binStatusID:
          description: Bin Status ID
          type: integer
        name:
          description: Name of the product
          type: string
        inventoryID:
          description: Inventory ID
          type: integer
        tenantLocProductID:
          description: Tenant Location Product ID
          type: integer
        auditProductID:
          description: Audit Product ID
          type: integer
        auditID:
          description: Audit ID
          type: integer
        onHand:
          description: Amount of product on hand
          type: integer
        available:
          description: Amount of product available
          type: integer
        allocated:
          description: Amount of product allocated
          type: integer
        pending:
          description: Amount of product pending
          type: integer
        ltd:
          description: Custom field used for store prioritization
          type: integer
        floor:
          description: Absolute minimum quantity of this item that should be in stock at
            any time
          type: integer
        safetystock:
          description: Quantity of this item the location wants to keep in stock to ensure
            stock isn't completely depleted
          type: integer
      type: object
    BinProductQuantities:
      title: Bin Product Quantities
      description: A bin and its associated products and quantities
      properties:
        binName:
          description: Name of the bin
          type: string
        products:
          description: List of ProductQuantities - Products with their associated quantity
          type: object
          $ref: "#/components/schemas/ProductQuantity"
      type: object
    LoadBinInventoryRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Load Bin Inventory Request
          description: Request needed for loading bin inventory
          properties:
            bins:
              description: List of bins and their associated product quantities
              type: array
              items:
                $ref: "#/components/schemas/BinProductQuantities"
            dryRun:
              description: Flag for dry runs
              type: boolean
          type: object
    BinModel:
      title: BinModel
      description: Bin Model
      properties:
        binID:
          description: Unique Bin Identifier assigned by the system
          type: integer
        locationID:
          description: Location Identifier of the owning location
          type: integer
        binTypeID:
          description: New Bin's Type ID
          type: integer
        binStatusID:
          description: New Bin's Status ID
          type: integer
        name:
          description: Client specified static bin name
          type: integer
      type: object
    BinResponseModel:
      title: BinResponseModel
      description: Bin Response Object
      properties:
        bins:
          description: list of resultant bins
          type: object
          $ref: "#/components/schemas/BinModel"
        resultCount:
          description: number of results
          type: integer
      type: object
    CreateBinRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Create Bin Request
          description: Request needed for creating a new bin
          properties:
            binTypeID:
              title: bin type id
              description: Bin Type Identifier
              type: integer
            binStatusID:
              title: bin status id
              description: Bin Status Identifier
              type: integer
            name:
              title: name
              description: Name
              type: string
          type: object
    BinIDResponse:
      title: Bin ID Response
      description: Bin ID Response
      properties:
        binID:
          description: Bin ID
          type: integer
      type: object
    BinSearchRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Bin Search Request
          description: Request needed for searching for bins
          properties:
            binName:
              description: Partial match of bin name
              type: string
            product:
              description: Product to match bins against
              type: object
              $ref: "#/components/schemas/InventoryProduct"
            sortAscending:
              description: Flag for sorting ascending
              type: boolean
            showNegativeInventory:
              description: Flag for showing negative inventory
              type: boolean
          type: object
    BinSearchResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Bin Search Response
          description: Bin Search Response Object
          properties:
            binQuantities:
              description: List of BinProductQuantities - bins with associated products and
                quantities
              type: object
              $ref: "#/components/schemas/BinProductQuantities"
          type: object
    LoadBinInventoryResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Load Bin Inventory Response
          description: Response object for loading bin inventory
          properties:
            unitsAdded:
              description: Number of units added
              type: integer
            unitsRemoved:
              description: Number of removed units
              type: integer
            binsCreated:
              description: Names of created bins
              type: array
              items:
                type: string
            productsCreated:
              description: List of products created
              type: array
              items:
                $ref: "#/components/schemas/InventoryProduct"
            binQuantities:
              description: List of new bin product quantities
              type: array
              items:
                $ref: "#/components/schemas/BinProductQuantities"
          type: object
    BinTypeModel:
      title: BinTypeModel
      description: Type of Bin
      properties:
        binTypeID:
          description: Bin Type Identifier
          type: integer
        description:
          description: Bin Type Description
          type: string
      type: object
    BinStatusModel:
      title: BinStatusModel
      description: Status of Bin
      properties:
        binStatusID:
          description: Bin Status Identifier
          type: integer
        description:
          description: Bin Status Description
          type: string
      type: object
    UpdateBinsRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Update Bins Request
          description: Request needed for updating bins
          properties:
            bins:
              description: List of Update Bin Requests
              type: array
              items:
                $ref: "#/components/schemas/UpdateBinRequest"
          type: object
    UpdateBinsResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Update Bins Response
          description: Response for updating bins
          properties:
            numberAffected:
              description: Number of affected bins
              type: integer
          type: object
    M_FetchFileConfig:
      title: M_FetchFileConfig
      description: Fetch File Config Model
      properties:
        fetchFileConfigID:
          description: Fetch File Config ID
          type: integer
        tenantID:
          description: Tenant ID
          type: integer
        active:
          description: Active
          type: boolean
        lastModified:
          description: Time config was last modified
          type: string
        emailList:
          description: Email List
          type: string
        refreshEnabled:
          description: Flag for Refresh Enabled
          type: boolean
        refreshFileDescription:
          description: Description for the refresh file
          type: string
        updateEnabled:
          description: Flag for Update Enabled
          type: boolean
        updateFileDescription:
          description: Description for the update file
          type: string
        ftpServer:
          description: FTP server address
          type: string
        ftpUsername:
          description: FTP server username
          type: string
        ftpPassword:
          description: FTP server password
          type: string
        ftpPort:
          description: FTP server port
          type: integer
        ftpRemotePath:
          description: FTP server remote path
          type: string
        ftpRemotePathArchive:
          description: FTP server remote path archive
          type: string
        region:
          description: S3 Region
          type: string
        s3Key:
          description: S3 Key
          type: string
        secret:
          description: S3 Secret
          type: string
        bucket:
          description: S3 Bucket
          type: string
        s3Path:
          description: S3 Bucket Path (directory)
          type: string
        archiveBucket:
          description: S3 Archive Bucket
          type: string
        s3ArchivePath:
          description: S3 Archive Bucket Path (directory)
          type: string
        lockName:
          description: Lock name
          type: string
        postProcessAction:
          description: Enum denoting action post processing
          type: integer
        useControlFile:
          description: Flag for using control file
          type: boolean
        multipleFiles:
          description: Flag for using multiple files
          type: boolean
        zeroOutNegatives:
          description: Flag for converting negatives to zero
          type: boolean
        fieldNameMap:
          description: List of field names
          type: array
          items:
            type: string
        ignoreExtraFields:
          description: Flag for ignoring extra fields
          type: boolean
        blankQuantityIsZero:
          description: Flag to convert null quantities to zero
          type: boolean
        csvDelimiter:
          description: CSV Delimiter
          type: string
        exportAfterRefresh:
          description: Flag for exporting after refresh
          type: boolean
        postImportExportId:
          description: Export id post import
          type: integer
        postImportFtpId:
          description: FTP id post import
          type: integer
        productMapping:
          title: productMapping
          description: Enum for fetch file mapping
          type: string
          enum:
            - SWAP_PART_NUMBER_WITH_UPC
            - SWAP_SKU_WITH_UPC
      type: object
    FetchFileConfigRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Fetch File Config Request
          description: Request for Fetch File Configs
          required:
            - active
            - lockName
            - ftpServer
            - ftpUsername
            - ftpPassword
            - ftpRemotePath
            - postProcessAction
          properties:
            fetchFileConfigID:
              description: Fetch File Config ID
              type: integer
            active:
              description: Flag for active state
              type: boolean
            emailList:
              description: Email List
              type: string
            refreshEnabled:
              description: Flag for Refresh Enabled
              type: boolean
            refreshFileDescription:
              description: Description for the refresh file
              type: string
            updateEnabled:
              description: Flag for Update Enabled
              type: boolean
            updateFileDescription:
              description: Description for the update file
              type: string
            ftpServer:
              description: FTP server address
              type: string
            ftpUsername:
              description: FTP server username
              type: string
            ftpPassword:
              description: FTP server password
              type: string
            ftpPort:
              description: FTP server port
              type: integer
            ftpRemotePath:
              description: FTP server remote path
              type: string
            ftpRemotePathArchive:
              description: FTP server remote path archive
              type: string
            region:
              description: S3 Region
              type: string
            s3Key:
              description: S3 Key
              type: string
            secret:
              description: S3 Secret
              type: string
            bucket:
              description: S3 Bucket
              type: string
            s3Path:
              description: S3 Bucket Path (directory)
              type: string
            archiveBucket:
              description: S3 Archive Bucket
              type: string
            s3ArchivePath:
              description: S3 Archive Bucket Path (directory)
              type: string
            lockName:
              description: Lock name
              type: string
            postProcessAction:
              description: Enum denoting action post processing
              type: integer
            useControlFile:
              description: Flag for using control file
              type: boolean
            multipleFiles:
              description: Flag for using multiple files
              type: boolean
            zeroOutNegatives:
              description: Flag for converting negatives to zero
              type: boolean
            testFTPConfigs:
              description: Flag for if its a test ftp config
              type: boolean
            fieldNameMap:
              description: List of field names
              type: array
              items:
                type: string
            ignoreExtraFields:
              description: Flag for ignoring extra fields
              type: boolean
            blankQuantityIsZero:
              description: Flag to convert null quantities to zero
              type: boolean
            csvDelimiter:
              description: Delimiter
              type: string
            productMapping:
              title: productMapping
              description: Enum for fetch file productMapping
              type: string
              enum:
                - SWAP_PART_NUMBER_WITH_UPC
                - SWAP_SKU_WITH_UPC
          type: object
    ItemQuantity:
      title: Item Quantity
      description: Item Quantity Model
      properties:
        partNumber:
          description: Part/Product Number
          type: string
        upc:
          description: Universal Product Code
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
        quantity:
          description: Quantity
          type: integer
      type: object
    RequestLocation:
      title: Request Location
      description: Request Location
      properties:
        unit:
          description: Unit of distance used for radius
          type: string
          default: MILES
          enum:
            - MILES
            - KM
        radius:
          description: Distance from location
          type: number
        postalCode:
          description: Postal Code of this location
          type: string
        latitude:
          description: Latitude coordinate of this location
          type: number
        longitude:
          description: Longitude coordinate of this location
          type: number
        countryCode:
          description: Country Code for this location
          type: string
        locationCode:
          description: Location Code for this location. This being set will trigger
            GetInventoryByLocation
          type: string
      type: object
    TagQuantity:
      title: Tag quantity response
      description: Response object for a tag quantity
      properties:
        onHand:
          description: The quantity the the location has in its possession for this tag
          type: integer
        available:
          description: The quantity the location has that are available for purchase for
            this tag
          type: integer
        allocated:
          description: The quantity the location has that are already allocated for this tag
          type: integer
        pending:
          description: The quantity the location has that are pending for this tag
          type: integer
        tags:
          $ref: "#/components/schemas/tags"
      type: object
    taggedInventoryMap:
      type: array
      items:
        $ref: "#/components/schemas/TagQuantity"
    InventoryResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Inventory Response
          description: Inventory Response
          properties:
            locationName:
              description: Location Name
              type: string
            locationCode:
              description: Location Code
              type: string
            tenantID:
              description: Tenant Identifier
              type: integer
            onHand:
              description: The quantity the location has in its possession
              type: integer
            available:
              description: The quantity the location has that are available for purchase
              type: integer
            allocated:
              description: The quantity the location has that are already allocated.
              type: integer
            pending:
              description: The quantity the location has that are pending.
              type: integer
            partNumber:
              description: Part/Product Number
              type: string
            upc:
              description: Universal Product Code
              type: string
            sku:
              description: Stock Keeping Unit
              type: string
            blockAssignment:
              description: Whether or not the product is blocked for assignment
              type: boolean
            ltd:
              description: Custom field used for store prioritization
              type: number
            floor:
              description: Absolute minimum quantity of this item that should be in stock at
                any time
              type: integer
            safetyStock:
              description: Quantity of this item the location wants to keep in stock to ensure
                stock isn't completely depleted
              type: integer
            distance:
              description: The distance in miles from this location to the item's destination
              type: number
            directShip:
              description: Whether this location can ship to a consumer
              type: boolean
            transferEnabled:
              description: Whether the location can ship to another location (store), thus
                restocking that location.
              type: boolean
            pickup:
              description: Whether a consumer can pick up product at this location (store)
              type: boolean
            countryCode:
              description: The country code of this location
              type: string
            currencyID:
              description: The currency identifier for the retailPrice
              type: integer
            retailPrice:
              description: The price of the product at this location
              type: number
            inventoryLocatorName:
              description: The inventory locator name of the individual item
              type: string
            attributes:
              description: List of Inventory Attributes
              type: array
              items:
                type: string
            taggedInventory:
              $ref: "#/components/schemas/taggedInventoryMap"
          type: object
    InventoryRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Inventory Request
          description: Request for getting Inventory
          required:
            - type
            - items
          properties:
            type:
              description: Inventory Request Type Enum
              type: string
              enum:
                - ALL
                - PARTIAL
                - ANY
                - ALL_STORES
            items:
              description: List of Items to search on
              type: array
              items:
                $ref: "#/components/schemas/ItemQuantity"
            requestLocation:
              description: Location for Request
              type: object
              $ref: "#/components/schemas/RequestLocation"
            limit:
              description: The maximum number of results to return, defaults to 100 for most
              type: integer
            locationWhitelist:
              description: List of location codes that are allowed to be included in results
              type: array
              items:
                type: string
            locationPriorityList:
              description: List of location codes that should be returned before all others,
                preventing them from being excluded by limit
              type: array
              items:
                type: string
            locationBlacklist:
              description: List of location codes that are NOT allowed to be included in
                results
              type: array
              items:
                type: string
            ignoreSafetyStock:
              description: Whether to ignore the safety stock buffer put in place
              type: boolean
            includeNegativeInventory:
              description: Whether to allow items with negative inventory in the results
              type: boolean
            directShip:
              description: Whether to limit results to locations that are shipping enabled
              type: boolean
            transferEnabled:
              description: Filter results by locations that have transfer enabled (true) or
                don't (false)
              type: boolean
            pickup:
              description: Filter results by locations that have finderbot enabled (true) or
                don't (false)
              type: boolean
            includeInAggregateExport:
              description: Filter results by locations that have aggregate export enabled
                (true) or don't (false)
              type: boolean
            includeInLocationExport:
              description: Filter results by locations that have physical storefronts (true)
                or don't (false)
              type: boolean
            excludeBlockedAssignment:
              description: "Filter out results that are blocked from assignment (at the
                product/location level) "
              type: boolean
            includeAttributes:
              description: Flag to include attributes or not
              type: boolean
            sortByEnum:
              description: What to sort the inventory results by. Only used for
                GetInventoryByLocation calls (locationCode must be set)
              type: string
              enum:
                - ON_HAND
                - AVAILABLE
                - ALLOCATED
                - PART_NUMBER
                - PRODUCT_ID
            tags:
              $ref: "#/components/schemas/tags"
          type: object
    InventoryItem:
      title: Item
      description: Item
      properties:
        partNumber:
          description: Part/Product Number
          type: string
        upc:
          description: Universal Product Code
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
      type: object
    AggregateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Aggregate Request
          description: Request for aggregating inventory
          required:
            - items
          properties:
            items:
              description: List of Items to search on
              type: array
              items:
                $ref: "#/components/schemas/InventoryItem"
            ignoreSafetyStock:
              description: Whether to ignore the safety stock buffer put in place
              type: boolean
            includeNegativeInventory:
              description: Whether to allow items with negative inventory in the results
              type: boolean
            directShip:
              description: Whether to limit results to locations that are shipping enabled
              type: boolean
            transferEnabled:
              description: Filter results by locations that apply tax (true) or don't (false)
              type: boolean
            pickup:
              description: Filter results by pickup enabled (true) or not (false)
              type: boolean
            tags:
              $ref: "#/components/schemas/tags"
          type: object
    AggregateResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Aggregate Response
          description: Response for aggregating Inventory
          properties:
            tenantID:
              description: Manufacturer Identifier
              type: integer
            onHand:
              description: The quantity the location has in its possession
              type: integer
            available:
              description: The quantity the location has that are available for purchase
              type: integer
            partNumber:
              description: Part/Product Number
              type: string
            upc:
              description: Universal Product Code
              type: string
            sku:
              description: Stock Keeping Unit
              type: string
            floor:
              description: Absolute minimum quantity of this item that should be in stock at
                any time
              type: integer
          type: object
    RefreshItem:
      title: Refresh Item
      description: Refresh Item
      properties:
        partNumber:
          description: Part/Product Number
          type: string
        upc:
          description: Universal Product Code
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
        binID:
          description: Bin Location Identifier
          type: integer
        LTD:
          description: Custom field used for store prioritization
          type: float
        floor:
          description: Absolute minimum quantity of this item that should be in stock at
            any time
          type: integer
        safetyStock:
          description: Quantity of this item the location wants to keep in stock to ensure
            stock isn't completely depleted
          type: integer
        quantity:
          description: Current Quantity of Item
          type: integer
        retailPrice:
          description: Stock Keeping Unit
          type: number
        currencyID:
          description: The price of the item
          type: integer
        inventoryLocatorName:
          description: The inventory locator name of the item
          type: string
        attributes:
          description: List of Item Attributes
          type: array
          items:
            type: string
        tags:
          $ref: "#/components/schemas/tags"
        deliveryDate:
          description: Date at which this inventory will become available. Expected format
            '2020-09-28T12:00:00-0500'
          type: DateTime
      type: object
    RefreshRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Refresh Request
          description: Request needed for refreshing inventory
          required:
            - locationCode
          properties:
            items:
              description: List of items to refresh
              type: array
              items:
                $ref: "#/components/schemas/RefreshItem"
          type: object
    JobIDResponse:
      title: Job ID Response
      description: Job ID Response
      properties:
        jobID:
          description: Job ID
          type: integer
      type: object
    AdjustItem:
      title: Adjust Item
      description: Adjust Item
      properties:
        partNumber:
          description: Part/Product Number
          type: string
        upc:
          description: Universal Product Code
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
        binID:
          description: Bin Location Identifier
          type: integer
        quantity:
          description: Current Quantity of Item
          type: integer
        tags:
          $ref: "#/components/schemas/tags"
        deliveryDate:
          description: Date at which this inventory will become available. Expected format
            '2020-09-28T12:00:00-0500'
          type: DateTime
      type: object
    AdjustRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Adjust Request
          description: Request needed for adjusting inventory
          properties:
            items:
              description: List of items to adjust
              type: array
              items:
                $ref: "#/components/schemas/AdjustItem"
          type: object
    DeleteItemRequest:
      title: Delete Item Request
      description: Request needed for deleting inventory
      properties:
        dryRun:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        explicit:
          description: Flag used to request explicit inventory, location, pick wave, and
            audit information for each request item.
          type: boolean
        locationCodes:
          description: >-
            An array of locationCodes to be considered for item-deletion
            purposes. Optional.
                All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.
          type: array
          items:
            type: string
        allLocations:
          description: Flag used to request deletion of inventory across all locations
            (overrides locationCodes).
          type: boolean
        partNumber:
          description: "The part number of the item to be deleted. Supports basic regex
            operators: .*+?^$[]"
          type: string
        upc:
          description: "The upc of the item to be deleted. Supports basic regex operators:
            .*+?^$[]"
          type: string
        sku:
          description: "The sku of the item to be deleted. Supports basic regex operators:
            .*+?^$[]"
          type: string
        tags:
          $ref: "#/components/schemas/tags"
      type: object
    ProductIdentifier:
      title: ProductIdentifier
      description: Product Identifier Model
      properties:
        partNumber:
          description: Part/Product Number
          type: string
        upc:
          description: Universal Product Code
          type: string
        sku:
          description: Stock Keeping Unit
          type: string
      type: object
    M_DeleteItem:
      title: M_DeleteItem
      description: Delete Item Model
      properties:
        productID:
          description: Product Identifier
          type: integer
        inventoryIDs:
          description: List of inventory identifiers associated with the deleted item
          type: array
          items:
            type: integer
        locationIDs:
          description: List of location identifiers associated with the deleted item
          type: array
          items:
            type: integer
        auditIDs:
          description: List of audit identifiers associated with the deleted item
          type: array
          items:
            type: integer
        itemIdentifier:
          description: Details about the item that was deleted
          $ref: "#/components/schemas/ProductIdentifier"
      type: object
    DeleteItemResponse:
      title: Delete Item Response
      description: Delete Item Response
      properties:
        dryRun:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        itemsDeleted:
          description: Items deleted due to the request
          type: array
          items:
            $ref: "#/components/schemas/M_DeleteItem"
        totalAuditsDeleted:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        totalInventoryEntriesDeleted:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        totalLocationsAffected:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        totalPickWavesDeleted:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        totalProductsDeleted:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
        jobIDs:
          description: Flag used to differentiate between a test and a non-test run.
          type: boolean
      type: object
    OrderItemInformationRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Order Item Information Request
          description: Request for getting order item information
          properties:
            orderID:
              description: Order Identifier
              type: integer
            items:
              description: List of Items to search on
              type: array
              items:
                $ref: "#/components/schemas/InventoryItem"
          type: object
    OrderItemInformationEvent:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Order Item Information Event
          description: Order Item Information Event
          properties:
            date:
              description: Date of the event
              type: string
            eventType:
              description: Type of event
              type: string
              enum:
                - ALLOCATED
                - DEALLOCATED
                - FULFILLED
                - PICKED
                - DEALLOCATE_FULFILL
            quantity:
              description: Quantity
              type: integer
          type: object
    OrderItemInformation:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Order Item Information
          description: Order Item Information
          properties:
            orderID:
              description: Order Identifier
              type: integer
            orderItemID:
              description: Order Item Identifier
              type: integer
            locationID:
              description: Location Identifier
              type: integer
            locationActive:
              description: Flag for whether the location is active
              type: boolean
            locationCode:
              description: External Store Identifier
              type: integer
            locationName:
              description: Location Name
              type: string
            binID:
              description: Bin Identifier
              type: integer
            partNumber:
              description: Part/Product Number
              type: string
            upc:
              description: Universal Product Code
              type: string
            sku:
              description: Stock Keeping Unit
              type: string
            ltd:
              description: Custom field used for store prioritization
              type: string
            floor:
              description: Absolute minimum quantity of this item that should be in stock at
                any time
              type: integer
            safetyStock:
              description: Quantity of this item the location wants to keep in stock to ensure
                stock isn't completely depleted
              type: integer
            onHand:
              description: The quantity the location has in its possession
              type: integer
            available:
              description: The quantity the location has that are available for purchase
              type: integer
            allocated:
              description: The quantity the location has that are allocated
              type: integer
            allocates:
              description: Total number of allocations
              type: integer
            deallocates:
              description: Total number of deallocations
              type: integer
            fulfills:
              description: Total number of fulfillments. Should never be greater than 1.
              type: integer
            picks:
              description: Total number of picks (WMS only)
              type: integer
            pendingQuantity:
              description: Pending quantity (WMS only)
              type: integer
            events:
              description: Order Identifier
              type: array
              items:
                $ref: "#/components/schemas/OrderItemInformationEvent"
          type: object
    OrderItemLogIdentifier:
      title: Order Item Log Identifier
      description: OrderItem Log Identifier
      properties:
        orderID:
          description: Order Identifier
          type: integer
        orderItemID:
          description: Order Item Identifier
          type: integer
        shipmentID:
          description: Shipment Identifier
          type: integer
        partNumber:
          description: Part/Product Number
          type: string
        upc:
          description: Universal Product Code
          type: string
      type: object
    OrderItemLogRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Order Item Log Request
          description: OrderItem Log Request
          properties:
            identifiers:
              description: A list of order item log identifiers to search for
              type: array
              items:
                $ref: "#/components/schemas/OrderItemLogIdentifier"
            orderBy:
              description: Order Identifier
              type: string
              enum:
                - ORDER_ID
                - ORDER_ITEM_ID
                - INVENTORY_ID
                - TENANT_ID
                - LOCATION_ID
                - USER_ID
                - QUANTITY
                - TYPE
                - RESOLVED
                - FIXED
                - DATE
                - SHIPMENT_ID
            limit:
              description: The maximum number of results to return
              type: integer
            type:
              description: The type of logs to retrieve
              type: string
              enum:
                - ALLOCATE
                - DEALLOCATE
                - FULFILL
                - PICK
            sortAscending:
              description: Whether to sort results ascending, based on orderBy
              type: boolean
          type: object
    OrderItemLogResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Order Item Log Response
          description: OrderItem Log Response
          properties:
            orderID:
              description: Order Identifier
              type: integer
            orderItemID:
              description: Order Item Identifier
              type: integer
            shipmentID:
              description: Shipment Identifier
              type: integer
            inventoryID:
              description: Inventory Identifier
              type: integer
            tenantID:
              description: Tenant Identifier
              type: integer
            locationCode:
              description: Location Code Identifier
              type: string
            userID:
              description: User Identifier
              type: integer
            quantity:
              description: The number of items affected for this log entry
              type: integer
            type:
              description: The type of logs to retrieve
              type: string
              enum:
                - ALLOCATE
                - DEALLOCATE
                - FULFILL
                - PICK
            resolved:
              description: Whether this event is resolved
              type: boolean
            fixed:
              description: Whether this event has been fixed
              type: boolean
            date:
              description: The date of this log entry
              type: string
            partNumber:
              description: Part/Product Number
              type: string
            upc:
              description: Universal Product Code
              type: string
          type: object
    ClearEventQueueRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: ClearEventQueueRequest
          description: ClearEventQueueRequest
          properties:
            before:
              description: "Clear events queued before this date. Date format looks like:
                2010-01-30"
              type: string
            after:
              description: "Clear events queued after this date. Date format looks like:
                2010-01-30"
              type: string
          type: object
    PendingItem:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - title: Pending Item
          description: Pending Item
          properties:
            pendingItemID:
              description: Pending Item Identifier
              type: integer
            orderID:
              description: Order Identifier
              type: integer
            shipmentID:
              description: Shipment Identifier
              type: integer
            type:
              description: Pending Item type
              type: string
              enum:
                - TYPE_BIN
                - TYPE_DC
                - TYPE_AUDIT
                - TYPE_RESTOCK
            quantity:
              description: The number of items affected for this log entry
              type: integer
            partNumber:
              description: Part/Product Number
              type: string
            upc:
              description: Universal Product Code
              type: string
            sku:
              description: Stock Keeping Unit
              type: string
            locationCode:
              description: Location Code
              type: string
            toBin:
              description: To Bin ID
              type: string
            toBinID:
              description: To Bin ID
              type: integer
          type: object
    GetPendingItemsResponse:
      title: Get Pending Items Response
      description: Get Pending Items Response
      properties:
        totalCount:
          description: Total Count of pending items
          type: integer
        page:
          description: Page number
          type: integer
        perPage:
          description: Number per page
          type: integer
        prevPage:
          description: Previous page
          type: integer
        sortBy:
          description: Field to sort by
          type: string
          enum:
            - QUANTITY
            - FROM
            - TO
            - TYPE
            - ORDER_ID
            - WEIGHT
        sortAscending:
          description: Flag to sort by ascending
          type: boolean
        pendingItems:
          description: List of pending items
          type: array
          items:
            $ref: "#/components/schemas/PendingItem"
      type: object
    TenantConfigModel:
      title: Tenant Config Model
      description: Model of a tenant config.
      properties:
        tenantID:
          description: A Tenant ID
          type: integer
        numEventSenderWorkers:
          description: Number of Event Sender Workers to run for this tenant.
          type: integer
        fetchWorkerConfigIds:
          description: Config IDs of Fetch Worker Configs to regularly run. Set this to
            [0] to run all configs.
          type: array
          items:
            type: string
        eventsToSend:
          description: "What level of events to send. Must be one of: NO_REFRESH_LOGS,
            WITH_REFRESH_LOGS, WITH_BASIC_EVENTS, ALL"
          type: string
        enableSyncApi:
          description: Whether our secret sync api is enabled for this tenant.
          type: boolean
        ignoreIdentifiers:
          description: "Which identifiers to ignore. Must be null or one of: NONE,
            IGNORE_IDENTIFIERS_SKU, IGNORE_IDENTIFIERS_PART_NUMBER,
            IGNORE_IDENTIFIERS_SKU_AND_PART_NUMBER"
          type: string
        tagsEnabled:
          description: Whether the tenant uses tags or not
          type: boolean
      type: object
    UpdateTenantConfigRequest:
      title: Create Tenant Config Request
      description: Request for creating or updating tenant config.
      properties:
        numEventSenderWorkers:
          description: Number of event sender workers to run for this tenant.
          type: integer
        fetchWorkerConfigIds:
          description: Config IDs of Fetch Worker Configs to regularly run. Set this to
            [0] to run all configs.
          type: array
          items:
            type: string
        eventsToSend:
          description: "What level of events to send. Must be one of: NO_REFRESH_LOGS,
            WITH_REFRESH_LOGS, WITH_BASIC_EVENTS, ALL"
          type: string
        enableSyncApi:
          description: Whether our secret sync api is enabled for this tenant.
          type: boolean
        ignoreIdentifiers:
          description: "Which identifiers to ignore after applying product mappings. Must
            be NULL or one of: NONE, IGNORE_IDENTIFIERS_SKU,
            IGNORE_IDENTIFIERS_PART_NUMBER,
            IGNORE_IDENTIFIERS_SKU_AND_PART_NUMBER"
          type: string
        tagsEnabled:
          description: Whether the tenant uses tags or not
          type: boolean
      type: object
    BinRange:
      title: Bin Range
      description: Range of bins
      properties:
        startBinName:
          description: Start Bin Name
          type: string
        endBinName:
          description: End Bin Name
          type: string
      type: object
    WaveItem:
      title: Wave Shipment Item
      description: An item quantity used in wave shipments
      required:
        - orderItemID
        - quantity
      properties:
        orderItemID:
          description: Order Item ID
          type: integer
        partNumber:
          description: Part Number
          type: string
        upc:
          description: Upc
          type: string
        sku:
          description: SKU
          type: string
        quantity:
          description: Current Quantity of Item
          type: integer
      type: object
    WaveShipment:
      title: Wave Shipment
      description: A shipment (used in getting wave suggestions)
      required:
        - orderID
        - shipmentID
        - items
      properties:
        orderID:
          description: Order Identifier
          type: integer
        shipmentID:
          description: Shipment Identifier
          type: integer
        items:
          description: List of Items in the shipment
          type: array
          items:
            $ref: "#/components/schemas/WaveItem"
      type: object
    WaveSuggestionRequest:
      allOf:
        - $ref: "#/components/schemas/BaseRequest"
        - title: Wave Suggestion Request
          description: Wave Suggestion Request
          required:
            - locationCode
            - shipments
          properties:
            includeZeroInventory:
              description: Flag for including zero inventory items
              type: boolean
            binRanges:
              description: List of Bin Ranges
              type: array
              items:
                $ref: "#/components/schemas/BinRange"
            shipments:
              description: List of Wave Shipments
              type: array
              items:
                $ref: "#/components/schemas/WaveShipment"
          type: object
    WaveSuggestionItem:
      allOf:
        - $ref: "#/components/schemas/WaveItem"
        - title: Wave Suggestion Item
          description: A suggestion of where to add an item to a pick wave.
          required:
            - orderItemID
            - quantity
            - binName
          properties:
            binName:
              description: Bin Name
              type: string
          type: object
    WaveSuggestionShipment:
      title: Wave Shipment
      description: A suggested shipment to put into a pick wave
      properties:
        orderID:
          description: Order Identifier
          type: integer
        shipmentID:
          description: Shipment Identifier
          type: integer
        items:
          description: List of suggested items to put in shipment in a wave.
          type: array
          items:
            $ref: "#/components/schemas/WaveSuggestionItem"
      type: object
    WaveSuggestionResponse:
      title: Wave suggestion Response
      description: Wave suggestion response
      properties:
        shipments:
          description: List of wave shipment suggestions
          type: array
          items:
            $ref: "#/components/schemas/WaveSuggestionShipment"
      type: object
    SiteService:
      title: SiteService
      type: object
    TenantService:
      title: TenantService
      type: object
    UserContextInformation:
      title: UserContextInformation
      type: object
      properties:
        environmentID:
          type: integer
          format: int32
        loaded:
          type: boolean
        pathString:
          type: string
        siteID:
          type: integer
          format: int32
        siteService:
          $ref: "#/components/schemas/SiteService"
        tenantID:
          type: integer
          format: int32
        tenantService:
          $ref: "#/components/schemas/TenantService"
    GroupAfterAction:
      title: GroupAfterAction
      type: object
      properties:
        actionID:
          type: integer
          format: int32
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        environmentID:
          type: integer
          format: int32
        failoverAction:
          type: string
          enum:
            - LINE_ITEM_SPLIT_ASSIGN_IF_FULFILLED
            - LINE_ITEM_SPLIT_CANCEL_WITHOUT_INVENTORY
            - QUANTITY_SPLIT_ASSIGN_IF_FULFILLED
            - QUANTITY_SPLIT_CANCEL_WITHOUT_INVENTORY
            - CANCEL_ORDER
            - ASSIGN_TO_CUSTOMER_CARE
            - ASSIGN_TO_GROUP
            - LINE_ITEM_SPLIT_ASSIGN_CUSTOMER_CARE_WITHOUT_INVENTORY
            - QUANTITY_SPLIT_ASSIGN_CUSTOMER_CARE_WITHOUT_INVENTORY
            - SEND_ORDER_TO_BIDDING
            - LINE_ITEM_SPLIT_BACKORDER_WITHOUT_INVENTORY
            - QUANTITY_SPLIT_BACKORDER_WITHOUT_INVENTORY
            - ASSIGN_TO_BACKORDER
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        restartAttempt:
          type: string
          enum:
            - START_AT_BEGINNING
            - CURRENT_GROUP
            - GROUP_RANK
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    Principal:
      title: Principal
      type: object
      properties:
        name:
          type: string
    CustomDataList:
      title: CustomDataList
      type: object
      properties:
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        customDataListID:
          type: integer
          format: int32
        dataType:
          type: string
          enum:
            - STRING
            - NUMBER
            - LOCATION
        entries:
          type: array
          items:
            $ref: "#/components/schemas/CustomDataListEntry"
        environmentID:
          type: integer
          format: int32
        fileName:
          type: string
        name:
          type: string
        notes:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        state:
          type: string
          enum:
            - dataset.ready
            - dataset.processing
            - dataset.error.processing
        stringValues:
          type: array
          items:
            type: string
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
        values:
          type: array
          items:
            type: object
            properties: {}
    CustomDataListEntry:
      title: CustomDataListEntry
      type: object
      properties:
        customDataListEntryID:
          type: integer
          format: int32
        dataValid:
          type: boolean
        list:
          $ref: "#/components/schemas/CustomDataList"
        notes:
          type: string
        stringValue:
          type: string
    CustomDataListEntryResponse:
      title: CustomDataListEntryResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        locationAddress:
          type: string
        locationID:
          type: integer
          format: int32
        locationName:
          type: string
        notes:
          type: string
        stringValue:
          type: string
    CustomDataListResponse:
      title: CustomDataListResponse
      type: object
      properties:
        created:
          type: string
        creator:
          type: string
        dataType:
          type: string
          enum:
            - STRING
            - NUMBER
            - LOCATION
        entries:
          type: array
          items:
            $ref: "#/components/schemas/CustomDataListEntryResponse"
        environmentID:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        name:
          type: string
        notes:
          type: string
        siteID:
          type: integer
          format: int32
        state:
          type: string
          enum:
            - dataset.ready
            - dataset.processing
            - dataset.error.processing
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
        updater:
          type: string
    EnvironmentExportModel:
      title: EnvironmentExportModel
      type: object
      properties:
        customDataListEntries:
          type: array
          items:
            type: object
            properties: {}
        customDataLists:
          type: array
          items:
            type: object
            properties: {}
        customDataValues:
          type: array
          items:
            type: object
            properties: {}
        environmentValues:
          type: object
          properties: {}
        filters:
          type: array
          items:
            type: object
            properties: {}
        fulfillmentLimits:
          type: array
          items:
            type: object
            properties: {}
        groupAfterActions:
          type: array
          items:
            type: object
            properties: {}
        groupFilters:
          type: array
          items:
            type: object
            properties: {}
        groupSorts:
          type: array
          items:
            type: object
            properties: {}
        groups:
          type: array
          items:
            type: object
            properties: {}
        locationCriteriaSetDataDefinitionMaps:
          type: array
          items:
            type: object
            properties: {}
        locationCriteriaSetDataDefinitions:
          type: array
          items:
            type: object
            properties: {}
        locationCriteriaSetEntries:
          type: array
          items:
            type: object
            properties: {}
        locationCriteriaSetEntryMaps:
          type: array
          items:
            type: object
            properties: {}
        locationCriteriaSetFilterDefinitions:
          type: array
          items:
            type: object
            properties: {}
        locationCriteriaSets:
          type: array
          items:
            type: object
            properties: {}
        locationExclusionLists:
          type: array
          items:
            type: object
            properties: {}
        locationSorts:
          type: array
          items:
            type: object
            properties: {}
        locationStatusHolds:
          type: array
          items:
            type: object
            properties: {}
        locationStatuses:
          type: array
          items:
            type: object
            properties: {}
        rankedLocationMaps:
          type: array
          items:
            type: object
            properties: {}
        routes:
          type: array
          items:
            type: object
            properties: {}
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
    Dimension:
      title: Dimension
      type: object
    UnitOfobject:
      title: UnitOfobject
      type: object
      properties:
        dimension:
          $ref: "#/components/schemas/Dimension"
        standardUnit:
          $ref: "#/components/schemas/UnitOfobject"
    LocationCriteriaSetDataDefinition:
      title: LocationCriteriaSetDataDefinition
      type: object
      properties:
        columnName:
          type: string
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        dataDefinitionID:
          type: integer
          format: int32
        dataUnitString:
          type: string
        defaultValue:
          type: string
        environmentID:
          type: integer
          format: int32
        filterable:
          type: boolean
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        sortable:
          type: boolean
        tenantID:
          type: integer
          format: int32
        unit:
          $ref: "#/components/schemas/UnitOfobject"
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    LocationCriteriaSet:
      title: LocationCriteriaSet
      type: object
      properties:
        columnDefinitions:
          type: array
          items:
            $ref: "#/components/schemas/LocationCriteriaSetDataDefinition"
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        environmentID:
          type: integer
          format: int32
        fileName:
          type: string
        locationCriteriaSetID:
          type: integer
          format: int32
        pathString:
          type: string
        persisted:
          type: boolean
        readyState:
          type: string
          enum:
            - dataset.ready
            - dataset.processing
            - dataset.error.processing
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    LocationCriteriaSetFilter:
      title: LocationCriteriaSetFilter
      type: object
      properties:
        acceptNulls:
          type: boolean
        booleanOperator:
          type: string
          enum:
            - filter.logic.equal
            - filter.logic.not.equal
            - filter.logic.greater.than
            - filter.logic.less.than
            - filter.logic.greater.or.equal
            - filter.logic.less.or.equal
            - filter.logic.in
            - filter.logic.not.in
            - filter.logic.between
            - filter.logic.starts.with
            - filter.logic.ends.with
            - filter.logic.contains
            - filter.logic.subset
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        customAttributeName:
          type: string
        definitions:
          type: array
          items:
            $ref: "#/components/schemas/LocationCriteriaSetDataDefinition"
        dotDelimitedPropertyName:
          type: string
        environmentID:
          type: integer
          format: int32
        filterID:
          type: integer
          format: int32
        filterUnit:
          $ref: "#/components/schemas/UnitOfobject"
        locationCriteriaSet:
          $ref: "#/components/schemas/LocationCriteriaSet"
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    AbstractFilter:
      title: AbstractFilter
      type: object
      properties:
        booleanOperator:
          type: string
          enum:
            - filter.logic.equal
            - filter.logic.not.equal
            - filter.logic.greater.than
            - filter.logic.less.than
            - filter.logic.greater.or.equal
            - filter.logic.less.or.equal
            - filter.logic.in
            - filter.logic.not.in
            - filter.logic.between
            - filter.logic.starts.with
            - filter.logic.ends.with
            - filter.logic.contains
            - filter.logic.subset
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        customAttributeName:
          type: string
        dotDelimitedPropertyName:
          type: string
        environmentID:
          type: integer
          format: int32
        filterID:
          type: integer
          format: int32
        filterUnit:
          $ref: "#/components/schemas/UnitOfobject"
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    CustomDataListFilter:
      title: CustomDataListFilter
      type: object
      properties:
        booleanOperator:
          type: string
          enum:
            - filter.logic.equal
            - filter.logic.not.equal
            - filter.logic.greater.than
            - filter.logic.less.than
            - filter.logic.greater.or.equal
            - filter.logic.less.or.equal
            - filter.logic.in
            - filter.logic.not.in
            - filter.logic.between
            - filter.logic.starts.with
            - filter.logic.ends.with
            - filter.logic.contains
            - filter.logic.subset
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        customAttributeName:
          type: string
        customDataListID:
          type: integer
          format: int32
        dotDelimitedPropertyName:
          type: string
        environmentID:
          type: integer
          format: int32
        filterID:
          type: integer
          format: int32
        filterUnit:
          $ref: "#/components/schemas/UnitOfobject"
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    CustomDataValueOfobject:
      title: CustomDataValueOfobject
      type: object
      properties:
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        customDataValueID:
          type: integer
          format: int32
        environmentID:
          type: integer
          format: int32
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    CustomDataValueFilter:
      title: CustomDataValueFilter
      type: object
      properties:
        booleanOperator:
          type: string
          enum:
            - filter.logic.equal
            - filter.logic.not.equal
            - filter.logic.greater.than
            - filter.logic.less.than
            - filter.logic.greater.or.equal
            - filter.logic.less.or.equal
            - filter.logic.in
            - filter.logic.not.in
            - filter.logic.between
            - filter.logic.starts.with
            - filter.logic.ends.with
            - filter.logic.contains
            - filter.logic.subset
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        customAttributeName:
          type: string
        customDataValue:
          $ref: "#/components/schemas/CustomDataValueOfobject"
        dotDelimitedPropertyName:
          type: string
        environmentID:
          type: integer
          format: int32
        filterID:
          type: integer
          format: int32
        filterUnit:
          $ref: "#/components/schemas/UnitOfobject"
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    FulfillmentLimit:
      title: FulfillmentLimit
      type: object
      properties:
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        durationType:
          type: string
          enum:
            - HOURS
            - DAYS
            - WEEKS
            - MONTHS
        environmentID:
          type: integer
          format: int32
        fulfillmentLimit:
          type: number
        fulfillmentLimitID:
          type: integer
          format: int32
        fulfillmentType:
          type: string
          enum:
            - ORDERS
            - ITEMS
            - DOLLARS
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    RankedLocation:
      title: RankedLocation
      type: object
      properties:
        locationID:
          type: integer
          format: int32
        rank:
          type: integer
          format: int32
    LocationSort:
      title: LocationSort
      type: object
      properties:
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        descending:
          type: boolean
        environmentID:
          type: integer
          format: int32
        locationSortID:
          type: integer
          format: int32
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        sortingType:
          type: string
          enum:
            - RANK
            - DISTANCE
            - LTD
            - COST
            - RANDOM
            - DATA_SET
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    ApiDocumentationLocationGroup:
      title: LocationGroup
      type: object
      properties:
        active:
          type: boolean
        afterActionNone:
          $ref: "#/components/schemas/GroupAfterAction"
        afterActionPartial:
          $ref: "#/components/schemas/GroupAfterAction"
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        description:
          type: string
        environmentID:
          type: integer
          format: int32
        excludedLocationsFromDefaultGroup:
          type: array
          items:
            type: integer
            format: int32
        filters:
          type: array
          items:
            $ref: "#/components/schemas/AbstractFilter"
        fulfillmentLimit:
          $ref: "#/components/schemas/FulfillmentLimit"
        groupID:
          type: integer
          format: int32
        isDefaultGroup:
          type: boolean
        locationIDs:
          type: array
          items:
            type: integer
            format: int32
        name:
          type: string
        pathString:
          type: string
        persisted:
          type: boolean
        rank:
          type: integer
          format: int32
        rankedLocations:
          type: array
          items:
            $ref: "#/components/schemas/RankedLocation"
        siteID:
          type: integer
          format: int32
        sorts:
          type: array
          items:
            $ref: "#/components/schemas/LocationSort"
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
        useRetailerExclusionList:
          type: boolean
        userContext:
          $ref: "#/components/schemas/UserContextInformation"
    ExclusionListEntryLocationCode:
      title: ExclusionListEntryLocationCode
      type: object
      properties:
        locationCode:
          type: string
        orderItemID:
          type: integer
          format: int32
    ApiDocumentationOrderItem:
      title: OrderItem
      type: object
      properties:
        backorderable:
          type: boolean
        customItemData:
          type: object
          properties: {}
        itemDependency:
          type: integer
          format: int32
        orderItemID:
          type: integer
          format: int32
        partNumber:
          type: string
        quantity:
          type: integer
          format: int32
        sku:
          type: string
        upc:
          type: string
    ShippingAddress:
      title: ShippingAddress
      type: object
      properties:
        addressID:
          type: integer
          format: int32
        addressLine1:
          type: string
        city:
          type: string
        countryCode:
          type: string
        customerID:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        phone:
          type: string
        postalCode:
          type: string
        state:
          type: string
    CandidateSuggestionsRequest:
      title: CandidateSuggestionsRequest
      type: object
      properties:
        environmentID:
          type: integer
          format: int32
        exclusionListLocationCode:
          type: array
          items:
            $ref: "#/components/schemas/ExclusionListEntryLocationCode"
        inventoryRequestType:
          type: string
          enum:
            - ALL
            - PARTIAL
            - ANY
            - ALL_STORES
        isExpress:
          type: boolean
        items:
          type: array
          items:
            $ref: "#/components/schemas/ApiDocumentationOrderItem"
        locationCodeWhiteList:
          type: array
          items:
            type: string
        orderType:
          type: string
          enum:
            - DIRECTSHIP
            - TRANSFER
        pickupLocationCode:
          type: string
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
    UnitOfQuantity:
      title: UnitOfQuantity
      type: object
      properties:
        dimension:
          $ref: "#/components/schemas/Dimension"
        standardUnit:
          $ref: "#/components/schemas/UnitOfobject"
    DecimalMeasure:
      title: DecimalMeasure
      type: object
      properties:
        unit:
          $ref: "#/components/schemas/UnitOfQuantity"
        value:
          type: number
    CandidateSuggestionInventory:
      title: CandidateSuggestionInventory
      type: object
      properties:
        available:
          type: integer
          format: int32
        partNumber:
          type: string
        sku:
          type: string
        upc:
          type: string
    CandidateSuggestion:
      title: CandidateSuggestion
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        addressLine3:
          type: string
        city:
          type: string
        countryCode:
          type: string
        directShip:
          type: boolean
        distance:
          $ref: "#/components/schemas/DecimalMeasure"
        express:
          type: boolean
        inventory:
          type: array
          items:
            $ref: "#/components/schemas/CandidateSuggestionInventory"
        latitude:
          type: number
          format: double
        locationCode:
          type: string
        locationName:
          type: string
        longitude:
          type: number
          format: double
        pickup:
          type: boolean
        postalCode:
          type: string
        state:
          type: string
        transferEnabled:
          type: boolean
    CandidateSuggestionsResponse:
      title: CandidateSuggestionsResponse
      type: object
      properties:
        candidateSuggestions:
          type: array
          items:
            $ref: "#/components/schemas/CandidateSuggestion"
    SuggestionRequest:
      title: SuggestionRequest
      type: object
      properties:
        bundlingStrategy:
          type: string
          enum:
            - ITEM_DEPENDENCY
        customData:
          type: object
          additionalProperties:
            type: string
        environmentID:
          type: integer
          format: int32
        exclusionListLocationCode:
          type: array
          items:
            $ref: "#/components/schemas/ExclusionListEntryLocationCode"
        externalResponseID:
          type: string
        fraud:
          type: integer
          format: int32
        inventoryRequestType:
          type: string
          enum:
            - ALL
            - PARTIAL
            - ANY
            - ALL_STORES
        isExpress:
          type: boolean
        items:
          type: array
          items:
            $ref: "#/components/schemas/ApiDocumentationOrderItem"
        locationCodeWhiteList:
          type: array
          items:
            type: string
        numShipmentsNotInRequest:
          type: integer
          format: int32
        orderID:
          type: integer
          format: int32
        orderType:
          type: string
          enum:
            - DIRECTSHIP
            - TRANSFER
        pickupLocationCode:
          type: string
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
        total:
          type: number
    AssignmentSuggestion:
      title: AssignmentSuggestion
      type: object
      properties:
        locationCode:
          type: string
        orderItemID:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
    StateChangeSuggestion:
      title: StateChangeSuggestion
      type: object
      properties:
        orderItemID:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        stateChange:
          type: string
          enum:
            - CANCEL
            - CUSTOMER_CARE
            - AVAILABLE
            - BACKORDER
    SuggestionEvent:
      title: SuggestionEvent
      type: object
      properties:
        causeID:
          type: integer
          format: int32
        errors:
          type: array
          items:
            type: string
        name:
          type: string
        type:
          type: string
          enum:
            - NEW_REQUEST
            - ROUTE_SELECTED
            - MAKE_LOCATIONS_AVAILABLE
            - NO_ROUTE_FOUND
            - REMOVED_INACTIVE_LOCATIONS
            - REMOVED_ON_HOLD_LOCATIONS
            - REMOVED_OVERFULFILLED_LOCATIONS
            - GROUP
            - GROUP_FILTER
            - GROUP_SORT
            - FILTER
            - SORT
            - AFTER_ACTION
            - FOUND_FULL_ORDER_LOCATION
            - RESPONSE
            - AFTER_ACTION_SORT
            - DEFAULT_RESPONSE
            - MAX_SPLITS_EXCEEDED
            - AUTO_ASSIGN_LIMIT_EXCEEDED
            - INVENTORY_REQUEST
            - REMOVED_INTERNATIONAL_LOCATIONS
    SuggestionLog:
      title: SuggestionLog
      type: object
      properties:
        created:
          type: string
          format: date-time
        creatorUsername:
          type: string
        environmentID:
          type: integer
          format: int32
        events:
          type: array
          items:
            $ref: "#/components/schemas/SuggestionEvent"
        externalResponseID:
          type: string
        orderID:
          type: integer
          format: int32
        pathString:
          type: string
        persisted:
          type: boolean
        siteID:
          type: integer
          format: int32
        suggestionID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        updaterUsername:
          type: string
    SuggestionResponse:
      title: SuggestionResponse
      type: object
      properties:
        assignmentSuggestions:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/AssignmentSuggestion"
        availableLocations:
          type: array
          items:
            type: integer
            format: int32
        externalResponseID:
          type: string
        responseID:
          type: integer
          format: int32
        stateChangeSuggestions:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/StateChangeSuggestion"
        suggestionLog:
          $ref: "#/components/schemas/SuggestionLog"
    FilterAttribute:
      title: FilterAttribute
      type: object
      properties:
        filterTypeGroup:
          type: string
          enum:
            - ORDER_FLAGS
            - ORDER_INFO
            - FULFILLMENT_LOCATION_INFO
            - FULFILLMENT_INVENTORY_INFO
            - ITEM_ATTRIBUTES
            - UNKNOWN
        langTag:
          type: string
        name:
          type: string
        propertyPath:
          type: string
        unitType:
          type: string
          enum:
            - unit.type.currency
            - unit.type.distance
            - unit.type.length
            - unit.type.volume
            - unit.type.area
            - unit.type.weight
            - unit.type.dimensionless
    OrderRoutingSettings:
      title: OrderRoutingSettings
      type: object
      properties:
        allowInternationalAssignment:
          type: boolean
        autoAssignLimit:
          type: integer
          format: int32
        defaultStateChange:
          type: string
          enum:
            - CANCEL
            - CUSTOMER_CARE
            - AVAILABLE
            - BACKORDER
        failoverActions:
          type: array
          items:
            type: string
            enum:
              - LINE_ITEM_SPLIT_ASSIGN_IF_FULFILLED
              - LINE_ITEM_SPLIT_CANCEL_WITHOUT_INVENTORY
              - QUANTITY_SPLIT_ASSIGN_IF_FULFILLED
              - QUANTITY_SPLIT_CANCEL_WITHOUT_INVENTORY
              - CANCEL_ORDER
              - ASSIGN_TO_CUSTOMER_CARE
              - ASSIGN_TO_GROUP
              - LINE_ITEM_SPLIT_ASSIGN_CUSTOMER_CARE_WITHOUT_INVENTORY
              - QUANTITY_SPLIT_ASSIGN_CUSTOMER_CARE_WITHOUT_INVENTORY
              - SEND_ORDER_TO_BIDDING
              - LINE_ITEM_SPLIT_BACKORDER_WITHOUT_INVENTORY
              - QUANTITY_SPLIT_BACKORDER_WITHOUT_INVENTORY
              - ASSIGN_TO_BACKORDER
        filterAttributes:
          type: array
          items:
            $ref: "#/components/schemas/FilterAttribute"
        maxFulfillingLocations:
          type: integer
          format: int32
        maxSplitItemLocations:
          type: integer
          format: int32
        productIdentifierMapping:
          type: string
          enum:
            - PART_NUMBER_ONLY
            - UPC_ONLY
            - SKU_ONLY
            - PART_NUMBER_AND_UPC
            - PART_NUMBER_AND_SKU
            - UPC_AND_SKU
            - PART_NUMBER_AND_UPC_AND_SKU
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
        tooManyAssignsAction:
          type: string
    ApiDocumentationCreateSiteRequest:
      title: CreateSiteRequest
      type: object
      properties:
        name:
          type: string
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
    ApiDocumentationSite:
      title: Site
      type: object
      properties:
        name:
          type: string
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
    DeleteSiteRequest:
      title: DeleteSiteRequest
      type: object
      properties:
        siteID:
          type: integer
          format: int32
        tenantID:
          type: integer
          format: int32
    ApiDocumentationCreateTenantRequest:
      title: CreateTenantRequest
      type: object
      properties:
        name:
          type: string
        tenantID:
          type: integer
          format: int32
    ApiDocumentationTenant:
      title: Tenant
      type: object
      properties:
        name:
          type: string
        tenantID:
          type: integer
          format: int32
    DeleteTenantRequest:
      title: DeleteTenantRequest
      type: object
      properties:
        tenantID:
          type: integer
          format: int32
    ApiDocumentationCloneTenantRequest:
      title: CloneTenantRequest
      type: object
      properties:
        sourceTenantID:
          type: integer
          format: int32
        targetTenantID:
          type: integer
          format: int32
        targetTenantName:
          type: string
    JsonNode:
      title: JsonNode
      type: object
      properties:
        array:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        binary:
          type: boolean
        boolean:
          type: boolean
        containerNode:
          type: boolean
        double:
          type: boolean
        float:
          type: boolean
        floatingPointNumber:
          type: boolean
        int:
          type: boolean
        integralNumber:
          type: boolean
        long:
          type: boolean
        missingNode:
          type: boolean
        nodeType:
          type: string
          enum:
            - ARRAY
            - BINARY
            - BOOLEAN
            - MISSING
            - "null"
            - NUMBER
            - OBJECT
            - POJO
            - STRING
        "null":
          type: boolean
        number:
          type: boolean
        object:
          type: boolean
        pojo:
          type: boolean
        short:
          type: boolean
        textual:
          type: boolean
        valueNode:
          type: boolean
  parameters:
    x-vol-tenant:
      name: x-vol-tenant
      in: header
      description: Tenant ID
      required: true
      schema:
        type: integer
    exportSettingsName:
      name: exportSettingsName
      in: query
      description: Export Settings Name
      required: true
      schema:
        type: string
    exportSettingsFTPName:
      name: exportSettingsFTPName
      in: path
      description: Export Settings FTP Name
      required: false
      schema:
        type: string
    exportSettingsS3Name:
      name: exportSettingsS3Name
      in: path
      description: Export Settings S3 Name
      required: false
      schema:
        type: string
    tagCategoryName:
      name: tagCategoryName
      in: query
      description: Tag Category Name
      required: true
      schema:
        type: string
    tagValue:
      name: tagValue
      in: query
      description: Tag Value
      required: true
      schema:
        type: string
    x-vol-site:
      name: x-vol-site
      in: header
      description: Site ID
      required: false
      schema:
        type: integer
    type:
      name: type
      in: query
      description: Type of request enum
      required: true
      schema:
        type: string
        enum:
          - ALL
          - PARTIAL
          - ANY
          - ALL_STORES
    items:
      name: items
      in: query
      description: List of Items to search on
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ItemQuantity"
    requestLocation:
      name: requestLocation
      in: query
      description: Location for Request
      required: false
      schema:
        $ref: "#/components/schemas/RequestLocation"
    locationWhitelist:
      name: locationWhitelist
      in: query
      description: List of location codes that are allowed to be included in results
      required: false
      schema:
        type: array
        items:
          type: string
    locationBlacklist:
      name: locationBlacklist
      in: query
      description: List of location codes that are NOT allowed to be included in results
      required: false
      schema:
        type: array
        items:
          type: string
    limit:
      name: limit
      in: query
      description: The maximum number of results to return, defaults to 100 for most
      required: false
      schema:
        type: integer
    ignoreSafetyStock:
      name: ignoreSafetyStock
      in: query
      description: Whether to ignore the safety stock buffer put in place
      required: false
      schema:
        type: boolean
    includeNegativeInventory:
      name: includeNegativeInventory
      in: query
      description: Whether to allow items with negative inventory in the results
      required: false
      schema:
        type: boolean
    shippingLocation:
      name: shippingLocation
      in: query
      description: Whether to limit results to locations that are shipping enabled
      required: false
      schema:
        type: boolean
    transferEnabled:
      name: transferEnabled
      in: query
      description: Filter results by locations that have transfer enabled (true) or
        don't (false)
      required: false
      schema:
        type: boolean
    pickup:
      name: pickup
      in: query
      description: Filter results by locations that are pickup-enabled (true) or not (false)
      required: false
      schema:
        type: boolean
    includeInAggregate:
      name: includeInAggregate
      in: query
      description: Filter results by locations that have aggregate export enabled
        (true) or don't (false)
      required: false
      schema:
        type: boolean
    includeAttributes:
      name: includeAttributes
      in: query
      description: Flag to include attributes or not
      required: false
      schema:
        type: boolean
    locationName:
      name: locationName
      in: query
      description: Location Name
      required: false
      schema:
        type: string
    locationID:
      name: locationID
      in: query
      description: Location Identifier
      required: false
      schema:
        type: integer
    currentPage:
      name: currentPage
      in: query
      description: Current display page
      required: false
      schema:
        type: integer
    numberPerPage:
      name: numberPerPage
      in: query
      description: Number of items shown per page
      required: false
      schema:
        type: integer
    sortBy:
      name: sortBy
      in: query
      description: Field to sort by (enum = {'QUANTITY', 'FROM', 'TO', 'TYPE',
        'ORDER_ID', 'WEIGHT'})
      required: false
      schema:
        type: string
    shipmentID:
      name: shipmentID
      in: query
      description: Shipment ID
      required: false
      schema:
        type: integer
  requestBodies:
    UpdateBinRequest:
      description: Request to update a bin
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateBinRequest"
    CreateExportSettingsRequest:
      description: Request to create a new Export Settings
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateExportSettingsRequest"
    ExportInventoryRequest:
      description: Request to run an inventory export
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExportInventoryRequest"
    UpdateExportSettingsRequest:
      description: Request to update an existing Export Settings
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateExportSettingsRequest"
    CreateExportSettingsFTPRequest:
      description: Request to create a new Export Settings FTP
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateExportSettingsFTPRequest"
    UpdateExportSettingsFTPRequest:
      description: Request to update an existing Export Settings FTP
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateExportSettingsFTPRequest"
    CreateExportSettingsS3Request:
      description: Request to create a new Export Settings S3
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateExportSettingsS3Request"
    UpdateExportSettingsS3Request:
      description: Request to update an existing Export Settings S3
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateExportSettingsS3Request"
    ProductMappingRequest:
      description: Request to work with Product Mappings
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductMappingRequest"
    ProvisionSiloRequest:
      description: Request to create to provision a new silo for a given tenant.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProvisionSiloRequest"
    CreateSiteRequest:
      description: Request to create a new site
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InventoryCreateSiteRequest"
    Tag:
      description: Request create or modify Tag
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
    TagCategory:
      description: Request create or modify Tag Categories
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TagCategory"
    CloneTenantRequest:
      description: Request to clone a tenant
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InventoryCloneTenantRequest"
    CreateTenantRequest:
      description: Request to create a tenant
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InventoryCreateTenantRequest"
    AllocateInventoryRequest:
      description: Request to allocate inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AllocateInventoryRequest"
    AuditSearchRequest:
      description: Request to search audits
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuditSearchRequest"
    CreateAuditRequest:
      description: Request to create an audit
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateAuditRequest"
    LoadBinInventoryRequest:
      description: Request to load bin inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoadBinInventoryRequest"
    CreateBinRequest:
      description: Request to create a new bin
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateBinRequest"
    BinSearchRequest:
      description: Request to allocate inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BinSearchRequest"
    UpdateBinsRequest:
      description: Request to update multiple bins
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateBinsRequest"
    FetchFileConfigRequest:
      description: Request to fetch file configs
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FetchFileConfigRequest"
    InventoryRequest:
      description: Request to get inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InventoryRequest"
    AggregateRequest:
      description: Request to aggregate inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AggregateRequest"
    RefreshRequest:
      description: Request to refresh inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RefreshRequest"
    AdjustRequest:
      description: Request to adjust inventory
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdjustRequest"
    DeleteItemRequest:
      description: Request to delete item(s)
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteItemRequest"
    OrderItemInformationRequest:
      description: Request to retrieve order item information
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderItemInformationRequest"
    OrderItemLogRequest:
      description: Request to retrieve order item log(s)
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderItemLogRequest"
    ClearEventQueueRequest:
      description: Request to clear events that are waiting to send.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClearEventQueueRequest"
    UpdateTenantConfigRequest:
      description: Request to create tenant config
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateTenantConfigRequest"
    WaveSuggestionRequest:
      description: Request to query for a pick wave suggestion
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WaveSuggestionRequest"
