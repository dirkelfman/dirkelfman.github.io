openapi: 3.0.1
info:
  title: Kibo ProductAdmin Service
  version: v1
paths:
  /commerce/catalog/admin/attributedefinition/attributes:
    get:
      tags:
        - Attribute
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
        - name: responseGroups
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeCollection'
      x-code-samples:
        - lang: JavaScript
          source: >-
            require('mozu-node-sdk/clients/content/documentlists/document')().getDocuments({
                pageSize: 5,
                documentListName: 'files@mozu'
            }, {
                timeout: 60000
            });
        - lang: Java
          source: "AppAuthInfo appAuthInfo = new AppAuthInfo();\n        \n/** replace with your authentication configuration */\nappAuthInfo.setApplicationId(\"yourApplicationKey\");\nappAuthInfo.setSharedSecret(\"yourSharedSecret\");\n\nAppAuthenticator.initialize(appAuthInfo);\n\n/** replace with your tenant ID and site ID */\nMozuApiContext apiContext = new MozuApiContext(yourTenantID, yourSiteID);\n\n/** create a customer account resource */\t\t\t\t\t\nCustomerAccountResource customerAccountResource = new CustomerAccountResource(apiContext);\n\n/** log the total number of customer accounts */\ntry {\n    System.out.println(\"Number of Customer Accounts: \" + customerAccountResource.getAccounts().getTotalCount());\n} catch (Exception e) {\n    e.printStackTrace();\n}\n"
        - lang: C#
          source: "AppAuthInfo appAuthInfo = new AppAuthInfo();\n        \n/** replace with your authentication configuration */\nappAuthInfo.setApplicationId(\"yourApplicationKey\");\nappAuthInfo.setSharedSecret(\"yourSharedSecret\");\n\nAppAuthenticator.initialize(appAuthInfo);\n\n/** replace with your tenant ID and site ID */\nMozuApiContext apiContext = new MozuApiContext(yourTenantID, yourSiteID);\n\n/** create a customer account resource */\t\t\t\t\t\nCustomerAccountResource customerAccountResource = new CustomerAccountResource(apiContext);\n\n/** log the total number of customer accounts */\ntry {\n    System.out.println(\"Number of Customer Accounts: \" + customerAccountResource.getAccounts().getTotalCount());\n} catch (Exception e) {\n    e.printStackTrace();\n}\n"
    post:
      tags:
        - Attribute
      summary: Add / Create Attribute
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
            text/json:
              schema:
                $ref: '#/components/schemas/Attribute'
            text/plain:
              schema:
                $ref: '#/components/schemas/Attribute'
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}':
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: responseGroups
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
            text/json:
              schema:
                $ref: '#/components/schemas/Attribute'
            text/plain:
              schema:
                $ref: '#/components/schemas/Attribute'
    put:
      tags:
        - Attribute
      summary: Update attribute
      parameters:
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
            text/json:
              schema:
                $ref: '#/components/schemas/Attribute'
            text/plain:
              schema:
                $ref: '#/components/schemas/Attribute'
    delete:
      tags:
        - Attribute
      summary: Delete attribute
      parameters:
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent/{localeCode}':
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
    put:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
    delete:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent':
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeLocalizedContent'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeLocalizedContent'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeLocalizedContent'
    post:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeLocalizedContent'
    put:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AttributeLocalizedContent'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeLocalizedContent'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeLocalizedContent'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeLocalizedContent'
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}':
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
    put:
      tags:
        - Attribute
      summary: Update attribute vocabulary value
      parameters:
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: value
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeVocabularyValue'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
    delete:
      tags:
        - Attribute
      summary: Delete Attribute Vocabulary Value
      parameters:
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: value
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent/{localeCode}':
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
    put:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
    delete:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent':
    post:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues':
    get:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: responseGroups
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeVocabularyValue'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeVocabularyValue'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeVocabularyValue'
    post:
      tags:
        - Attribute
      summary: Add attribute vocabulary value
      parameters:
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeVocabularyValue'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValue'
    put:
      tags:
        - Attribute
      summary: Update attribute vocabulary values
      parameters:
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AttributeVocabularyValue'
              description: ''
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeVocabularyValue'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeVocabularyValue'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeVocabularyValue'
  '/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/localizedContent':
    post:
      tags:
        - Attribute
      parameters:
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
  /commerce/catalog/admin/attributedefinition/attributes/typerules:
    get:
      tags:
        - Attribute
      summary: >-
        Retrieves a paged list of attribute type rules according to any
        specified filter criteria and sort options.
      parameters:
        - name: startIndex
          in: query
          description: >-
            Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the zero-based offset
              in the complete result set where the returned entities begin. For
              example, with a PageSize of 25, to get the 51st through the 75th
              items, startIndex=3. The default value is 0. Optional.
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: >-
            Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the maximum number of
              entities to return from a query. The default value is 20 and the
              maximum value is 200. Optional.
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: >-
            The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            description: >-
              The element to sort the results by and the order in which the
              results appear. Either ascending (a-z) or descending (z-a) order.
              Optional.
            nullable: true
        - name: filter
          in: query
          description: >-
            A set of filter expressions representing the search parameters for a
            query: eq=equals, ne=not equals, gt=greater than, lt = less than or
            equals, gt = greater than or equals, lt = less than or equals, sw =
            starts with, or cont = contains. Optional.
          schema:
            type: string
            description: >-
              A set of filter expressions representing the search parameters for
              a query: eq=equals, ne=not equals, gt=greater than, lt = less than
              or equals, gt = greater than or equals, lt = less than or equals,
              sw = starts with, or cont = contains. Optional.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeTypeRuleCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeTypeRuleCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeTypeRuleCollection'
  /commerce/catalog/admin/categories:
    get:
      tags:
        - Category
      summary: >-
        Retrieves a list of categories according to any specified filter
        criteria and sort options.
      parameters:
        - name: startIndex
          in: query
          description: >-
            Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. The
            default value is 0.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the zero-based offset
              in the complete result set where the returned entities begin. The
              default value is 0.
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: >-
            Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the maximum number of
              entities to return from a query. The default value is 20 and the
              maximum value is 200.
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: >-
            The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
          schema:
            type: string
            description: >-
              The element to sort the results by and the order in which the
              results appear. Either ascending (a-z) or descending (z-a) order.
            nullable: true
        - name: filter
          in: query
          description: >-
            A set of filter expressions representing the search parameters for a
            query: eq=equals, ne=not equals, gt=greater than, lt = less than or
            equals, gt = greater than or equals, lt = less than or equals, sw =
            starts with, or cont = contains. Optional.
          schema:
            type: string
            description: >-
              A set of filter expressions representing the search parameters for
              a query: eq=equals, ne=not equals, gt=greater than, lt = less than
              or equals, gt = greater than or equals, lt = less than or equals,
              sw = starts with, or cont = contains. Optional.
            nullable: true
        - name: responseGroups
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryPagedCollection'
    post:
      tags:
        - Category
      summary: >-
        Adds a new category to the catalog's category hierarchy. Specify a
        ParentCategoryID to determine where to locate the category in the
        hierarchy; if not specified it becomes a top-level category.
      parameters:
        - name: incrementSequence
          in: query
          description: >-
            Sets the sequence number of the category to the current max sequence
            value plus 1 (e.g. 5 + 1 = 6)
          schema:
            type: boolean
            description: >-
              Sets the sequence number of the category to the current max
              sequence value plus 1 (e.g. 5 + 1 = 6)
            default: false
        - name: useProvidedId
          in: query
          description: >-
            If true, the provided Id value will be used as the CategoryId. If
            omitted or false, the system will generate a CategoryId
          schema:
            type: boolean
            description: >-
              If true, the provided Id value will be used as the CategoryId. If
              omitted or false, the system will generate a CategoryId
            default: false
      requestBody:
        description: >-
          Properties of the new category. Required properties ParentCategoryID
          and Content.Name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/plain:
              schema:
                $ref: '#/components/schemas/Category'
  '/commerce/catalog/admin/categories/{categoryId}':
    get:
      tags:
        - Category
      summary: Retrieves the details of a single category.
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category.
          required: true
          schema:
            type: integer
            description: Unique identifier of the category.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/plain:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      tags:
        - Category
      summary: >-
        Modifies a category such as moving it to another location in the
        category tree, or changing whether it is visible on the storefront. This
        PUT replaces the existing resource, so be sure to include all the
        information that you want to maintain for the category. Any unspecified
        properties are set to null.
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want to modify. Required.
          required: true
          schema:
            type: integer
            description: >-
              Unique identifier of the category that you want to modify.
              Required.
            format: int32
        - name: cascadeVisibility
          in: query
          description: >-
            If true, when changing the display option for the category, change
            it for all subcategories also. Optional.
          schema:
            type: boolean
            description: >-
              If true, when changing the display option for the category, change
              it for all subcategories also. Optional.
            default: false
      requestBody:
        description: >-
          Properties of the category that you want to modify. Required
          properties ParentCategoryID and Content.Name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/plain:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Category
      summary: Deletes the category specified by its category ID.
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want to delete.
          required: true
          schema:
            type: integer
            description: Unique identifier of the category that you want to delete.
            format: int32
        - name: cascadeDelete
          in: query
          description: >-
            If true, any subcategories of a category are deleted when this
            category is deleted. Otherwise only the given category is deleted.
            Default is false.
          schema:
            type: boolean
            description: >-
              If true, any subcategories of a category are deleted when this
              category is deleted. Otherwise only the given category is deleted.
              Default is false.
            default: false
        - name: forceDelete
          in: query
          description: >-
            If true, category (and optionally subcategories) will be deleted
            even if there are products referecing them.  Default is false.
          schema:
            type: boolean
            description: >-
              If true, category (and optionally subcategories) will be deleted
              even if there are products referecing them.  Default is false.
            default: false
        - name: reassignToParent
          in: query
          description: >-
            If true, and child categories of the given category will be
            reassigned to the parent of the given category. Only applies if
            cascadeDelete is false. Default is false.
          schema:
            type: boolean
            description: >-
              If true, and child categories of the given category will be
              reassigned to the parent of the given category. Only applies if
              cascadeDelete is false. Default is false.
            default: false
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/categories/{categoryId}/children':
    get:
      tags:
        - Category
      summary: "Retrieves the immediate subcategories of a category. \r\nThis is a list of subcategories at the same level (siblings). \r\nYou can use a list of siblings, for example, to display the categories in a horizontal list."
      parameters:
        - name: categoryId
          in: path
          description: >-
            Unique identifier of the category whose subcategories you want to
            get.
          required: true
          schema:
            type: integer
            description: >-
              Unique identifier of the category whose subcategories you want to
              get.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryCollection'
  /commerce/catalog/admin/categories/ValidateDynamicExpression:
    post:
      tags:
        - Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicExpression'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicExpression'
            text/json:
              schema:
                $ref: '#/components/schemas/DynamicExpression'
            text/plain:
              schema:
                $ref: '#/components/schemas/DynamicExpression'
  /commerce/catalog/admin/categories/ValidateRealTimeDynamicExpression:
    post:
      tags:
        - Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicExpression'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicExpression'
            text/json:
              schema:
                $ref: '#/components/schemas/DynamicExpression'
            text/plain:
              schema:
                $ref: '#/components/schemas/DynamicExpression'
  '/commerce/catalog/admin/categories/{categoryId}/remove-products':
    post:
      tags:
        - Category
      summary: >-
        Removes the products in the provided product code list from the
        specified category.
      parameters:
        - name: categoryId
          in: path
          description: >-
            Unique identifier of the category that you want products removed
            from.
          required: true
          schema:
            type: integer
            description: >-
              Unique identifier of the category that you want products removed
              from.
            format: int32
      requestBody:
        description: A list of products to be removed from the category.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              description: A list of products to be removed from the category.
              nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/categories/{categoryId}/add-products':
    post:
      tags:
        - Category
      summary: >-
        Adds the products in the provided product code list to the specified
        category.
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the category that you want produts added to.
          required: true
          schema:
            type: integer
            description: Unique identifier of the category that you want produts added to.
            format: int32
      requestBody:
        description: A list of products to be added to the category.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              description: A list of products to be added to the category.
              nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/corefields/search:
    get:
      tags:
        - CoreFields
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
  /commerce/catalog/admin/corefields/search/product:
    get:
      tags:
        - CoreFields
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
  /commerce/catalog/admin/corefields/search/category:
    get:
      tags:
        - CoreFields
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
  /commerce/catalog/admin/corefields/search/boost:
    get:
      tags:
        - CoreFields
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CoreFieldCollection'
  /commerce/catalog/admin/couponsets/unique-code:
    get:
      tags:
        - CouponSet
      summary: Returns a random 4 character code that is unique as a coupon set code.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
  /commerce/catalog/admin/couponsets/validate-unique-code:
    post:
      tags:
        - CouponSet
      summary: Tests code for uniqueness and validity
      parameters:
        - name: code
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/couponsets/{couponSetCode}':
    get:
      tags:
        - CouponSet
      summary: Returns a single Mozu.ProductAdmin.Contracts.CouponSet
      parameters:
        - name: couponSetCode
          in: path
          description: CouponSetCode for the requested CouponSet
          required: true
          schema:
            type: string
            description: CouponSetCode for the requested CouponSet
            nullable: true
        - name: includeCounts
          in: query
          description: Include the redemption counts and coupon counts
          schema:
            type: boolean
            description: Include the redemption counts and coupon counts
            default: false
        - name: responseGroups
          in: query
          description: >-
            "counts" includes the number of redemptions, coupon codes, and
            assigned discounts.
          schema:
            type: string
            description: >-
              "counts" includes the number of redemptions, coupon codes, and
              assigned discounts.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponSet'
            text/json:
              schema:
                $ref: '#/components/schemas/CouponSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/CouponSet'
    put:
      tags:
        - CouponSet
      summary: "Update a Mozu.ProductAdmin.Contracts.CouponSet representation.\r\nYou can not update the Code or ID once the set is created."
      parameters:
        - name: couponSetCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponSet'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponSet'
            text/json:
              schema:
                $ref: '#/components/schemas/CouponSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/CouponSet'
    delete:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/couponsets:
    get:
      tags:
        - CouponSet
      summary: Returns a paged collection of CouponSets
      parameters:
        - name: startIndex
          in: query
          description: ''
          schema:
            type: integer
            description: ''
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: ''
          schema:
            type: integer
            description: ''
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
        - name: filter
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
        - name: includeCounts
          in: query
          description: Include coupon and redemption counts
          schema:
            type: boolean
            description: Include coupon and redemption counts
            default: false
        - name: responseGroups
          in: query
          description: '"counts" returns discount and couponCode counts'
          schema:
            type: string
            description: '"counts" returns discount and couponCode counts'
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponSetCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CouponSetCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CouponSetCollection'
    post:
      tags:
        - CouponSet
      summary: Adds a single Mozu.ProductAdmin.Contracts.CouponSet
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponSet'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponSet'
            text/json:
              schema:
                $ref: '#/components/schemas/CouponSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/CouponSet'
  '/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes':
    get:
      tags:
        - CouponSet
      summary: Returns a paged collection of Coupons
      parameters:
        - name: couponSetCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: startIndex
          in: query
          description: ''
          schema:
            type: integer
            description: ''
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: ''
          schema:
            type: integer
            description: ''
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
        - name: filter
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
        - name: includeCounts
          in: query
          description: Includes coupon redemption counts
          schema:
            type: boolean
            description: Includes coupon redemption counts
            default: false
        - name: responseGroups
          in: query
          description: counts
          schema:
            type: string
            description: counts
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CouponCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CouponCollection'
    post:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Coupon'
              nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}':
    get:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: couponCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: includeCounts
          in: query
          schema:
            type: boolean
            default: false
        - name: responseGroups
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
            text/json:
              schema:
                $ref: '#/components/schemas/Coupon'
            text/plain:
              schema:
                $ref: '#/components/schemas/Coupon'
    delete:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: couponCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/remove':
    post:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts':
    get:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignedDiscount'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignedDiscount'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignedDiscount'
    post:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedDiscount'
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts/{discountId}':
    delete:
      tags:
        - CouponSet
      parameters:
        - name: couponSetCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/currency:
    post:
      tags:
        - Currency
      summary: Adds a new product sort definition.
      requestBody:
        description: "Properties of the currency-localization to create.\r\nRequired properties: CurrencyCode"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyLocalization'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
    get:
      tags:
        - Currency
      summary: Gets all currency-localizations.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalizationCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalizationCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrencyLocalizationCollection'
  '/commerce/catalog/admin/currency/{currencyCode}':
    delete:
      tags:
        - Currency
      summary: Deletes the currency-localization specified by its currency code.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code.
          required: true
          schema:
            type: string
            description: Currency code.
            nullable: true
      responses:
        '200':
          description: Success
    get:
      tags:
        - Currency
      summary: Gets a single currency-localization.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code.
          required: true
          schema:
            type: string
            description: Currency code.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
    put:
      tags:
        - Currency
      summary: Updates the details of a currency-localization.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code.
          required: true
          schema:
            type: string
            description: Currency code.
            nullable: true
      requestBody:
        description: Properties of the currency-localization to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyLocalization'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrencyLocalization'
  '/commerce/catalog/admin/currency/{currencyCode}/exchangerates':
    post:
      tags:
        - Currency
      summary: Add multiple exchange rates for a specified currency-code.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
            description: Currency code
            nullable: true
      requestBody:
        description: Exchange rates for the currency
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CurrencyExchangeRate'
              description: Exchange rates for the currency
              nullable: true
      responses:
        '200':
          description: Success
    get:
      tags:
        - Currency
      summary: >-
        Retrieves a list of exchange rates for a specified currency-code and
        filter criteria.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
            description: Currency code
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeRateCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeRateCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeRateCollection'
    put:
      tags:
        - Currency
      summary: Update multiple exchange rates for a specified currency-code.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
            description: Currency code
            nullable: true
      requestBody:
        description: Exchange rates for the currency
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CurrencyExchangeRate'
              description: Exchange rates for the currency
              nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}':
    delete:
      tags:
        - Currency
      summary: >-
        Delete a single exchange rate for a specified currency-code and target
        currency-code.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
            description: Currency code
            nullable: true
        - name: toCurrencyCode
          in: path
          description: C
          required: true
          schema:
            type: string
            description: C
            nullable: true
      responses:
        '200':
          description: Success
    get:
      tags:
        - Currency
      summary: >-
        Retrieves a single exchange rate for a specified currency-code and
        target-currency-code.
      parameters:
        - name: currencyCode
          in: path
          description: Currency code
          required: true
          schema:
            type: string
            description: Currency code
            nullable: true
        - name: toCurrencyCode
          in: path
          description: Target currency code
          required: true
          schema:
            type: string
            description: Target currency code
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeRate'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeRate'
            text/plain:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeRate'
  /commerce/catalog/admin/discounts/generate-random-coupon:
    get:
      tags:
        - Discount
      summary: Generates a random code for a coupon.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
  /commerce/catalog/admin/discounts:
    get:
      tags:
        - Discount
      summary: >-
        Retrieves a list of discounts according to any specified filter criteria
        and sort options.
      parameters:
        - name: startIndex
          in: query
          description: >-
            Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0. Optional.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the zero-based offset
              in the complete result set where the returned entities begin. For
              example, with a PageSize of 25, to get the 51st through the 75th
              items, startIndex=3. The default value is 0. Optional.
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: >-
            Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200. Optional.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the maximum number of
              entities to return from a query. The default value is 20 and the
              maximum value is 200. Optional.
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: >-
            The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
            Optional.
          schema:
            type: string
            description: >-
              The element to sort the results by and the order in which the
              results appear. Either ascending (a-z) or descending (z-a) order.
              Optional.
            nullable: true
        - name: filter
          in: query
          description: >-
            A set of filter expressions representing the search parameters for a
            query: eq=equals, ne=not equals, gt=greater than, lt = less than or
            equals, gt = greater than or equals, lt = less than or equals, sw =
            starts with, or cont = contains. Optional.
          schema:
            type: string
            description: >-
              A set of filter expressions representing the search parameters for
              a query: eq=equals, ne=not equals, gt=greater than, lt = less than
              or equals, gt = greater than or equals, lt = less than or equals,
              sw = starts with, or cont = contains. Optional.
            nullable: true
        - name: responseGroups
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountCollection'
    post:
      tags:
        - Discount
      summary: Creates a discount.
      requestBody:
        description: >-
          Properties of the discount to create. Required properties:
          Content.Name, AmountType, StartDate, and Target.Type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
            text/json:
              schema:
                $ref: '#/components/schemas/Discount'
            text/plain:
              schema:
                $ref: '#/components/schemas/Discount'
  '/commerce/catalog/admin/discounts/{discountId}':
    get:
      tags:
        - Discount
      summary: Retrieves the details of a single discount.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
            text/json:
              schema:
                $ref: '#/components/schemas/Discount'
            text/plain:
              schema:
                $ref: '#/components/schemas/Discount'
    put:
      tags:
        - Discount
      summary: Modifies a discount.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      requestBody:
        description: "Properties of the discount to update. \r\n            Required properties: Content.Name, AmountType, StartDate, and Target.Type. \r\n            Any unspecified properties are set to null and boolean variables are set to false."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
            text/json:
              schema:
                $ref: '#/components/schemas/Discount'
            text/plain:
              schema:
                $ref: '#/components/schemas/Discount'
    delete:
      tags:
        - Discount
      summary: Deletes a discount specified by its discount ID.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/discounts/{discountId}/content':
    get:
      tags:
        - Discount
      summary: Retrieves the localized content specified for the specified discount.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountLocalizedContent'
    put:
      tags:
        - Discount
      summary: >-
        Modifies the localized content for the specified discount. Allows you to
        rename the discount without modifying any other discount properties.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      requestBody:
        description: >-
          New Name and/or LocaleCode. Properties of the content to update.
          Required property: Name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountLocalizedContent'
  '/commerce/catalog/admin/discounts/{discountId}/target':
    get:
      tags:
        - Discount
      summary: >-
        Retrieves the discount target, that is which products, categories, or
        shipping methods are eligible for the discount.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountTarget'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountTarget'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountTarget'
    put:
      tags:
        - Discount
      summary: >-
        Modifies properties of the discount target, for example, the dollar
        amount, or precentage off the price.
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount. System-supplied and read-only.
          required: true
          schema:
            type: integer
            description: Unique identifier of the discount. System-supplied and read-only.
            format: int32
      requestBody:
        description: "Properties of the discount target to modify. \r\n            Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountTarget'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountTarget'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountTarget'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountTarget'
  '/commerce/catalog/admin/discountsettings/{catalogId}':
    get:
      tags:
        - DiscountSettings
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountSettings'
    put:
      tags:
        - DiscountSettings
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/DiscountSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/DiscountSettings'
  '/commerce/catalog/admin/facets/{facetId}':
    get:
      tags:
        - Facet
      summary: Retrieves the details of a Facet Definition
      parameters:
        - name: facetId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: validate
          in: query
          description: ''
          schema:
            type: boolean
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facet'
            text/json:
              schema:
                $ref: '#/components/schemas/Facet'
            text/plain:
              schema:
                $ref: '#/components/schemas/Facet'
    put:
      tags:
        - Facet
      summary: Modifies a Facet definition
      parameters:
        - name: facetId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Facet'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facet'
            text/json:
              schema:
                $ref: '#/components/schemas/Facet'
            text/plain:
              schema:
                $ref: '#/components/schemas/Facet'
    delete:
      tags:
        - Facet
      summary: Deletes the Facet definition from the store
      parameters:
        - name: facetId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/facets:
    post:
      tags:
        - Facet
      summary: Adds a new Facet to a category in a catalog.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Facet'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facet'
            text/json:
              schema:
                $ref: '#/components/schemas/Facet'
            text/plain:
              schema:
                $ref: '#/components/schemas/Facet'
  '/commerce/catalog/admin/facets/category/{categoryId}':
    get:
      tags:
        - Facet
      summary: >-
        Retrieves a list of configured, and optionally available, Facet
        Configurations for the specified category
      parameters:
        - name: categoryId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: includeAvailable
          in: query
          description: ''
          schema:
            type: boolean
            description: ''
            nullable: true
        - name: validate
          in: query
          description: ''
          schema:
            type: boolean
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacetSet'
            text/json:
              schema:
                $ref: '#/components/schemas/FacetSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/FacetSet'
  '/commerce/catalog/admin/locationinventory/{locationCode}':
    get:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
        - name: filterFunctions
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationInventoryCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/LocationInventoryCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/LocationInventoryCollection'
    post:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: performUpserts
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LocationInventory'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
    put:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LocationInventoryAdjustment'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
  '/commerce/catalog/admin/locationinventory/{locationCode}/{productCode}':
    get:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationInventory'
            text/json:
              schema:
                $ref: '#/components/schemas/LocationInventory'
            text/plain:
              schema:
                $ref: '#/components/schemas/LocationInventory'
    delete:
      tags:
        - LocationInventory
      parameters:
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/mastercatalogs:
    get:
      tags:
        - MasterCatalog
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterCatalogCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/MasterCatalogCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/MasterCatalogCollection'
  '/commerce/catalog/admin/mastercatalogs/{masterCatalogId}':
    get:
      tags:
        - MasterCatalog
      summary: Get a MasterCatalog
      parameters:
        - name: masterCatalogId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterCatalog'
            text/json:
              schema:
                $ref: '#/components/schemas/MasterCatalog'
            text/plain:
              schema:
                $ref: '#/components/schemas/MasterCatalog'
    put:
      tags:
        - MasterCatalog
      summary: Update the publishingMode of a MasterCatalog
      parameters:
        - name: masterCatalogId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterCatalog'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterCatalog'
            text/json:
              schema:
                $ref: '#/components/schemas/MasterCatalog'
            text/plain:
              schema:
                $ref: '#/components/schemas/MasterCatalog'
  /commerce/catalog/admin/pricelists:
    get:
      tags:
        - PriceList
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceListCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceListCollection'
    post:
      tags:
        - PriceList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceList'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceList'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceList'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceList'
  '/commerce/catalog/admin/pricelists/{priceListCode}':
    get:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceList'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceList'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceList'
    put:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceList'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceList'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceList'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceList'
    delete:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: cascadeDeleteEntries
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/pricelists/{priceListCode}/entries':
    get:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntryCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceListEntryCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceListEntryCollection'
    post:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceListEntry'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
  '/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}':
    get:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
    put:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceListEntry'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
            text/json:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
            text/plain:
              schema:
                $ref: '#/components/schemas/PriceListEntry'
    delete:
      tags:
        - PriceList
      parameters:
        - name: priceListCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/pricelists/bulkaddentries:
    post:
      tags:
        - PriceList
      parameters:
        - name: publishEvents
          in: query
          schema:
            type: boolean
            default: true
        - name: invalidateCache
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceListEntry'
              nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/pricelists/bulkupdateentries:
    post:
      tags:
        - PriceList
      parameters:
        - name: publishEvents
          in: query
          schema:
            type: boolean
            default: true
        - name: invalidateCache
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceListEntry'
              nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/pricelists/bulkdeleteentries:
    post:
      tags:
        - PriceList
      parameters:
        - name: publishEvents
          in: query
          schema:
            type: boolean
            default: true
        - name: invalidateCache
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceListEntry'
              nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/products:
    get:
      tags:
        - Product
      summary: >-
        Retrieves a list of products according to any specified filter criteria
        and sort options.
      parameters:
        - name: startIndex
          in: query
          description: >-
            Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the zero-based offset
              in the complete result set where the returned entities begin. For
              example, with a PageSize of 25, to get the 51st through the 75th
              items, startIndex=3. The default value is 0.
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: >-
            Used to page results from a query. Indicates the maximum number of
            entities to return from a single query. The default value is 20 and
            the maximum value is 200.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the maximum number of
              entities to return from a single query. The default value is 20
              and the maximum value is 200.
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: >-
            The element to sort the results by and the order in which the
            results appear. Either ascending or descending order. For example,
            to sort the results by “ID” ascending then by “CreateDate”
            descending, use: id asc,createdate desc.
          schema:
            type: string
            description: >-
              The element to sort the results by and the order in which the
              results appear. Either ascending or descending order. For example,
              to sort the results by “ID” ascending then by “CreateDate”
              descending, use: id asc,createdate desc.
            nullable: true
        - name: responseGroups
          in: query
          description: >-
            Used to get more specific information from the request. For example
            to get discounts applied to a product use the AppliedProducts
            response group. Available response groups: ApplicableDiscounts,
            VariationOptions, and BaseProductCode.
          schema:
            type: string
            description: >-
              Used to get more specific information from the request. For
              example to get discounts applied to a product use the
              AppliedProducts response group. Available response groups:
              ApplicableDiscounts, VariationOptions, and BaseProductCode.
            nullable: true
        - name: filter
          in: query
          description: >-
            A set of filter expressions representing the search parameters for a
            query: eq=equals, ne=not equals, gt=greater than, lt = less than or
            equals, gt = greater than or equals, lt = less than or equals, sw =
            starts with, or cont = contains. Optional.
          schema:
            type: string
            description: >-
              A set of filter expressions representing the search parameters for
              a query: eq=equals, ne=not equals, gt=greater than, lt = less than
              or equals, gt = greater than or equals, lt = less than or equals,
              sw = starts with, or cont = contains. Optional.
            nullable: true
        - name: q
          in: query
          schema:
            type: string
            nullable: true
        - name: qLimit
          in: query
          schema:
            type: integer
            format: int32
            nullable: true
        - name: noCount
          in: query
          schema:
            type: boolean
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductCollection'
    post:
      tags:
        - Product
      summary: >-
        Creates a new product. You supply a product name, product code, price
        and other product characteristics such as its attributes, categories
        where the product belongs, whether the product has configurable options,
        stand-alone options, and so on.
      requestBody:
        description: >-
          Properties of the new product. Required properties: ProductCode,
          Content.ProductName, and Price.ListPrice.
          Mozu.ProductAdmin.Contracts.Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
  '/commerce/catalog/admin/products/{productCode}':
    get:
      tags:
        - Product
      summary: >-
        Retrieves details about a product based on the specified response group.
        For example, to get the BaseProductCode of a product.
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-created code associated with the product, for example, a
              SKU. Required.
            nullable: true
        - name: responseGroups
          in: query
          description: >-
            Used to get more specific information from the request. For example
            to get discounts applied to a product use the AppliedProducts
            response group. Available response groups: ApplicableDiscounts,
            VariationOptions, and BaseProductCode.
          schema:
            type: string
            description: >-
              Used to get more specific information from the request. For
              example to get discounts applied to a product use the
              AppliedProducts response group. Available response groups:
              ApplicableDiscounts, VariationOptions, and BaseProductCode.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - Product
      summary: Modifies an existing product.
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-created code associated with the product, for example, a
              SKU. Required.
            nullable: true
      requestBody:
        description: >-
          Properties of the product that you want to update. Required
          properties: ProductCode, Content.ProductName, and Price.ListPrice.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - Product
      summary: Deletes the product specified by its product code.
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-created code associated with the product, for example, a
              SKU. Required.
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/ProductInCatalogs/{catalogId}':
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInCatalogInfo'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: catalogId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
  '/commerce/catalog/admin/products/{productCode}/ProductInCatalogs':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCatalogInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCatalogInfo'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCatalogInfo'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductInCatalogInfo'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCatalogInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCatalogInfo'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCatalogInfo'
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInCatalogInfo'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductInCatalogInfo'
  /commerce/catalog/admin/products/Actions/RenameProductCodes:
    post:
      tags:
        - Product
      summary: >-
        Action that allows productCodes to be Renamed. Changing the resource
        identifier of a product could cause problems for established products.
      requestBody:
        description: >-
          An array specifying the existing productCode and the new productCode
          it should be renamed to
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductCodeRename'
              description: >-
                An array specifying the existing productCode and the new
                productCode it should be renamed to
              nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/variations':
    get:
      tags:
        - Product
      summary: "Retrieves a paged list of product variations for a specific product according to any specified filter criteria and\r\nsort options."
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-supplied code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-supplied code associated with the product, for example, a
              SKU. Required.
            nullable: true
        - name: startIndex
          in: query
          description: "Used to page results from a query. Indicates the zero-based offset in the complete result set\r\nwhere the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items,\r\nstartIndex=3. The default value is 0. Optional."
          schema:
            type: integer
            description: "Used to page results from a query. Indicates the zero-based offset in the complete result set\r\nwhere the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items,\r\nstartIndex=3. The default value is 0. Optional."
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: "Used to page results from a query. Indicates the maximum number of entities to return from a\r\nquery. The default value is 20 and the maximum value is 200. Optional."
          schema:
            type: integer
            description: "Used to page results from a query. Indicates the maximum number of entities to return from a\r\nquery. The default value is 20 and the maximum value is 200. Optional."
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: "The element to sort the results by and the order in which the results appear. Either ascending\r\n(a-z) or descending (z-a) order. Optional."
          schema:
            type: string
            description: "The element to sort the results by and the order in which the results appear. Either ascending\r\n(a-z) or descending (z-a) order. Optional."
            nullable: true
        - name: filter
          in: query
          description: "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not\r\nequals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw =\r\nstarts with, or cont = contains. Optional."
          schema:
            type: string
            description: "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not\r\nequals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw =\r\nstarts with, or cont = contains. Optional."
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationPagedCollection'
    put:
      tags:
        - Product
      summary: "Modifies multiple product variations for an existing product in one operation. Use to set IsActive to true for\r\nvariations that represent configurable options for sale. Also use to change the price or inventory count of an\r\nexisting product variation. Read-only options are ignored."
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-supplied code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-supplied code associated with the product, for example, a
              SKU. Required.
            nullable: true
      requestBody:
        description: Properties of the product variations that you are modifying. Required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationCollection'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationCollection'
  '/commerce/catalog/admin/products/{productCode}/variations/{variationKey}':
    get:
      tags:
        - Product
      summary: >-
        Retrieves an existing product variation for a specific product and
        variation key.
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-created code associated with the product, for example, a
              SKU. Required.
            nullable: true
        - name: variationKey
          in: path
          description: >-
            Unique identifier for a single product variation. System-supplied
            and read-only.
          required: true
          schema:
            type: string
            description: >-
              Unique identifier for a single product variation. System-supplied
              and read-only.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariation'
    put:
      tags:
        - Product
      summary: "Modifies an existing product variation specified by its variation key. Typically used to change the price or\r\ninventory count of an existing product variation. Read-only options are ignored."
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-created code associated with the product, for example, a
              SKU. Required.
            nullable: true
        - name: variationKey
          in: path
          description: >-
            Unique identifier for a single variation. System-supplied and
            read-only.
          required: true
          schema:
            type: string
            description: >-
              Unique identifier for a single variation. System-supplied and
              read-only.
            nullable: true
      requestBody:
        description: Properties of the product variation that you are modifying. Required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariation'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariation'
    delete:
      tags:
        - Product
      summary: Deletes an existing product variation.
      parameters:
        - name: productCode
          in: path
          description: >-
            Merchant-created code associated with the product, for example, a
            SKU. Required.
          required: true
          schema:
            type: string
            description: >-
              Merchant-created code associated with the product, for example, a
              SKU. Required.
            nullable: true
        - name: variationKey
          in: path
          description: >-
            Unique identifier for a single product variation. System-supplied
            and read-only.
          required: true
          schema:
            type: string
            description: >-
              Unique identifier for a single product variation. System-supplied
              and read-only.
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationDeltaPrice'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationDeltaPrice'
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationDeltaPrice'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
  '/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice/{currencyCode}':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationDeltaPrice'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationDeltaPrice'
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationFixedPrice'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductVariationFixedPrice'
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationFixedPrice'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
  '/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice/{currencyCode}':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariationFixedPrice'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationFixedPrice'
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: variationKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/Extras':
    get:
      tags:
        - Product
      summary: Get extras for the product
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtra'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtra'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtra'
    post:
      tags:
        - Product
      summary: Add extra
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductExtra'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExtra'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductExtra'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductExtra'
  '/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}':
    get:
      tags:
        - Product
      summary: Get individual extra
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExtra'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductExtra'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductExtra'
    put:
      tags:
        - Product
      summary: Update extra
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductExtra'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExtra'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductExtra'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductExtra'
    delete:
      tags:
        - Product
      summary: Delete extra
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
  '/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice/{currencyCode}':
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: currencyCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
  '/commerce/catalog/admin/products/{ProductCode}/LocationInventory':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationInventoryCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/LocationInventoryCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/LocationInventoryCollection'
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: performUpserts
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LocationInventory'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LocationInventoryAdjustment'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationInventory'
  '/commerce/catalog/admin/products/{ProductCode}/LocationInventory/{LocationCode}':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationInventory'
            text/json:
              schema:
                $ref: '#/components/schemas/LocationInventory'
            text/plain:
              schema:
                $ref: '#/components/schemas/LocationInventory'
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: locationCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/Options':
    get:
      tags:
        - Product
      summary: Get options for the product
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOption'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOption'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOption'
    post:
      tags:
        - Product
      summary: Add option
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductOption'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOption'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductOption'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductOption'
  '/commerce/catalog/admin/products/{productCode}/Options/{attributeFQN}':
    get:
      tags:
        - Product
      summary: Get individual option
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOption'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductOption'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductOption'
    put:
      tags:
        - Product
      summary: Update option
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductOption'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOption'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductOption'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductOption'
    delete:
      tags:
        - Product
      summary: Delete option
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/Properties':
    get:
      tags:
        - Product
      summary: Get properties for the product
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductProperty'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductProperty'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductProperty'
    post:
      tags:
        - Product
      summary: Add property
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductProperty'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProperty'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductProperty'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductProperty'
  '/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}':
    get:
      tags:
        - Product
      summary: Get individual property
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProperty'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductProperty'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductProperty'
    put:
      tags:
        - Product
      summary: Update property
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductProperty'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProperty'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductProperty'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductProperty'
    delete:
      tags:
        - Product
      summary: Delete property
      parameters:
        - name: productCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
    post:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
  '/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}':
    get:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
    put:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
    delete:
      tags:
        - Product
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: attributeFQN
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: value
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/productsortdefinitions:
    get:
      tags:
        - ProductSortDefinition
      summary: >-
        Retrieves a list of product sort definitions according to any specified
        filter criteria and sort options.
      parameters:
        - name: startIndex
          in: query
          description: >-
            Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. The
            default value is 0.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the zero-based offset
              in the complete result set where the returned entities begin. The
              default value is 0.
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: >-
            Used to page results from a query. Indicates the maximum number of
            entities to return from a query. The default value is 20 and the
            maximum value is 200.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the maximum number of
              entities to return from a query. The default value is 20 and the
              maximum value is 200.
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: >-
            The element to sort the results by and the order in which the
            results appear. Either ascending (a-z) or descending (z-a) order.
          schema:
            type: string
            description: >-
              The element to sort the results by and the order in which the
              results appear. Either ascending (a-z) or descending (z-a) order.
            nullable: true
        - name: filter
          in: query
          description: >-
            A set of filter expressions representing the search parameters for a
            query: eq=equals, ne=not equals, gt=greater than, lt = less than or
            equals, gt = greater than or equals, lt = less than or equals, sw =
            starts with, or cont = contains. Optional.
          schema:
            type: string
            description: >-
              A set of filter expressions representing the search parameters for
              a query: eq=equals, ne=not equals, gt=greater than, lt = less than
              or equals, gt = greater than or equals, lt = less than or equals,
              sw = starts with, or cont = contains. Optional.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinitionPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinitionPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductSortDefinitionPagedCollection'
    post:
      tags:
        - ProductSortDefinition
      summary: Adds a new product sort definition
      parameters:
        - name: useProvidedId
          in: query
          description: >-
            If true, the provided Id value will be used as the
            ProductSortDefinitionId. If omitted or false, the system will
            generate a ProductSortDefinitionId
          schema:
            type: boolean
            description: >-
              If true, the provided Id value will be used as the
              ProductSortDefinitionId. If omitted or false, the system will
              generate a ProductSortDefinitionId
            default: false
      requestBody:
        description: >-
          Properties of the new product sort definition. Required properties of
          StartDate and Name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSortDefinition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
  '/commerce/catalog/admin/productsortdefinitions/{productSortDefinitionId}':
    get:
      tags:
        - ProductSortDefinition
      summary: Gets a single product sort definition.
      parameters:
        - name: productSortDefinitionId
          in: path
          description: Unique identifier of the product sort definition.
          required: true
          schema:
            type: integer
            description: Unique identifier of the product sort definition.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
    put:
      tags:
        - ProductSortDefinition
      summary: Updates the details of a product sort definition
      parameters:
        - name: productSortDefinitionId
          in: path
          description: Unique identifier of the product sort definition.
          required: true
          schema:
            type: integer
            description: Unique identifier of the product sort definition.
            format: int32
      requestBody:
        description: The details of the product sort definition to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSortDefinition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductSortDefinition'
    delete:
      tags:
        - ProductSortDefinition
      summary: >-
        Deletes the product sort definition specified by its
        ProductSortDefinitionID.
      parameters:
        - name: productSortDefinitionId
          in: path
          description: Unique identifier of the product sort definition.
          required: true
          schema:
            type: integer
            description: Unique identifier of the product sort definition.
            format: int32
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/attributedefinition/producttypes:
    get:
      tags:
        - ProductType
      summary: >-
        Retrieves a list of product types according to any specified filter
        criteria and sort options.
      parameters:
        - name: startIndex
          in: query
          description: >-
            Used to page results from a query. Indicates the zero-based offset
            in the complete result set where the returned entities begin. For
            example, with a PageSize of 25, to get the 51st through the 75th
            items, startIndex=3. The default value is 0.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the zero-based offset
              in the complete result set where the returned entities begin. For
              example, with a PageSize of 25, to get the 51st through the 75th
              items, startIndex=3. The default value is 0.
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          description: >-
            Used to page results from a query. Indicates the maximum number of
            entities to return from a single query. The default value is 20 and
            the maximum value is 200.
          schema:
            type: integer
            description: >-
              Used to page results from a query. Indicates the maximum number of
              entities to return from a single query. The default value is 20
              and the maximum value is 200.
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          description: >-
            The element to sort the results by and the order in which the
            results appear. Either ascending or descending order. For example,
            to sort the results by “ID” ascending then by “CreateDate”
            descending, use: id asc,createdate desc.
          schema:
            type: string
            description: >-
              The element to sort the results by and the order in which the
              results appear. Either ascending or descending order. For example,
              to sort the results by “ID” ascending then by “CreateDate”
              descending, use: id asc,createdate desc.
            nullable: true
        - name: filter
          in: query
          description: >-
            A set of filter expressions representing the search parameters for a
            query: eq=equals, ne=not equals, gt=greater than, lt = less than or
            equals, gt = greater than or equals, lt = less than or equals, sw =
            starts with, or cont = contains. Optional.
          schema:
            type: string
            description: >-
              A set of filter expressions representing the search parameters for
              a query: eq=equals, ne=not equals, gt=greater than, lt = less than
              or equals, gt = greater than or equals, lt = less than or equals,
              sw = starts with, or cont = contains. Optional.
            nullable: true
        - name: responseGroups
          in: query
          description: >-
            Used to get more specific information from the request. For example
            to get discounts applied to a product use the AppliedProducts
            response group. Available response groups: ApplicableDiscounts,
            VariationOptions, and BaseProductCode.
          schema:
            type: string
            description: >-
              Used to get more specific information from the request. For
              example to get discounts applied to a product use the
              AppliedProducts response group. Available response groups:
              ApplicableDiscounts, VariationOptions, and BaseProductCode.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTypeCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductTypeCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductTypeCollection'
    post:
      tags:
        - ProductType
      summary: Add or create product type
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductType'
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}':
    get:
      tags:
        - ProductType
      summary: Get product type by Id
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductType'
    put:
      tags:
        - ProductType
      summary: Update product type
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductType'
    delete:
      tags:
        - ProductType
      summary: Delete product type
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/variations':
    post:
      tags:
        - ProductType
      parameters:
        - name: productTypeId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: productCode
          in: query
          schema:
            type: string
            nullable: true
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductOption'
              nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariationPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductVariationPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductVariationPagedCollection'
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras':
    get:
      tags:
        - ProductType
      summary: Get extras
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
    post:
      tags:
        - ProductType
      summary: Add extra
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeInProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}':
    get:
      tags:
        - ProductType
      summary: Get extra
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
    put:
      tags:
        - ProductType
      summary: Update extra
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeInProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
    delete:
      tags:
        - ProductType
      summary: Delete extra
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options':
    get:
      tags:
        - ProductType
      summary: Get options for the product type
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
    post:
      tags:
        - ProductType
      summary: Add option
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeInProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}':
    get:
      tags:
        - ProductType
      summary: Get individual option
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
    put:
      tags:
        - ProductType
      summary: Update option
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeInProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
    delete:
      tags:
        - ProductType
      summary: Delete option
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties':
    get:
      tags:
        - ProductType
      summary: Get properties
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeInProductType'
    post:
      tags:
        - ProductType
      summary: Add or create property
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeInProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
  '/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}':
    get:
      tags:
        - ProductType
      summary: Get property
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
    put:
      tags:
        - ProductType
      summary: Update property
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeInProductType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/json:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
            text/plain:
              schema:
                $ref: '#/components/schemas/AttributeInProductType'
    delete:
      tags:
        - ProductType
      summary: Delete property
      parameters:
        - name: productTypeId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            description: ''
            format: int32
        - name: attributeFQN
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/publishing/publishdrafts:
    post:
      tags:
        - Publishing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishingScope'
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/publishing/discarddrafts:
    post:
      tags:
        - Publishing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishingScope'
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/publishing/publishsets:
    get:
      tags:
        - Publishing
      summary: Retrieves a list of PublishSets including the product counts.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishSetCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/PublishSetCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/PublishSetCollection'
    post:
      tags:
        - Publishing
      summary: ''
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishSet'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishSet'
            text/json:
              schema:
                $ref: '#/components/schemas/PublishSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/PublishSet'
  '/commerce/catalog/admin/publishing/publishsets/{publishSetCode}':
    get:
      tags:
        - Publishing
      summary: Retrieves the details of a single PublishSet.
      parameters:
        - name: publishSetCode
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishSet'
            text/json:
              schema:
                $ref: '#/components/schemas/PublishSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/PublishSet'
    delete:
      tags:
        - Publishing
      summary: "Removes all details about a PublishSet from the product service.\r\nIf the discardDrafts param is true, it also deletes the product drafts."
      parameters:
        - name: publishSetCode
          in: path
          description: The code of the PublishSet to delete
          required: true
          schema:
            type: string
            description: The code of the PublishSet to delete
            nullable: true
        - name: discardDrafts
          in: query
          description: Whether to also discard the drafts for this publish set.
          schema:
            type: boolean
            description: Whether to also discard the drafts for this publish set.
            default: false
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/search/synonym-definitions/{localeCode}':
    get:
      tags:
        - Search
      parameters:
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
    post:
      tags:
        - Search
      parameters:
        - name: localeCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynonymDefinitionCollection'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
  '/commerce/catalog/admin/search/master-catalog-synonym-definitions/{languageCode}':
    get:
      tags:
        - Search
      parameters:
        - name: languageCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionCollection'
  /commerce/catalog/admin/search/synonyms:
    get:
      tags:
        - Search
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinitionPagedCollection'
    post:
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynonymDefinition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
  '/commerce/catalog/admin/search/synonyms/{synonymId}':
    get:
      tags:
        - Search
      parameters:
        - name: synonymId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
    put:
      tags:
        - Search
      parameters:
        - name: synonymId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynonymDefinition'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
            text/json:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
            text/plain:
              schema:
                $ref: '#/components/schemas/SynonymDefinition'
    delete:
      tags:
        - Search
      parameters:
        - name: synonymId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/search/searchtuningrules:
    get:
      tags:
        - Search
      parameters:
        - name: startIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            nullable: true
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: filter
          in: query
          schema:
            type: string
            nullable: true
        - name: responseGroups
          in: query
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleCollection'
    post:
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTuningRule'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
  '/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}':
    get:
      tags:
        - Search
      parameters:
        - name: searchTuningRuleCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
    put:
      tags:
        - Search
      parameters:
        - name: searchTuningRuleCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTuningRule'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchTuningRule'
    delete:
      tags:
        - Search
      parameters:
        - name: searchTuningRuleCode
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/search/searchtuningrulesortfields:
    get:
      tags:
        - Search
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleSortFields'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleSortFields'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleSortFields'
    post:
      tags:
        - Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTuningRuleSortFields'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleSortFields'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleSortFields'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchTuningRuleSortFields'
  '/commerce/catalog/admin/search/{name}/categorysuggestsettings':
    get:
      tags:
        - Search
      summary: Get CategorySuggestSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
    put:
      tags:
        - Search
      summary: >-
        Adds or Updates (Upsert) the CategorySuggestSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
    delete:
      tags:
        - Search
      summary: Deletes the CategorySuggestSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/search/{name}/listingsettings':
    get:
      tags:
        - Search
      summary: Get ListingSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/ListingSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/ListingSettings'
    put:
      tags:
        - Search
      summary: >-
        Adds or Updates (Upsert) the ListingSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/ListingSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/ListingSettings'
    delete:
      tags:
        - Search
      summary: Deletes the ListingSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  '/commerce/catalog/admin/search/{name}/productsuggestsettings':
    get:
      tags:
        - Search
      summary: Get ProductSuggestSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SuggestSettings'
    put:
      tags:
        - Search
      summary: >-
        Adds or Updates (Upsert) the ProductSuggestSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSuggestSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSuggestSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/ProductSuggestSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProductSuggestSettings'
    delete:
      tags:
        - Search
      summary: Deletes the ProductSuggestSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  /commerce/catalog/admin/search/settings:
    get:
      tags:
        - Search
      summary: Get site search settings
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSettingsCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchSettingsCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchSettingsCollection'
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Search Settings for a specific site
      parameters:
        - name: fromSystemDefault
          in: query
          schema:
            type: boolean
            default: false
        - name: name
          in: query
          schema:
            type: string
            nullable: true
        - name: makeDefault
          in: query
          schema:
            type: boolean
            default: false
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchSettings'
  '/commerce/catalog/admin/search/settings/{name}':
    get:
      tags:
        - Search
      summary: Get site search settings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchSettings'
    put:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Search Settings for a specific site
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchSettings'
    delete:
      tags:
        - Search
      summary: Adds or Updates (Upsert) the Search Settings for a specific site
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchSettings'
  /commerce/catalog/admin/search/settings/systemdefault:
    get:
      tags:
        - Search
      summary: Get the System Default search settings
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SearchSettings'
  '/commerce/catalog/admin/search/{name}/sitesearchsettings':
    get:
      tags:
        - Search
      summary: Get SiteSearchSettings for a specific SearchSettings
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteSearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SiteSearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SiteSearchSettings'
    put:
      tags:
        - Search
      summary: >-
        Adds or Updates (Upsert) the SiteSearchSettings for a specific
        SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteSearchSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteSearchSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SiteSearchSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/SiteSearchSettings'
    delete:
      tags:
        - Search
      summary: Deletes the SiteSearchSettings for a specific SearchSetting
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
components:
  securitySchemes:
    bearerAuth:
      type: http
      description: "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\""
      scheme: bearer
      bearerFormat: JWT
    clientOauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /platform/applications/internal/access-tokens/oauth/
          scopes: {}
  schemas:
    AttributeMetadataItem:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
      description: >-
        Attribute Metadata Item.  It can be utilized for storing abitrary
        key/value pairs of data related to an attribute.
    AttributeLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: >-
            Language used for the attribute name and description. Currently,
            only en_US is supported.
          nullable: true
        name:
          type: string
          description: Name of the attribute in the language specified by LocaleCode.
          nullable: true
        description:
          type: string
          description: >-
            Description of the attribute in the language specified by
            LocaleCode.
          nullable: true
      additionalProperties: false
      description: >-
        Container for language-specific content to display on the storefront.
        You'll have a container for each supported language (LocaleCode). This
        enables you to display an attribute in multiple languages yet manage it
        as a single attribute internally.
    AttributeValidation:
      type: object
      properties:
        regularExpression:
          type: string
          description: >-
            Regular expression to run against the attribute value. This should
            follow JavaScript/EMCA's Regular Expression syntax.
          nullable: true
        minStringLength:
          type: integer
          description: 'For validating strings, minimum length allowed for a string.'
          format: int32
          nullable: true
        maxStringLength:
          type: integer
          description: 'For validating strings, maximum length allowed for a string.'
          format: int32
          nullable: true
        minNumericValue:
          type: number
          description: 'For validating Number attribute value, minimum number allowed.'
          format: double
          nullable: true
        maxNumericValue:
          type: number
          description: 'For validating Number attribute value, maximum number allowed.'
          format: double
          nullable: true
        minDateValue:
          type: string
          description: 'For validating a DateTime attribute value, minimum datetime allowed.'
          format: date-time
          nullable: true
        maxDateValue:
          type: string
          description: 'For validating a DateTime attribute value, maximum datetime allowed.'
          format: date-time
          nullable: true
      additionalProperties: false
      description: Used to validate attributes.
    AttributeVocabularyValueLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: >-
            Language used for the string attribute value. Currently, only en_US
            is supported.
          nullable: true
        stringValue:
          type: string
          description: Localized Value in the language of the locale code
          nullable: true
      additionalProperties: false
      description: Attribute Value Localized Resource
    AttributeVocabularyValue:
      type: object
      properties:
        valueSequence:
          type: integer
          description: Read only System generated monotonically increasing unique sequence.
          format: int32
          nullable: true
        value:
          type: object
          additionalProperties: false
          description: "The actual value of the attribute vocabulary. This value must be unique within the vocabulary for a single attribute and match the datatype of the attribute. \r\nString data type requires a canonical value here or one will be system generated if null. The actual string content displayed to users should be stored as Content. \r\nString values require content to be present.\r\nOnce this value is set it cannot be changed."
          nullable: true
        mappedGenericValues:
          type: array
          items:
            type: object
            additionalProperties: false
          description: "The actual values of the related generic attribute. This value must match the datatype of the attribute and already exist \r\nwithin the Vocabulary values of the related ValueMappingAttribute. Only supporting string at this time."
          nullable: true
        productName:
          type: string
          description: The ProductName when the Attribute DataType is ProductCode.
          nullable: true
        content:
          $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
        localizedContent:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
          description: >-
            The Content of an attribute value. This content is in multiple
            locals supported by the master catalog and is only valid for String
            DataType.
          nullable: true
        displayOrder:
          type: integer
          description: >-
            The order in which the attribute value displays. If you omit a value
            for this property, Mozu infers the display order from the attribute
            value's position the list.
          format: int32
          nullable: true
      additionalProperties: false
      description: Value of an attribute
    AttributeSearchSettings:
      type: object
      properties:
        searchableInStorefront:
          type: boolean
          description: >-
            Indicates whether the attribute value should be searchable on the
            public storefront.
        searchableInAdmin:
          type: boolean
          description: >-
            Indicates whether the attribute value should be searchable in the
            merchant catalog admin.
        searchDisplayValue:
          type: boolean
          description: "If true, the system will index the display value of string attributes instead of the canonical value for searching. \r\nThe canonical value will always be used for filtering. Does not apply for for non-string attributes."
        allowFilteringAndSortingInStorefront:
          type: boolean
          description: >-
            Indicates whether the attribute should be able to be used in
            filters, facets, and sorting on the public storefront.
          nullable: true
        indexValueWithCase:
          type: boolean
          description: "Indicates whether the attribute value is case sensative for filtering and faceting. This applies to Text Admin entered attributes. \r\nA null value means it is not case sensative"
          nullable: true
        customWeightInStorefrontSearch:
          type: boolean
          description: >-
            Indicates whether the attribute is indevidually stored as a
            tokenized field in search for custom term search weight
          nullable: true
      additionalProperties: false
      description: >-
        Attribute Search Settings. A container for all of the search and
        indexing settings of an Attribute
    AuditInfo:
      type: object
      properties:
        updateDate:
          type: string
          format: date-time
          nullable: true
        createDate:
          type: string
          format: date-time
          nullable: true
        updateBy:
          type: string
          nullable: true
        createBy:
          type: string
          nullable: true
      additionalProperties: false
    Attribute:
      type: object
      properties:
        adminName:
          type: string
          description: >-
            Name of the product displayed in the admin, This field does not need
            to be unqiue, but is required. It can include spaces...and is
            limited to a length of 50.
          nullable: true
        namespace:
          type: string
          description: "NameSpace, each application creating attributes will have a uniqe namespace to avoid name (Code) collisions. The namespace provided must be a valid registered\r\nnamespace. If no namespace is specified it is assumed to be the namespace of the Tenant."
          nullable: true
        attributeCode:
          type: string
          description: "Unique identifier of the Attribute. Must be unique within a namespace and cannot be changed once the attribute is created. This value will be generated and match the attribute\r\nsequence if not provided on create."
          nullable: true
        attributeFQN:
          type: string
          description: >-
            Attribute fully qualified name, Read only value that combines
            namespace and attribute code as NameSpace~AttributeCode
          nullable: true
        isValueMappingAttribute:
          type: boolean
          description: >-
            Specifies if this attribute can can be used to generalize values of
            another attribute
          nullable: true
        valueMappingAttributeFQN:
          type: string
          description: >-
            Attribute fully qualified name of a corresponding value mapping
            atribuite
          nullable: true
        attributeSequence:
          type: integer
          description: >-
            Read only System generated monotonically increasing unique sequence
            for each attribute created.
          format: int32
          nullable: true
        attributeDataTypeSequence:
          type: integer
          description: >-
            Read only System generated monotonically increasing unique sequence
            for each attribute,DataType created (this is used to optimize
            indexed field names in search).
          format: int32
          nullable: true
        masterCatalogId:
          type: integer
          description: >-
            Indentifier of the master that this attribute is a member of.
            System-supplied and read-only. Attributes will be created in the
            MasterCatalog of the supplied context.
          format: int32
          nullable: true
        inputType:
          maxLength: 20
          type: string
          description: "The InputType type of the attribute. Must be a valid value for InputType defined in InputTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. \r\nThis value cannot be changed after create"
          nullable: true
        valueType:
          maxLength: 20
          type: string
          description: "The ValueType of the attribute.  Must be a valid value for ValueType defined in ValueTypeTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. \r\nThis value cannot be changed after create"
          nullable: true
        dataType:
          maxLength: 20
          type: string
          description: "The DataType of the attribute.  Must be a valid value for DataType defined in DataTypeTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. \r\nThis value cannot be changed after create"
          nullable: true
        isOption:
          type: boolean
          description: >-
            Specifies if this attribute can have a usage type of Option in a
            ProductType. This value can only be true when when it matches an
            AttributeTypeRule in the AttributeTypeRules resource.
          nullable: true
        isExtra:
          type: boolean
          description: >-
            Specifies if this attribute can have a usage type of Extra in a
            ProductType. This value can only be true when when it matches an
            AttributeTypeRule in the AttributeTypeRules resource.
          nullable: true
        isProperty:
          type: boolean
          description: >-
            Specifies if this attribute can have a usage type of Property in a
            ProductType. This value can only be true when when it matches an
            AttributeTypeRule in the AttributeTypeRules resource.
          nullable: true
        attributeMetadata:
          type: array
          items:
            $ref: '#/components/schemas/AttributeMetadataItem'
          description: >-
            Attribute Metadata. This list can contain opaque data (key value
            pairs) that can be used as a property bag for UI concerns.
          nullable: true
        content:
          $ref: '#/components/schemas/AttributeLocalizedContent'
        localizedContent:
          type: array
          items:
            $ref: '#/components/schemas/AttributeLocalizedContent'
          description: >-
            The Content of an attribute. This content is always in the default
            language of the MasterCatalog.
          nullable: true
        validation:
          $ref: '#/components/schemas/AttributeValidation'
        vocabularyValues:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVocabularyValue'
          description: >-
            The list of Values for this attribute. Only available for
            ValueType:PredefinedVocabulary
          nullable: true
        searchSettings:
          $ref: '#/components/schemas/AttributeSearchSettings'
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: Attribute
    AttributeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
      additionalProperties: false
      description: Collection of attributes.
    AttributeTypeRule:
      type: object
      properties:
        attributeInputType:
          type: string
          description: AttributeInputType identifier
          nullable: true
        attributeDataType:
          type: string
          description: AttributeDataType identifier
          nullable: true
        attributeValueType:
          type: string
          description: AttributeValueType identifier
          nullable: true
        attributeUsageType:
          type: string
          description: AttributeUsageType identifier
          nullable: true
      additionalProperties: false
      description: Attribute Value Localized Resource
    AttributeTypeRuleCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/AttributeTypeRule'
          nullable: true
      additionalProperties: false
      description: A collection of AttributeType rules
    CategoryLocalizedImage:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the image. System-supplied and read-only.
          format: int32
          nullable: true
        localeCode:
          type: string
          description: Language used for the image content.
          nullable: true
        imageLabel:
          type: string
          description: Image title that appears on the storefront.
          nullable: true
        altText:
          type: string
          description: >-
            Descriptive text associated with the image or video that appears on
            the storefront.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        videoUrl:
          type: string
          description: URL of a video associated with the category.
          nullable: true
        mediaType:
          type: string
          description: >-
            Type of media. Used by the client to determine how to render the
            image or video or what have you.
          nullable: true
        sequence:
          type: integer
          description: >-
            For categories with multiple images, the order in which this image
            appears on the storefront.
          format: int32
          nullable: true
      additionalProperties: false
      description: >-
        Contains the image label and alternate text for a category image or
        video in the language specified by LocalCode.
    CategoryLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: >-
            Lanugage used for category content. Currently, only en_US is
            supported.
          nullable: true
        name:
          type: string
          description: Name of the category.
          nullable: true
        slug:
          type: string
          description: "Human-readable identifier that you can give to the category to create friendly URLs. For example, \r\ninstead of \"http: //example.com/products?category=2&id=25,\" the friendly URL can be \"http: //example.com/products/category/2/25.\""
          nullable: true
        description:
          type: string
          description: Description of the category to display on the storefront.
          nullable: true
        pageTitle:
          type: string
          description: Title that appears at the top of new pages.
          nullable: true
        metaTagTitle:
          type: string
          description: >-
            Metadata title. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagDescription:
          type: string
          description: >-
            Metadata description. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagKeywords:
          type: string
          description: >-
            Metadata keywords. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        categoryImages:
          type: array
          items:
            $ref: '#/components/schemas/CategoryLocalizedImage'
          description: List of images associated with the category.
          nullable: true
      additionalProperties: false
      description: >-
        Container for language-specific content to display on the storefront.
        You'll have a container for each supported language (LocaleCode). This
        enables you to display a category in multiple languages yet manage it as
        a single category internally.
    Expression:
      type: object
      properties:
        type:
          type: string
          description: Container or Predicate
          nullable: true
        logicalOperator:
          type: string
          description: And or Or (if Container with More than one Node)
          nullable: true
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Expression'
          nullable: true
        left:
          type: string
          description: The field target of a predicate
          nullable: true
        operator:
          type: string
          description: The operator of a predicate
          nullable: true
        right:
          type: object
          additionalProperties: false
          description: The literal values of a predicate
          nullable: true
      additionalProperties: false
    DynamicExpression:
      type: object
      properties:
        text:
          type: string
          nullable: true
        tree:
          $ref: '#/components/schemas/Expression'
      additionalProperties: false
      description: Category
    Category:
      type: object
      properties:
        id:
          type: integer
          description: >-
            Internal unique identifier of the category. System-supplied and
            read-only.
          format: int32
          nullable: true
        categoryType:
          type: string
          description: 'The Type of Category Static, Dyanmic, DynamicPreComputed'
          nullable: true
        catalogId:
          type: integer
          description: The CatalogId that the category belongs to.
          format: int32
          nullable: true
        parentCategoryId:
          type: integer
          description: >-
            Unique identifier of the category to which this category belongs. If
            nil, this is a top-level category. System-supplied and read-only.
          format: int32
          nullable: true
        parentCategoryCode:
          type: string
          nullable: true
        parentCategoryName:
          type: string
          nullable: true
        parentIsActive:
          type: boolean
          nullable: true
        categoryCode:
          type: string
          description: External unique identifier of the category.
          nullable: true
        isActive:
          type: boolean
          description: >-
            If false, the category is considered unavailable in runtime (default
            is true if not specified on create)
          nullable: true
        isDisplayed:
          type: boolean
          description: 'If true, the category appears to shoppers on the storefront.'
          nullable: true
        sequence:
          type: integer
          description: >-
            Order in which categories appear when they are at the same level
            (siblings). For example, you could change the sequence of categories
            so that a specific category always appears first.
          format: int32
          nullable: true
        content:
          $ref: '#/components/schemas/CategoryLocalizedContent'
        dynamicExpression:
          $ref: '#/components/schemas/DynamicExpression'
        productCount:
          type: integer
          description: >-
            Number of products contained in this category. This count includes
            all products contained in any subcategories of this category.
          format: int32
          nullable: true
        childCount:
          type: integer
          description: >-
            Number of subcategories that belong to this category. These
            subcategories are at the same level (siblings).
          format: int32
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
        shouldSlice:
          type: boolean
          description: 'If True, search displays sliced view'
          nullable: true
      additionalProperties: false
      description: Category
    CategoryPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          nullable: true
      additionalProperties: false
      description: >-
        Collection of categories where categories are returned in a series of
        pages.
    CategoryCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    CoreField:
      type: object
      properties:
        fieldName:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        entityTpe:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
      additionalProperties: false
    CoreFieldCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/CoreField'
          nullable: true
      additionalProperties: false
    CouponSet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          description: >-
            Internal unique identifier of the couponset. System-supplied and
            read-only.
          format: int32
          nullable: true
        couponSetCode:
          maxLength: 32
          type: string
          description: "Unique tenant supplied identifier.\r\nUsed as the prefix for generated sets.\r\nRequired\r\nSystem generated if left null."
          nullable: true
        name:
          maxLength: 200
          type: string
          description: CouponSet Name
        couponCodeType:
          type: string
          description: "Determines if the coupon is a persisted list of codes (static) or a list based on generated specification\r\n(dynamic)."
          nullable: true
        status:
          type: string
          description: "CouponSet status which can be: Active, Expired,  Inactive\r\nSystem-supplied and read-only."
          nullable: true
        canBeDeleted:
          type: boolean
          description: "Signifies that the coupon has not been exported and can be updated\r\nReadOnly"
        maxRedemptionsPerUser:
          type: integer
          description: "Maximum number of times any single user can redeem any code.\r\nMust be null, >=1 or -1.\r\nDefaults to 1 on creation if null.\r\n-1 indicates unlimited."
          format: int32
          nullable: true
        maxRedemptionsPerCouponCode:
          type: integer
          description: "Maximum number of times any code can de used.\r\nMust be null, >=1 or -1.\r\nDefaults to 1 on creation if null.\r\n-1 indicates unlimited."
          format: int32
          nullable: true
        endDate:
          type: string
          description: Date and time that the coupon codes becomes expired
          format: date-time
          nullable: true
        startDate:
          type: string
          description: Date and time that the coupon codes becomes active
          format: date-time
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
        setSize:
          type: integer
          description: "Sets the number of codes to generate for dynamic coupons\r\nRequired when CouponCodeType is \"Dynamic\""
          format: int32
          nullable: true
        couponCodeCount:
          type: integer
          description: "Count of associated couponCodes.\r\nMust use \"counts\" response group to get this value\r\nReadOnly"
          format: int32
          nullable: true
        redemptionCount:
          type: integer
          description: ReadOnly count of all redemptions for this coupon set.
          format: int32
          nullable: true
        assignedDiscountCount:
          type: integer
          description: "ReadOnly sum of all redemptions for this coupon.\r\nUse \"counts\" response group."
          format: int32
          nullable: true
      additionalProperties: false
      description: >-
        Represents a claimable item that allows a user to use one or more
        discounts.
    CouponSetCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/CouponSet'
          nullable: true
      additionalProperties: false
      description: Paged collection of Mozu.ProductAdmin.Contracts.CouponSet
    Coupon:
      required:
        - couponCode
      type: object
      properties:
        couponSetId:
          type: integer
          description: ReadOnly system id for releated couponset.
          format: int32
        couponSetCode:
          type: string
          description: Link to associated coupon
          nullable: true
        couponCode:
          type: string
          description: The code the customer uses to claim this coupon
        canBeDeleted:
          type: boolean
        redemptionCount:
          type: integer
          description: "Total number of times this code has been redeemed. ReadOnly, calculated.\r\nOnly returned with response group includeCounts"
          format: int32
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: Coupon in a coupon set.
    CouponCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/Coupon'
          nullable: true
      additionalProperties: false
    AssignedDiscount:
      required:
        - discountId
      type: object
      properties:
        couponSetCode:
          type: string
          description: 'ReadOnly, CouponSetCode copied from URI'
          nullable: true
        couponSetId:
          type: integer
          description: 'ReadOnly, CouponSetId'
          format: int32
        discountId:
          type: integer
          description: Discount Id for the associated discount
          format: int32
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
    CurrencyLocalization:
      type: object
      properties:
        currencyCode:
          type: string
          description: Currency Code
          nullable: true
        decimalPlaces:
          type: integer
          description: Number of decimal places to round to
          format: int32
          nullable: true
        roundingStrategy:
          type: integer
          description: The rounding strategy to use
          format: int32
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: A currency and some localization options
    CurrencyLocalizationCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyLocalization'
          nullable: true
      additionalProperties: false
      description: Non-pages collection of currency-localizations.
    CurrencyExchangeRate:
      required:
        - rate
      type: object
      properties:
        fromCurrencyCode:
          type: string
          description: The source currency code
          nullable: true
        toCurrencyCode:
          type: string
          description: The target currency code
          nullable: true
        rate:
          type: number
          description: The exchange rate
          format: double
        multiplier:
          type: number
          description: An additional multiplier to use in calculations
          format: double
          nullable: true
        referenceData:
          type: string
          description: Reference data for miscellaneous metadata from updates
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: The exchange rate between two currencies
    CurrencyExchangeRateCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyExchangeRate'
          nullable: true
      additionalProperties: false
      description: Non-pages collection of currency-exchange-rates.
    DiscountLocalizedContent:
      required:
        - name
      type: object
      properties:
        localeCode:
          maxLength: 8
          minLength: 0
          type: string
          description: >-
            Lanugage used for the discount in the current catalog. Defaults
            setting for the active catalog.
          nullable: true
        name:
          maxLength: 200
          minLength: 0
          type: string
          description: Name of the discount.
        friendlyDescription:
          type: string
          description: >-
            Promotional text or HTML that can be utilized as friendly content
            like "Buy this product now and get X!"
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: "Container for the language-specific name of the discount. You will have a container for each supported language\r\n(LocaleCode).\r\nThis enables you to display the discount name in multiple languages yet manage it as a single discount internally."
    CategoryDiscountCondition:
      type: object
      properties:
        categoryId:
          type: integer
          description: >-
            Unique identifier of the category to which the discount condition
            applies.
          format: int32
      additionalProperties: false
      description: Represents a product category and quantity constraint
    ProductDiscountCondition:
      type: object
      properties:
        productCode:
          type: string
          description: Product code of the product to discount.
          nullable: true
      additionalProperties: false
      description: Represents a product and quantity constraint
    CustomerSegment:
      type: object
      properties:
        id:
          type: integer
          description: "The Customer segment Id.\r\nThis is the  system Id not the code."
          format: int32
      additionalProperties: false
      description: Represents a customer segment
    DiscountCondition:
      type: object
      properties:
        maxRedemptionCount:
          type: integer
          description: >-
            Maximum number of times that the discount can be redeemed. Default
            is null (no limit to discount redemptions).
          format: int32
          nullable: true
        requiresCoupon:
          type: boolean
          description: >-
            If true, the shopper needs to enter a coupon code to redeem the
            discount.
        couponCode:
          type: string
          description: >-
            Code of the coupon associated with the discount (if a coupon code is
            required). The merchant can supply the code or the system can
            generate it.
          nullable: true
        requiresAuthenticatedUser:
          type: boolean
          description: "Determines is this discount can be used by an anonymous user \r\nDefaults to false to allow discounts for anonymous users."
        includedPaymentWorkflows:
          type: array
          items:
            type: string
          description: List of payment types that trigger this discount to be valid.
          nullable: true
        includedCategories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDiscountCondition'
          description: >-
            List of categories that must be purchased in order for the discount
            to be valid.
          nullable: true
        excludedCategories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDiscountCondition'
          description: >-
            List of categories to discount. When a discount applies to a
            category, all products in the category are discounted.
          nullable: true
        includedProducts:
          type: array
          items:
            $ref: '#/components/schemas/ProductDiscountCondition'
          description: List of products that are eligible for the discount.
          nullable: true
        excludedProducts:
          type: array
          items:
            $ref: '#/components/schemas/ProductDiscountCondition'
          description: List of products that are eligible for the discount.
          nullable: true
        customerSegments:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSegment'
          description: List of customer groups for which the discount applies
          nullable: true
        minimumQuantityRequiredProducts:
          type: integer
          description: "Minimum quantity of products in the specified IncludedProducts that must be purchased to\r\nqualify for the associated discount.\r\nDefaults to 1 if  null and IncludedProducts has values."
          format: int32
          nullable: true
        minimumQuantityProductsRequiredInCategories:
          type: integer
          description: "Minimum quantity of products in the categories specified in IncludedCategories that must be purchased to\r\nqualify for the associated discount.\r\nDefaults to 1 if  null and IncludedCategories has values"
          format: int32
          nullable: true
        minimumOrderAmount:
          type: number
          description: "Only applies to order.\r\nMinimum order subtotal after discounts in order for the associated discount to be applied"
          format: double
          nullable: true
        maximumOrderAmount:
          type: number
          description: "Only applies to order.\r\nMaximum order subtotal after discounts in order for the associated discount to be applied"
          format: double
          nullable: true
        categoriesToExcludeFromMinOrderTotal:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDiscountCondition'
          description: >-
            List of categories to discount. When a discount applies to a
            category, all products in the category are discounted.
          nullable: true
        productsToExcludeFromMinOrderTotal:
          type: array
          items:
            $ref: '#/components/schemas/ProductDiscountCondition'
          description: List of products that are eligible for the discount.
          nullable: true
        minimumLifetimeValueAmount:
          type: number
          description: Minimum lifetime value amount required for this discount to apply
          format: double
          nullable: true
        startDate:
          type: string
          description: >-
            Date when the discount can goes into effect, in the format
            yyyy-mm-dd.
          format: date-time
          nullable: true
        expirationDate:
          type: string
          description: >-
            Date when the discount expires. Default is null (no expiration
            date).
          format: date-time
          nullable: true
        minimumCategorySubtotalBeforeDiscounts:
          type: number
          description: "Minimum amount that must be purchased in the combined categories defined in \r\nIncludedCategories.  Amount is calculated before discounting.\r\nNot used if IncludedCategories is empty."
          format: double
          nullable: true
        minimumRequiredQuantityPerRedemption:
          type: integer
          description: >-
            Defines a minimum quantity that is required for a target only
            discount
          format: int32
          nullable: true
      additionalProperties: false
      description: "Specifies constraints that must be satified for a discount to be applied to a target.\r\nConstraints are Anded together"
    TargetedCategory:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the category to which the discount applies.
          format: int32
          nullable: true
      additionalProperties: false
      description: >-
        Category to discount. When a discount applies to a category, all
        products in the category are discounted.
    TargetedProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Product code of the product to discount.
          nullable: true
      additionalProperties: false
      description: Product to discount.
    TargetedShippingMethod:
      required:
        - code
      type: object
      properties:
        code:
          maxLength: 64
          minLength: 0
          type: string
          description: "Unique identifier of the shipping method as it appears in the SiteShippingMethod property of the Shipping Settings\r\nresource."
        name:
          type: string
          description: >-
            Name of the shipping method as it appears in
            SiteShippingMethodLocalizedContent of the Shipping Settings
            resource.
          nullable: true
      additionalProperties: false
      description: "Shipping method that is eligible for free shipping. This is the shipping method that is defined with the Shipping\r\nSettings resource."
    TargetedShippingZone:
      required:
        - zone
      type: object
      properties:
        zone:
          maxLength: 200
          minLength: 0
          type: string
          description: "Indicates the shipping zone that this discount is valid for.  If zone is provided the\r\nmethod selected must be valid for the zone and both populated in the order for the discount\r\nto be valid."
      additionalProperties: false
      description: "Shipping method that is eligible for free shipping. This is the shipping method that is defined with the Shipping\r\nSettings resource."
    DiscountTarget:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: "    Type of target to which the discount applies. Possible values: <pre>Product</pre> or <pre>Shipping</pre>. \r\nIf this is a <pre>Product</pre> type, you can specify which products or categories that the discount applies to.\r\n    If this is a <pre>Shipping</pre> type then you must specify which shipping methods apply."
        includeAllProducts:
          type: boolean
          description: 'If yes, the discount applies to all products sold on the storefront.'
          nullable: true
        includedCategoriesOperator:
          type: string
          description: "Applies to Included categories\r\nWhen Any, the target product can belong to any specified category.\r\nWhen All, the target product must belong to all specified categories.\r\nDefaults to Any"
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/TargetedCategory'
          description: >-
            List of categories to discount. When a discount applies to a
            category, all products in the category are discounted.
          nullable: true
        excludedCategoriesOperator:
          type: string
          description: "Applies to Included categories\r\nDefaults to Any"
          nullable: true
        excludedCategories:
          type: array
          items:
            $ref: '#/components/schemas/TargetedCategory'
          description: >-
            List of categories to exclude from the discount. Useful to exclude
            specific child categories.
          nullable: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/TargetedProduct'
          description: List of products that are eligible for the discount.
          nullable: true
        excludedProducts:
          type: array
          items:
            $ref: '#/components/schemas/TargetedProduct'
          description: List of products that are excluded from the discount.
          nullable: true
        excludeItemsWithExistingShippingDiscounts:
          type: boolean
          description: "Prevents order scoped discounts from layering over items that already have a shipping discount with the \r\nsame type."
          nullable: true
        excludeItemsWithExistingProductDiscounts:
          type: boolean
          description: "Prevents order scoped discounts from layering over items that already have a product discount with the \r\nsame type."
          nullable: true
        shippingMethods:
          type: array
          items:
            $ref: '#/components/schemas/TargetedShippingMethod'
          description: >-
            Shipping method that is eligible for shipping discounts. This is a
            shipping method defined in Shipping Settings.
          nullable: true
        shippingZones:
          type: array
          items:
            $ref: '#/components/schemas/TargetedShippingZone'
          description: Shipping Zones that are applicable for this discount
          nullable: true
        maximumQuantityPerRedemption:
          type: integer
          description: "When a condition is specified, this property limits the number of items that can be targeted per discount redemption with an order.\r\nif multiple redemptions are allowed per order then multiples of this value would be allowed in multiples of the associated \r\ncondition.\r\nIf no condition is specified then this value is not used.  \r\nIf null and condition exists, then defaults to 1."
          format: int32
          nullable: true
        appliesToLeastExpensiveProductsFirst:
          type: boolean
          description: "Determines which way the discount is optimized.  Consumers favor(default - false/null) or tenants favor (when this is set to true)\r\nApplies to discounts where target is not a specific product or list of products.  \r\nMay also impact behavior of Buy X Get Y so that X is the most expensive items and Y the least expensive."
          nullable: true
      additionalProperties: false
      description: "What to discount. Specifies the type of discount (percentage off, monetary amount, or free shipping) and which products, categories, or shipping methods are eligible for the discount.\r\nCan also specify the minimum amount that the order must total for the discount to apply."
    ThresholdMessageLocalizedContent:
      required:
        - messageTemplate
      type: object
      properties:
        localeCode:
          maxLength: 8
          minLength: 0
          type: string
          description: >-
            Language used for the discount in the current catalog. Defaults
            setting for the active catalog.
          nullable: true
        messageTemplate:
          type: string
          description: Locale-based contents of the Threshold Message.
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
    ThresholdMessage:
      required:
        - content
        - discountId
        - thresholdValue
      type: object
      properties:
        discountId:
          type: integer
          description: Unique identifier of the discount. System-supplied and read-only.
          format: int32
        thresholdValue:
          type: number
          description: >-
            The cart total amount that must be met before the threshold message
            is displayed
          format: double
        isActive:
          type: boolean
          description: Indicates if threshold messages are active for this discount
        showInCart:
          type: boolean
          description: Indicates if the threshold message will display in the cart
        showOnCheckout:
          type: boolean
          description: Indicates if the threshold message will display on the checkout page
        requiresCouponCode:
          type: boolean
          description: >-
            Indicates if the threshold message will display when a promo code is
            evaluated
        content:
          $ref: '#/components/schemas/ThresholdMessageLocalizedContent'
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
    Discount:
      required:
        - amountType
        - content
        - scope
        - target
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the discount. System-supplied and read-only.
          format: int32
          nullable: true
        content:
          $ref: '#/components/schemas/DiscountLocalizedContent'
        scope:
          type: string
          description: >-
            Scope to which the discount applies, valid values are: Order,
            LineItem
        conditions:
          $ref: '#/components/schemas/DiscountCondition'
        target:
          $ref: '#/components/schemas/DiscountTarget'
        currentRedemptionCount:
          type: integer
          description: >-
            How many times this discount has been redeemed. System-supplied and
            read-only.
          format: int32
          nullable: true
        amount:
          type: number
          description: "    Amount of the discount, as a percentage or monetary amount, for example 15% or $15.\r\nMust be either null or greater than zero."
          format: double
          nullable: true
        amountType:
          type: string
          description: "Type of discount, which can be either a percentage off the price, \r\na specific monetary amount, or free. \r\nPossible values: \r\n\tPercentage \r\n\tAmount \r\n\tFree\r\n\tFixedPrice"
        status:
          type: string
          description: >-
            Discount status which can be "Active," "Scheduled," or "Expired."
            System-supplied and read-only.
          nullable: true
        canBeDeleted:
          type: boolean
          description: >-
            Signifies that the discount is not referenced and can be hard
            deleted
        doesNotApplyToSalePrice:
          type: boolean
          description: "Determines if the discount should apply to sale price or regular price only.\r\nDiscounts will apply to sale prices by default.\r\nOnly applies to LineItem product discounts."
          nullable: true
        doesNotApplyToProductsWithSalePrice:
          type: boolean
          description: "Determines whether or not a discount applies to a items with a sale price.  Applicable \r\non order and line item discounts.  For line items, when this is true, the discount will \r\nbe disqualified.  For order level discounts, when true, the discount will not be applied \r\nto those items have a sale price."
          nullable: true
        maximumUsesPerUser:
          type: integer
          description: "Maximum number of times a user can redeem this discount.\r\n Must be either null or greater than zero."
          format: int32
          nullable: true
        maximumDiscountImpactPerOrder:
          type: number
          description: "Maximum impact this discount can apply on a single order.\r\n Must be either null or greater than zero."
          format: double
          nullable: true
        maximumDiscountImpactPerRedemption:
          type: number
          description: "Maximum impact this discount can apply on a single line item.\r\n Must be either null or greater than zero."
          format: double
          nullable: true
        maximumRedemptionsPerOrder:
          type: integer
          description: "Maximum number of redemptions allowed per order.\r\nIf null, defaults to unlimited."
          format: int32
          nullable: true
        includedPriceLists:
          type: array
          items:
            type: string
          description: "Products receiving a price from a price list specified here or a child of a specified \r\nprice list can be discounted."
          nullable: true
        doesNotApplyToMultiShipToOrders:
          type: boolean
          description: "Flag to allow or prevent application to multi-ship-to orders,\r\nOnly applicable to shipping discounts."
          nullable: true
        isBxGx:
          type: boolean
          description: "Readonly property indicating that the condition required purchase is the \r\nsame as the target items.  Used in BxGx and BoGo type discounts."
          nullable: true
        canBeStackedUpon:
          type: boolean
          description: Indicates whether or not stacking is enabled for this discount
          nullable: true
        stackingLayer:
          type: integer
          description: Indicates which stacking layer this discount is a part of
          format: int32
          nullable: true
        thresholdMessage:
          $ref: '#/components/schemas/ThresholdMessage'
        preventLineItemShippingDiscounts:
          type: boolean
          description: "Prevents Line Item Shipping discounts from being applied when a Line Item Product  \r\ndiscount has been applied"
          nullable: true
        preventOrderProductDiscounts:
          type: boolean
          description: "Prevents Order Product discounts from being applied when a Line Item Product  \r\nor Shipping discount has been applied"
          nullable: true
        preventOrderShippingDiscounts:
          type: boolean
          description: "Prevents Order Shipping discounts from being applied when a Line Item Product/Shipping  \r\nor Order Product discount has been applied"
          nullable: true
        hasPurchaseConditions:
          type: boolean
          description: "Indicates if this discount has purchase conditions that must be met before \r\nthe discount is applied"
        purchaseRequirementType:
          type: string
          description: "The type of purchase requirement for this discount, either purchase conditions and targets which   \r\nSupports BoGo, and BxGx scenarios. Or Target only that only have a target and no purchase conditions"
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: "Allows you to define and manage discounts to apply to your products, product categories, or orders. The discounts can be a specified monetary amount off the price, percentage off the price, or for free shipping.\r\nYou can create a coupon code that applies to the discount."
    DiscountCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          nullable: true
      additionalProperties: false
      description: Collection of discounts returned as a whole. A collection is not paged.
    StackingConfiguration:
      type: object
      properties:
        stackingEnabled:
          type: boolean
          description: >-
            Indicates if discount stacking is enabled for discounts in this
            catalog
        productOrderLayers:
          type: integer
          description: Number of Product Order discount layers
          format: int32
        productLineItemLayers:
          type: integer
          description: Number of Product Line Item discount layers
          format: int32
      additionalProperties: false
    DiscountSettings:
      type: object
      properties:
        stackingConfiguration:
          $ref: '#/components/schemas/StackingConfiguration'
        usePostDiscountedOrderValue:
          type: boolean
          description: >-
            Use the pre or post line item discounts order total to evaluate the
            order minimum constraint
          nullable: true
      additionalProperties: false
      description: Tenant level discount settings
    FacetSource:
      type: object
      properties:
        id:
          type: string
          description: 'Name of field, or FQN of attribute'
          nullable: true
        type:
          type: string
          description: "The type of source field used by the facet. Allowable values are: Element, Attribute. \r\nMust be a valid value for DataType defined in FacetFieldTypeConst."
          nullable: true
        name:
          type: string
          description: Read-only system-generated label for the source field.
          nullable: true
        dataType:
          maxLength: 20
          type: string
          description: >-
            Read-only system-generated DataType of the Attribute or Element
            source field. Will be valid value for DataType defined in
            DataTypeConst.
          nullable: true
        allowsRangeQuery:
          type: boolean
          description: >-
            Read-only system-generated indicator of whether the source field
            supports RangeQuery type facets.
      additionalProperties: false
    FacetValidity:
      type: object
      properties:
        isValid:
          type: boolean
        reasonCode:
          type: string
          nullable: true
      additionalProperties: false
    FacetRangeQuery:
      type: object
      properties:
        rangeValueStart:
          type: object
          additionalProperties: false
          nullable: true
        rangeValueEnd:
          type: object
          additionalProperties: false
          nullable: true
      additionalProperties: false
    Facet:
      type: object
      properties:
        facetId:
          type: integer
          description: The unique identifier for the facet definition
          format: int32
          nullable: true
        source:
          $ref: '#/components/schemas/FacetSource'
        facetType:
          type: string
          description: "The type of facet. Allowable values are: Value, RangeQuery \r\nMust be a valid value for DataType defined in FacetTypeConst."
          nullable: true
        order:
          type: integer
          description: Used to order the display of the facets within a section
          format: int32
        categoryId:
          type: integer
          description: The category that the facet is being configured at
          format: int32
        valueSortType:
          type: string
          description: "Determines how the facet values will be sorted in the store. \r\nMust be a valid value for DataType defined in FacetValueSortTypeConst. \r\nAllowable values are: CountAscending, CountDescending, ValuesAscending, ValuesDescending, AttributeDefinition, AttributeDefinitionDescending.\r\nThe default if no value is specified will be CountDescending."
          nullable: true
        overrideFacetId:
          type: integer
          description: The ID of a parent category's facet being overriden
          format: int32
          nullable: true
        isHidden:
          type: boolean
          description: Indicates whether the facet is hidden for the given category
        validity:
          $ref: '#/components/schemas/FacetValidity'
        rangeQueries:
          type: array
          items:
            $ref: '#/components/schemas/FacetRangeQuery'
          description: List of ranges if the Facet is of type Range
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: The definition of a Facet
    FacetSet:
      type: object
      properties:
        configured:
          type: array
          items:
            $ref: '#/components/schemas/Facet'
          description: Facets that are configured
          nullable: true
        available:
          type: array
          items:
            $ref: '#/components/schemas/FacetSource'
          description: 'Facets that are not configured, but COULD BE!'
          nullable: true
      additionalProperties: false
    LocationInventory:
      type: object
      properties:
        locationCode:
          type: string
          nullable: true
        productCode:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        stockOnHand:
          type: integer
          format: int32
          nullable: true
        stockAvailable:
          type: integer
          format: int32
          nullable: true
        stockOnBackOrder:
          type: integer
          format: int32
          nullable: true
        baseProductCode:
          type: string
          nullable: true
        sku:
          type: string
          nullable: true
        mfgPartNumber:
          type: string
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: The inventory for a product at a specific Location
    LocationInventoryCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/LocationInventory'
          nullable: true
      additionalProperties: false
      description: Collection of products returned as a whole. A collection is not paged.
    LocationInventoryAdjustment:
      type: object
      properties:
        productCode:
          type: string
          description: >-
            The ProductCode of the product to adjust only required when updating
            via locationInventory resource
          nullable: true
        locationCode:
          type: string
          description: >-
            The Location code of the product to adjust only required when
            updating via a sub resource of product
          nullable: true
        type:
          type: string
          description: >-
            The type of StockOnHandAdjustment, which can be either Absolute or
            Delta. Absolute means that Value is the exact number of stock on
            hand. Delta means that Value is added to or subtracted from the
            value of StockOnHand.
          nullable: true
        value:
          type: integer
          description: The absolute or delta value to be applied to StockOnHand.
          format: int32
      additionalProperties: false
      description: "Used to modify a product's inventory. This can be an absolute number (number of items in stock) or delta (increase or decrease number of items in stock). \r\nStockOnHandAdjustment applies only PUT operations. Possible values: \"Absolute\" or \"Delta.\""
    MasterCatalog:
      type: object
      properties:
        id:
          type: integer
          description: MasterCatalogId (readonly)
          format: int32
        name:
          type: string
          description: Name of the MasterCatalog (readonly)
          nullable: true
        productPublishingMode:
          type: string
          description: The product publishing mode of this MasterCatalog
          nullable: true
        enableLiveEdit:
          type: boolean
          description: >-
            If the publishingMode is Pending and LiveEditsEnabled = true,
            DataViewMode live can be passed in the header and live products can
            be directly edited.
          nullable: true
        isDeleted:
          type: boolean
          description: >-
            Indicates whether the MasterCatalog has been deleted and should no
            longer be used
      additionalProperties: false
    MasterCatalogCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/MasterCatalog'
          nullable: true
      additionalProperties: false
      description: Collection of MasterCatalogs
    PriceList:
      required:
        - name
        - priceListCode
      type: object
      properties:
        priceListCode:
          type: string
        priceListSequence:
          type: integer
          format: int32
        parentPriceListCode:
          type: string
          description: 'Parent PriceList code, Can be null for root level priceLists'
          nullable: true
        parentPriceListName:
          type: string
          description: >-
            Parent PriceList name, Can be null for root level priceLists. Read
            only in contract.
          nullable: true
        name:
          type: string
          description: Name of the priceList. Max length is 100
        description:
          type: string
          description: Description of the price list. Max length is 300
          nullable: true
        enabled:
          type: boolean
          description: >-
            Is the price list enabled and valid in the storefront. Default is
            true.
          nullable: true
        filteredInStorefront:
          type: boolean
          description: >-
            When true, only products with valid price list entries will be
            visible in the storefront. Default is false
          nullable: true
        validForAllSites:
          type: boolean
          description: >-
            When true, no valid sites need to be specifiied. Price list is
            considered valid for all sites. Default is true
          nullable: true
        validSites:
          type: array
          items:
            type: integer
            format: int32
          description: >-
            When ValidForAllSites = false, a list of siteIDs that the price list
            is valid for should be supplied
          nullable: true
        defaultForSites:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        indexedSites:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        mappedCustomerSegments:
          type: array
          items:
            type: string
          description: "List of customer segment code associated with this price list.\r\nUsed to resolve default price list"
          nullable: true
        rank:
          type: integer
          description: >-
            Used to prioritize price list resolution when more than 1 price list
            maps
          format: int32
          nullable: true
        resolvable:
          type: boolean
          description: "Determines if this price list can be resolved as the current price list \r\nwithin a session."
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: Category
    PriceListCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PriceList'
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    ProductOptionValue:
      type: object
      properties:
        value:
          type: object
          additionalProperties: false
          nullable: true
        attributeVocabularyValueDetail:
          $ref: '#/components/schemas/AttributeVocabularyValue'
      additionalProperties: false
      description: >-
        A value of a product option for this product. For example, a computer
        product may have an option called "Memory" that can have the values
        "6GB,"8GB," and "12GB."
    ProductOption:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        isProductImageGroupSelector:
          type: boolean
          description: >-
            Defines whether or not this option can be used to segment product
            images
          nullable: true
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionValue'
          description: List of all the values for this product option.
          nullable: true
      additionalProperties: false
      description: "Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, \r\nthe color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram."
    PriceListEntryPrice:
      type: object
      properties:
        minQty:
          type: integer
          format: int32
        listPriceMode:
          type: string
          nullable: true
        listPrice:
          type: number
          format: double
          nullable: true
        salePriceMode:
          type: string
          nullable: true
        salePrice:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PriceListEntryExtra:
      required:
        - attributeFQN
      type: object
      properties:
        attributeFQN:
          type: string
          description: "AttributeFQN of the extra\r\nReadOnly"
        value:
          type: object
          additionalProperties: false
          description: "The value stored with the extra\r\nReadOnly"
          nullable: true
        price:
          type: number
          description: PriceList price for the extra
          format: double
        attributeCode:
          type: string
          description: "AttributeCode.\r\nReadOnly"
          nullable: true
        attributeName:
          type: string
          description: "Name of attribute that this extra is based on.\r\nReadOnly"
          nullable: true
        displayValue:
          type: string
          description: "Value to display.  Currently only vaild when Value is a string type.\r\nReadOnly"
          nullable: true
      additionalProperties: false
      description: Extra for an entry on a price list
    PriceListEntry:
      required:
        - currencyCode
        - productCode
      type: object
      properties:
        priceListCode:
          type: string
          description: "External unique identifier of the PriceList. Must be unique an only contain url sanitized characters. Max length is\r\n50"
          nullable: true
        priceListEntrySequence:
          type: integer
          format: int32
        productCode:
          type: string
        productName:
          type: string
          nullable: true
        isVariation:
          type: boolean
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          nullable: true
        currencyCode:
          type: string
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        priceListEntryMode:
          type: string
          nullable: true
        priceListEntryTypeCode:
          type: string
          nullable: true
        discountsRestrictedMode:
          type: string
          nullable: true
        discountsRestricted:
          type: boolean
          nullable: true
        discountsRestrictedStartDate:
          type: string
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          format: date-time
          nullable: true
        msrpMode:
          type: string
          nullable: true
        msrp:
          type: number
          format: double
          nullable: true
        mapMode:
          type: string
          nullable: true
        map:
          type: number
          format: double
          nullable: true
        mapStartDate:
          type: string
          format: date-time
          nullable: true
        mapEndDate:
          type: string
          format: date-time
          nullable: true
        costMode:
          type: string
          nullable: true
        cost:
          type: number
          format: double
          nullable: true
        priceEntries:
          type: array
          items:
            $ref: '#/components/schemas/PriceListEntryPrice'
          nullable: true
        extraEntries:
          type: array
          items:
            $ref: '#/components/schemas/PriceListEntryExtra'
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: Category
    PriceListEntryCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PriceListEntry'
          nullable: true
      additionalProperties: false
      description: Collection of categories returned as a whole. A collection is not paged.
    ProductLocalizedImage:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the image. System-supplied and read-only.
          format: int32
          nullable: true
        localeCode:
          type: string
          description: Language used for the image content.
          nullable: true
        imageLabel:
          type: string
          description: Image title that appears on the storefront.
          nullable: true
        altText:
          type: string
          description: >-
            Descriptive text associated with the image or video that appears on
            the storefront.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        videoUrl:
          type: string
          description: URL of a video associated with the product.
          nullable: true
        mediaType:
          type: string
          description: >-
            Type of media. Used by the client to determine how to render the
            image or video or what have you.
          nullable: true
        sequence:
          type: integer
          description: >-
            For products with multiple images, the order in which this image
            appears on the storefront.
          format: int32
          nullable: true
        productImageGroupId:
          type: string
          description: Image group to which this image belongs.  Default is null.
          nullable: true
      additionalProperties: false
      description: >-
        Contains the image label and alternate text for a product image or video
        in the language specified by LocalCode.
    ProductLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: >-
            Lanugage used for product content. Currently, only en_US is
            supported.
          nullable: true
        productName:
          type: string
          description: Name of the product.
          nullable: true
        productFullDescription:
          type: string
          description: >-
            Long description of the product typically used for a product details
            page.
          nullable: true
        productShortDescription:
          type: string
          description: >-
            Brief description of the product typically used when the product is
            displayed in a list or search results.
          nullable: true
        productImages:
          type: array
          items:
            $ref: '#/components/schemas/ProductLocalizedImage'
          description: List of images associated with the product.
          nullable: true
      additionalProperties: false
      description: >-
        Container for language-specific content to display on the storefront.
        You'll have a container for each supported language (LocaleCode). This
        enables you to display a product in multiple languages yet manage it as
        a single product internally.
    ProductPrice:
      type: object
      properties:
        isoCurrencyCode:
          type: string
          description: Currency code.
          nullable: true
        price:
          type: number
          description: >-
            Price of the product. This is the price the merchant intends to sell
            the product if no sale price is present.
          format: double
          nullable: true
        salePrice:
          type: number
          description: >-
            Current sale price of the product. Sale price is a numeric
            (monetary) amount, not a percentage off.
          format: double
          nullable: true
        msrp:
          type: number
          description: Manufacturer Suggested Retail Price. +
          format: double
          nullable: true
        map:
          type: number
          description: Minimum Advertised Price
          format: double
          nullable: true
        mapStartDate:
          type: string
          description: >-
            Minimum Advertised Price effective start date (null = begining of
            time)
          format: date-time
          nullable: true
        mapEndDate:
          type: string
          description: Minimum Advertised Price effectivity end date (null = forever)
          format: date-time
          nullable: true
        creditValue:
          type: number
          description: Credit amt of the product
          format: double
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductLocalizedSEOContent:
      type: object
      properties:
        localeCode:
          type: string
          description: >-
            Lanugage used for product content. Currently, only en_US is
            supported.
          nullable: true
        metaTagTitle:
          type: string
          description: >-
            Metadata title. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagDescription:
          type: string
          description: >-
            Metadata description. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        metaTagKeywords:
          type: string
          description: >-
            Metadata keywords. Metadata can be used to manage information
            internally. Sometimes used for SEO.
          nullable: true
        titleTagTitle:
          type: string
          description: >-
            Used to customize the HTML title tag within the head section of the
            product details page
          nullable: true
        seoFriendlyUrl:
          type: string
          description: "Human-readable identifier that you can give to the product to create friendly URLs. For example, \r\ninstead of \"http: //example.com/products?category=2&id=25,\" the friendly URL can be \"http: //example.com/products/category/2/25.\""
          nullable: true
      additionalProperties: false
      description: >-
        Container for language-specific content to display on the storefront.
        You'll have a container for each supported language (LocaleCode). This
        enables you to display a product in multiple languages yet manage it as
        a single product internally.
    ProductCategory:
      type: object
      properties:
        categoryId:
          type: integer
          description: Unique identifier of the category. System-supplied and read-only.
          format: int32
      additionalProperties: false
      description: Categories to which the product belongs.
    ActiveDateRange:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
      description: Active Effectivity Dates
    ProductInCatalogInfo:
      type: object
      properties:
        catalogId:
          type: integer
          description: >-
            The CatalogId of the catalog that the product is associated with
            (The catalog must a valid catalog within the MasterCatalog that the
            product belongs to)
          format: int32
        isActive:
          type: boolean
          description: >-
            If true, the product is marked as available for sale in the catalog.
            Setting a product to IsActive = false will prevent it from being
            shown on the customer facing storefront.
          nullable: true
        isContentOverridden:
          type: boolean
          description: >-
            If true, the content for this product is overridden in the catalog.
            If false, the MasterCatalog level content will be used for the
            product.
          nullable: true
        content:
          $ref: '#/components/schemas/ProductLocalizedContent'
        isPriceOverridden:
          type: boolean
          description: >-
            If true, the price for this product is overridden in the catalog. If
            false, the MasterCatalog level price will be used for the product.
          nullable: true
        price:
          $ref: '#/components/schemas/ProductPrice'
        isSeoContentOverridden:
          type: boolean
          description: >-
            If true, the SEO content for this product is overridden in the
            catalog. If false, the MasterCatalog level SEO content will be used
            for the product.
          nullable: true
        seoContent:
          $ref: '#/components/schemas/ProductLocalizedSEOContent'
        productCategories:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
          description: Categories to which the product belongs for this catalog.
          nullable: true
        primaryProductCategory:
          $ref: '#/components/schemas/ProductCategory'
        dateFirstAvailableInCatalog:
          type: string
          description: >-
            Date this product was first Available for sale in the catalog. This
            is utilized in expressions that reference DaysInCatloag.
          format: date-time
          nullable: true
        activeDateRange:
          $ref: '#/components/schemas/ActiveDateRange'
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: >-
        Use the Products resource to create and manage products for your store.
        You can create products with options that a shopper configures (such as
        a T-shirt color and size). The system can manage inventory for all
        combinations of your product options, and can calculate tax and shipping
        costs.
    ProductPricingBehaviorInfo:
      type: object
      properties:
        discountsRestricted:
          type: boolean
          nullable: true
        discountsRestrictedStartDate:
          type: string
          format: date-time
          nullable: true
        discountsRestrictedEndDate:
          type: string
          format: date-time
          nullable: true
        variationPricingMethod:
          type: string
          description: Only used when product is a variation
          nullable: true
      additionalProperties: false
      description: Pricing behavior associated with the product
    ProductExtraValueDeltaPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Which currency to use.
          nullable: true
        deltaPrice:
          type: number
          description: Amount of money saved when discounts are applied.
          format: double
      additionalProperties: false
      description: >-
        How much a product option costs above the cost of the base product, if
        at all.
    ProductExtraValue:
      type: object
      properties:
        value:
          type: object
          additionalProperties: false
          nullable: true
        deltaPrice:
          $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
        localizedDeltaPrice:
          type: array
          items:
            $ref: '#/components/schemas/ProductExtraValueDeltaPrice'
          nullable: true
        deltaWeight:
          type: number
          format: double
          nullable: true
        isDefaulted:
          type: boolean
          nullable: true
        quantity:
          type: integer
          format: int32
          nullable: true
        attributeVocabularyValueDetail:
          $ref: '#/components/schemas/AttributeVocabularyValue'
      additionalProperties: false
      description: >-
        A value of a product option for this product. For example, a computer
        product may have an option called "Memory" that can have the values
        "6GB,"8GB," and "12GB."
    ProductExtra:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        isRequired:
          type: boolean
          nullable: true
        isMultiSelect:
          type: boolean
          nullable: true
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProductExtraValue'
          nullable: true
      additionalProperties: false
      description: "Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, \r\nthe color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram."
    ProductPropertyValueLocalizedContent:
      type: object
      properties:
        localeCode:
          type: string
          description: Language used for the string attribute value.
          nullable: true
        stringValue:
          type: string
          description: Localized Value in the language of the locale code
          nullable: true
      additionalProperties: false
      description: Attribute Value Localized Resource
    ProductPropertyValue:
      type: object
      properties:
        value:
          type: object
          additionalProperties: false
          nullable: true
        content:
          $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
        localizedContent:
          type: array
          items:
            $ref: '#/components/schemas/ProductPropertyValueLocalizedContent'
          nullable: true
        attributeVocabularyValueDetail:
          $ref: '#/components/schemas/AttributeVocabularyValue'
      additionalProperties: false
      description: >-
        A value of a product option for this product. For example, a computer
        product may have an option called "Memory" that can have the values
        "6GB,"8GB," and "12GB."
    ProductProperty:
      type: object
      properties:
        attributeFQN:
          type: string
          description: Unique identifier of the Attribute.
          nullable: true
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProductPropertyValue'
          nullable: true
      additionalProperties: false
      description: "Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, \r\nthe color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram."
    ProductInventoryInfo:
      type: object
      properties:
        manageStock:
          type: boolean
          description: 'If true, the Products service manages inventory for this product.'
          nullable: true
        outOfStockBehavior:
          type: string
          description: >-
            The behvior when the ManageStock is true and the product is not in
            stock.
          nullable: true
      additionalProperties: false
      description: >-
        Use the Products resource to create and manage products for your store.
        You can create products with options that a shopper configures (such as
        a T-shirt color and size). The system can manage inventory for all
        combinations of your product options, and can calculate tax and shipping
        costs.
    ProductCost:
      type: object
      properties:
        isoCurrencyCode:
          type: string
          description: Currency code.
          nullable: true
        cost:
          type: number
          description: >-
            Cost of the product. This is the price the merchant pays for the
            product.
          format: double
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductSupplierInfo:
      type: object
      properties:
        mfgPartNumber:
          type: string
          nullable: true
        distPartNumber:
          type: string
          nullable: true
        cost:
          $ref: '#/components/schemas/ProductCost'
      additionalProperties: false
      description: Supplier info for the product
    Measurement:
      type: object
      properties:
        unit:
          type: string
          nullable: true
        value:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ProductVariationOption:
      type: object
      properties:
        attributeFQN:
          type: string
          description: >-
            Unique identifier of the product variation option. System-supplied
            and read-only.
          nullable: true
        value:
          type: object
          additionalProperties: false
          description: >-
            Name of the product variation option used on the admin side
            independent of how it appears on the storefront. For example, the
            internal "SZ" attribute might appear as "size" on the storefront.
          nullable: true
        content:
          $ref: '#/components/schemas/AttributeVocabularyValueLocalizedContent'
      additionalProperties: false
      description: >-
        An option for a product variation. For example, a T-shirt with size and
        color configurable options, might have a product variation option of
        "size" or "color."
    ProductPublishingInfo:
      type: object
      properties:
        publishedState:
          type: string
          nullable: true
        lastPublishedBy:
          type: string
          nullable: true
        lastPublishedDate:
          type: string
          format: date-time
          nullable: true
        publishSetCode:
          type: string
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    BundledProduct:
      type: object
      properties:
        productCode:
          type: string
          description: Product Code
          nullable: true
        quantity:
          type: integer
          description: Qty of the bundled PRoduct
          format: int32
        price:
          $ref: '#/components/schemas/ProductPrice'
        productName:
          type: string
          description: Read only Name of the BundledProduct
          nullable: true
        packageHeight:
          $ref: '#/components/schemas/Measurement'
        packageWidth:
          $ref: '#/components/schemas/Measurement'
        packageLength:
          $ref: '#/components/schemas/Measurement'
        packageWeight:
          $ref: '#/components/schemas/Measurement'
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
      additionalProperties: false
      description: Price of the product and currency used.
    ProductImageGroupTag:
      required:
        - fqn
      type: object
      properties:
        fqn:
          type: string
        values:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ProductImageGroup:
      required:
        - productImageGroupId
      type: object
      properties:
        productImageGroupId:
          type: string
        productImageGroupTags:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageGroupTag'
          nullable: true
      additionalProperties: false
    SlicingSettings:
      type: object
      properties:
        slicingAttributeFqn:
          type: string
          description: Product option FQN to create slices on
          nullable: true
      additionalProperties: false
      description: Container class for Slicing Settings
    Product:
      type: object
      properties:
        productCode:
          type: string
          description: >-
            Merchant-created code indentifier associated with the product, for
            example, a SKU or product item number.
          nullable: true
        productUsage:
          type: string
          description: >-
            Indicates the usage type of this product. Must be one of the values
            in ProductUsageConst.
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        masterCatalogId:
          type: integer
          description: >-
            Indentifier of the Master Catalog that this product is a member of.
            System-supplied and read-only
          format: int32
          nullable: true
        productSequence:
          type: integer
          description: System generated monotonically increasing sequence
          format: int32
          nullable: true
        productTypeId:
          type: integer
          description: >-
            Unique identifier of the productType of the product. Refers to a
            valid ProductType that was previously created with the ProductType
            resource.
          format: int32
          nullable: true
        isValidForProductType:
          type: boolean
          description: >-
            Read only flag that indicates if the product meets the product type
            constraints (All adminRequired attributes have a valid value)
          nullable: true
        baseProductCode:
          type: string
          description: >-
            This is the base product ProductCode of a product that is a
            variation. It is read-only and only populated for products that are
            variations of a configurable base product.
          nullable: true
        productInCatalogs:
          type: array
          items:
            $ref: '#/components/schemas/ProductInCatalogInfo'
          description: >-
            Catalog specifc info for each catalog a product is valid in. There
            should always be one or more entries here.
          nullable: true
        content:
          $ref: '#/components/schemas/ProductLocalizedContent'
        price:
          $ref: '#/components/schemas/ProductPrice'
        pricingBehavior:
          $ref: '#/components/schemas/ProductPricingBehaviorInfo'
        seoContent:
          $ref: '#/components/schemas/ProductLocalizedSEOContent'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: >-
            The Options defined in the product Type that are currently assigned
            to this product
          nullable: true
        extras:
          type: array
          items:
            $ref: '#/components/schemas/ProductExtra'
          description: >-
            The Extras defined in the product Type that are currently assigned
            to this product
          nullable: true
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ProductProperty'
          description: >-
            The Properties defined in the product Type that are currently
            assigned to this product
          nullable: true
        isTaxable:
          type: boolean
          description: 'If true, the product is subject to tax.'
          nullable: true
        inventoryInfo:
          $ref: '#/components/schemas/ProductInventoryInfo'
        shippingClassId:
          type: integer
          format: int32
          nullable: true
        isRecurring:
          type: boolean
          description: >-
            If true, the product can be purchased or fulfilled at regular
            intervals, for example, monthly billing or a subscription.
          nullable: true
        upc:
          type: string
          description: UPC code of the product.
          nullable: true
        supplierInfo:
          $ref: '#/components/schemas/ProductSupplierInfo'
        isPackagedStandAlone:
          type: boolean
          description: Does this product need to be packaged on its own
          nullable: true
        standAlonePackageType:
          type: string
          description: When packaged alone this is the package type
          nullable: true
        packageHeight:
          $ref: '#/components/schemas/Measurement'
        packageWidth:
          $ref: '#/components/schemas/Measurement'
        packageLength:
          $ref: '#/components/schemas/Measurement'
        packageWeight:
          $ref: '#/components/schemas/Measurement'
        applicableDiscounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          description: Read only. List of discounts that are available for a product.
          nullable: true
        isVariation:
          type: boolean
          description: >-
            Read only. If true, this is a product variation of a product with
            configurable options. System-supplied and read-only.
        variationKey:
          type: string
          description: >-
            Read only. If IsVariation true, thish provides a unique key to
            manage the variation of the base product.
          nullable: true
        hasConfigurableOptions:
          type: boolean
          description: >-
            Read only. If true, this product has configurable options. The
            product is not purchasable until the shopper selects options that
            resolve to a product variation. System-supplied and read-only.
        hasStandAloneOptions:
          type: boolean
          description: >-
            Read only. If true, the product has stand-alone options that a
            shopper may select. System-supplied and read-only.
        variationOptions:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariationOption'
          description: >-
            Read only List of variations that exist for a product. This is only
            populated when IsVariation is true. To get the list of options, the
            GET request must include the VariationOptions response group.
          nullable: true
        publishingInfo:
          $ref: '#/components/schemas/ProductPublishingInfo'
        bundledProducts:
          type: array
          items:
            $ref: '#/components/schemas/BundledProduct'
          description: "list of other products that are included in a BundleProduct\r\nThis requires that the ProductUssage be set to Bundle"
          nullable: true
        productImageGroups:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageGroup'
          description: "List of the image groups this product uses.\r\nImage groups are used to map different images to different product options.\r\nIf the product doesn't have options then all images will be in the default\r\nimage group."
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
        slicingSettings:
          $ref: '#/components/schemas/SlicingSettings'
      additionalProperties: false
      description: >-
        Use the Products resource to create and manage products for your store.
        You can create products with options that a shopper configures (such as
        a T-shirt color and size). The system can manage inventory for all
        combinations of your product options, and can calculate tax and shipping
        costs.
    ProductCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          nullable: true
      additionalProperties: false
      description: Collection of products returned as a whole. A collection is not paged.
    ProductCodeRename:
      type: object
      properties:
        existingProductCode:
          type: string
          description: The existing ProductCode that should be renamed
          nullable: true
        newProductCode:
          type: string
          description: The new ProductCode that will be the result of the rename
          nullable: true
      additionalProperties: false
      description: A tuple used to rename the productCode of a product
    ProductVariationDeltaPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Which currency is in use.
          nullable: true
        value:
          type: number
          description: >-
            How much more the variation costs above the cost of the base
            product.
          format: double
          nullable: true
        msrp:
          type: number
          description: Manufacturer Suggested Retail Price.
          format: double
          nullable: true
        creditValue:
          type: number
          description: Credit amt of the product
          format: double
          nullable: true
      additionalProperties: false
      description: >-
        How much more a product variation costs above the cost of the base
        product. If the price of the base product changes, this price is
        adjusted automatically.
    ProductVariationFixedPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Which currency is in use.
          nullable: true
        listPrice:
          type: number
          description: Variation price for fixed pricing
          format: double
          nullable: true
        salePrice:
          type: number
          description: Variation sale price whne fixed pricing
          format: double
          nullable: true
        msrp:
          type: number
          description: Manufacturer Suggested Retail Price.
          format: double
          nullable: true
        creditValue:
          type: number
          description: Credit amt of the product
          format: double
          nullable: true
      additionalProperties: false
    ProductVariation:
      type: object
      properties:
        isActive:
          type: boolean
          description: >-
            If true, the merchant accepts the variation generated from the
            configurable options as a product offering. If IsActive is false
            then the product variation is not for sale--either because it was
            never a product offering or it was permanently dropped. IsActive is
            not intended for temporary unavailability. Default is false.
          nullable: true
        isOrphan:
          type: boolean
          description: >-
            If true, the variation is no longer possible. The system sets
            IsOrphan to true when the merchant has changed something to make
            this variation impossible. For example, if the merchant stopped
            selling all "small" shirts, all product variations with the "small"
            option are set to IsOrphan. System-supplied and read-only.
          nullable: true
        variationExists:
          type: boolean
          description: >-
            If true, the product variation exists. When the merchant sets
            IsActive to true, the system sets VariationExists to true and
            creates a Variation Key as a unique identifier for this variation.
            System-supplied and read-only.
          nullable: true
        variationkey:
          type: string
          description: >-
            Unique identifier for a single variation ("small" + "red" +
            "short-sleeved"). System-supplied and read-only.
          nullable: true
        variationProductCode:
          type: string
          description: >-
            Descriptive code to refer to a single variation. Typically this is a
            sequence appended to the base ProduceCode. A merchant can create
            this code to easily recognize a product variation. By default, the
            system creates this code by appending a number to the base product.
            After the merchant supplies this code, it becomes read-only.
          nullable: true
        deltaPrice:
          $ref: '#/components/schemas/ProductVariationDeltaPrice'
        localizedDeltaPrice:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariationDeltaPrice'
          description: "How much more the variation costs above the cost of the base product. If the price of the base product changes, this price is adjusted accordingly.\r\nThis collection allows for multiple currencies."
          nullable: true
        fixedPrice:
          $ref: '#/components/schemas/ProductVariationFixedPrice'
        localizedFixedPrice:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariationFixedPrice'
          description: "Price of the variation using fixed per currency\r\nThis collection allows for multiple currencies."
          nullable: true
        deltaWeight:
          type: number
          description: Weight of the product with this variation.
          format: double
          nullable: true
        fixedWeight:
          type: number
          description: Fixed weight of the product with this variation.
          format: double
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariationOption'
          description: >-
            List of values for this product variation: such as "small, "red..
            these are read only here as the variationKey defines the values "
          nullable: true
        upc:
          type: string
          description: Price Lookup Unit code for the product
          nullable: true
        fulfillmentTypesSupported:
          type: array
          items:
            type: string
          description: Indicates the fulfillment types the product supports.
          nullable: true
        supplierInfo:
          $ref: '#/components/schemas/ProductSupplierInfo'
      additionalProperties: false
      description: >-
        The ProductVariation resource helps merchants manage their products with
        configurable options. Using this reasource, the system creates a matrix
        of all possible combinations of the product options and the merchant
        confirms which variations match products for sale. For example, a
        T-shirt with three color and three size options has nine possible
        product variations. The system keeps track of inventory for each
        variation.
    ProductVariationPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariation'
          nullable: true
      additionalProperties: false
      description: >-
        Collection of product variations where the variations are returned in a
        series of pages.
    ProductVariationCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariation'
          nullable: true
      additionalProperties: false
      description: >-
        Collection of product variations returned as a whole. A collection is
        not paged.
    ProductSortExpression:
      required:
        - field
      type: object
      properties:
        field:
          type: string
          description: "The name of the field to sort on.\r\nMust be a known sort field or sortable attribute"
        direction:
          type: string
          description: ASC or DESC
          nullable: true
      additionalProperties: false
    ProductSortOverride:
      required:
        - productCode
      type: object
      properties:
        productCode:
          type: string
          description: The product code of the product being overridden
        sliceValue:
          type: string
          description: The slicing value of the product being overridden
          nullable: true
        position:
          type: integer
          description: "Indicates the relative position of the product to other overridden products.\r\nPosition is absolute if IsPinned is true.\r\nNot applicable to buried products. Buried products will be given a default\r\nposition of -1"
          format: int32
          nullable: true
        isPinned:
          type: boolean
          description: "Flag to indicate that the product is pinned at the specified position.\r\nNot applicable to buried products"
          nullable: true
      additionalProperties: false
      description: "Represents a product that is positioned out of its normal sort position.\r\nIt can be boosted to the top of the list, positioned exactly or buried at the bottom"
    ProductSortDefinition:
      required:
        - name
        - sortExpressions
        - startDate
      type: object
      properties:
        productSortDefinitionId:
          type: integer
          description: System or user provided ID for the ProductSortDefinition
          format: int32
          nullable: true
        categoryId:
          type: integer
          description: ''
          format: int32
          nullable: true
        name:
          type: string
          description: Short Name for the sort definition. Required.
        startDate:
          type: string
          description: The Start Date when the sort definition becomes active
          format: date-time
        endDate:
          type: string
          description: Optional end date for a product sort definition
          format: date-time
          nullable: true
        sortExpressions:
          type: array
          items:
            $ref: '#/components/schemas/ProductSortExpression'
          description: "Sort expression to apply\r\nMax two expressions"
        boosted:
          type: array
          items:
            $ref: '#/components/schemas/ProductSortOverride'
          description: List of products being positioned
          nullable: true
        buried:
          type: array
          items:
            $ref: '#/components/schemas/ProductSortOverride'
          description: List of products being positioned
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: "Defines a default sort for a list of products and allows some products to be\r\nboosted to the top or pinned ot a specific position, or buried at the bottom of the\r\nlist.  Only 10 items can be boosted or pinned and up to"
    ProductSortDefinitionPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductSortDefinition'
          nullable: true
      additionalProperties: false
      description: >-
        Collection of product sort definitions where product sort definitions
        are returned in a series of pages.
    AttributeInProductTypeDisplayInfo:
      type: object
      properties:
        displayIntention:
          type: string
          description: >-
            Defines the intended display of this Attribute in the storeFront
            (ex. DropDown, ImagePicker, RadioButtons....)
          nullable: true
      additionalProperties: false
    AttributeVocabularyValueDisplayInfo:
      type: object
      properties:
        cmsId:
          type: string
          description: Id of the image in the CMS.
          nullable: true
        imageUrl:
          type: string
          description: URL of the image.
          nullable: true
        colorValue:
          type: string
          description: Hex Color value to display in a color picker
          nullable: true
      additionalProperties: false
    AttributeVocabularyValueInProductType:
      type: object
      properties:
        value:
          type: object
          additionalProperties: false
          description: >-
            The actual value of the attribute vocabulary. This must be an
            existing value defined in the attribute vocabulary
          nullable: true
        order:
          type: integer
          description: >-
            Used to order the display of the attribute values in the
            storefront....
          format: int32
          nullable: true
        displayInfo:
          $ref: '#/components/schemas/AttributeVocabularyValueDisplayInfo'
        vocabularyValueDetail:
          $ref: '#/components/schemas/AttributeVocabularyValue'
      additionalProperties: false
    AttributeInProductType:
      type: object
      properties:
        attributeFQN:
          type: string
          description: >-
            Unique identifier of the Attribute. Must be an attribute fully
            qualilfied name that already exists. If no namespace is specified
            Tenant is assumed
          nullable: true
        isInheritedFromBaseType:
          type: boolean
          description: >-
            If True, the attribute is part of the base product type and can only
            have order modified.
          nullable: true
        order:
          type: integer
          description: Used to order the display of the attributes within a section
          format: int32
          nullable: true
        isRequiredByAdmin:
          type: boolean
          description: >-
            If True, the admin must include this attribute in products of this
            productType
          nullable: true
        isHiddenProperty:
          type: boolean
          description: >-
            If True, the property is hidden in the storefront. This field only
            applies to properties.
          nullable: true
        isAdminOnlyProperty:
          type: boolean
          description: >-
            If true, this property is not available on the storefront. If false,
            this property will be available on storefront. The IsHiddenProperty
            hides the property from the customer, but is still available from
            the API.
          nullable: true
        isProductDetailsOnlyProperty:
          type: boolean
          description: >-
            If True this property will not be returned  storefront product
            listings (Search,GetProduct) it will still be returned on
            GetProduct, ValidateProduct...)
          nullable: true
        isMultiValueProperty:
          type: boolean
          description: >-
            If True, the property can have multiple values selected on the
            product. Only applies to PredefinedVocabulary properties.
          nullable: true
        displayInfo:
          $ref: '#/components/schemas/AttributeInProductTypeDisplayInfo'
        vocabularyValues:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVocabularyValueInProductType'
          description: The collection of vocabulary values included in this product type.
          nullable: true
        attributeDetail:
          $ref: '#/components/schemas/Attribute'
      additionalProperties: false
    ProductType:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the ProductType. System-supplied and read-only.
          format: int32
          nullable: true
        name:
          type: string
          description: Name of the productType
          nullable: true
        masterCatalogId:
          type: integer
          description: >-
            Indentifier of the Master Catalog that this ProductType is a member
            of. System-supplied and read-only.
          format: int32
          nullable: true
        isBaseProductType:
          type: boolean
          description: >-
            System supplied and read only. There is only one BaseProductType per
            MasterCatalog.
        productCount:
          type: integer
          description: >-
            Indicates the number of products currently using this Product Type.
            System-supplied and read-only.
          format: int32
          nullable: true
        productUsages:
          type: array
          items:
            type: string
          description: List of ProductUsages supported by the ProductType.
          nullable: true
        goodsType:
          type: string
          description: The TYpe of Goods of this product
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/AttributeInProductType'
          description: Collection of the Attributes that are Options in this productType
          nullable: true
        extras:
          type: array
          items:
            $ref: '#/components/schemas/AttributeInProductType'
          description: Collection of the Attributes that are Extras in this productType
          nullable: true
        properties:
          type: array
          items:
            $ref: '#/components/schemas/AttributeInProductType'
          description: Collection of the Attributes that are Properties in this productType
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
    ProductTypeCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductType'
          nullable: true
      additionalProperties: false
      description: Collection of attributes.
    PublishingScope:
      type: object
      properties:
        allPending:
          type: boolean
          description: True = scope to all pending products
          nullable: true
        productCodes:
          type: array
          items:
            type: string
          description: List of specific productCodes to scope publish operation against
          nullable: true
        publishSetCode:
          type: string
          description: The Publish Set to publish
          nullable: true
      additionalProperties: false
    PublishSet:
      type: object
      properties:
        code:
          type: string
          description: The PublishSet unique identifier
          nullable: true
        productCount:
          type: integer
          description: Number of product drafts that are included in the publish set
          format: int32
        productCodes:
          type: array
          items:
            type: string
          description: List of specific product codes that are included in the publish set
          nullable: true
      additionalProperties: false
    PublishSetCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PublishSet'
          nullable: true
      additionalProperties: false
      description: Non-paged collection of PublishSets.
    SynonymDefinition:
      type: object
      properties:
        synonymId:
          type: integer
          description: The unique identifier for the synonym definition
          format: int32
          nullable: true
        key:
          type: string
          description: If key is defined then map is directed
          nullable: true
        synonyms:
          type: array
          items:
            type: string
          description: >-
            List of synonyms.  If no key is defined the matches are
            bidirectional
          nullable: true
      additionalProperties: false
    SynonymDefinitionCollection:
      type: object
      properties:
        tenantId:
          type: integer
          description: Read-only TenantId
          format: int32
        siteId:
          type: integer
          description: Read-only  Site Id
          format: int32
        localeCode:
          type: string
          description: The locale code to which this definition applies
          nullable: true
        synonymDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/SynonymDefinition'
          description: List of mappings for this definition
          nullable: true
      additionalProperties: false
      description: >-
        Non-paged collection of all synonyms for a Site-Locale. Used for bulk
        operations
    SynonymDefinitionPagedCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/SynonymDefinition'
          nullable: true
      additionalProperties: false
      description: Paged collection of synonyms for a Site-Locale.
    SearchTuningRuleFilter:
      type: object
      properties:
        field:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    SearchTuningRule:
      type: object
      properties:
        siteId:
          type: integer
          format: int32
        searchTuningRuleCode:
          type: string
          nullable: true
        searchTuningRuleName:
          type: string
          nullable: true
        searchTuningRuleDescription:
          type: string
          nullable: true
        keywords:
          type: array
          items:
            type: string
          nullable: true
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchTuningRuleFilter'
          nullable: true
        active:
          type: boolean
        isDefault:
          type: boolean
        activeStartDate:
          type: string
          format: date-time
          nullable: true
        activeEndDate:
          type: string
          format: date-time
          nullable: true
        boostedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        blockedProductCodes:
          type: array
          items:
            type: string
          nullable: true
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
    SearchTuningRuleCollection:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        pageCount:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchTuningRule'
          nullable: true
      additionalProperties: false
    SearchTuningRuleSortFields:
      type: object
      properties:
        sortFields:
          type: array
          items:
            type: string
          nullable: true
        inclusionExclusionType:
          type: string
          nullable: true
      additionalProperties: false
    FieldWeight:
      type: object
      properties:
        searchFieldName:
          type: string
          description: field in the index to target
          nullable: true
        weight:
          type: integer
          description: weight to apply to boost field
          format: int32
      additionalProperties: false
    SuggestSettings:
      type: object
      properties:
        fieldWeights:
          type: array
          items:
            $ref: '#/components/schemas/FieldWeight'
          nullable: true
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
        returnFields:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    BoostValue:
      type: object
      properties:
        value:
          type: string
          nullable: true
        boost:
          type: integer
          format: int32
        operator:
          type: string
          nullable: true
      additionalProperties: false
    BoostField:
      type: object
      properties:
        fieldName:
          type: string
          nullable: true
        valueExpressions:
          type: array
          items:
            $ref: '#/components/schemas/BoostValue'
          nullable: true
      additionalProperties: false
    FieldValueBoost:
      type: object
      properties:
        boostType:
          type: string
          nullable: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/BoostField'
          nullable: true
      additionalProperties: false
    ListingSettings:
      type: object
      properties:
        customBoosts:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: '#/components/schemas/FieldValueBoost'
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ProductSuggestSettings:
      type: object
      properties:
        customBoosts:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: '#/components/schemas/FieldValueBoost'
        searchChildProductsByDefault:
          type: boolean
        fieldWeights:
          type: array
          items:
            $ref: '#/components/schemas/FieldWeight'
          nullable: true
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
        returnFields:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SiteSearchFieldWeight:
      type: object
      properties:
        phraseWeight:
          type: integer
          description: weight to apply in phrase boosting
          format: int32
        searchFieldName:
          type: string
          description: field in the index to target
          nullable: true
        weight:
          type: integer
          description: weight to apply to boost field
          format: int32
      additionalProperties: false
      description: A custom field and weight value for search relevancy
    SiteSearchSettings:
      type: object
      properties:
        fieldWeights:
          type: array
          items:
            $ref: '#/components/schemas/SiteSearchFieldWeight'
          nullable: true
        customBoosts:
          type: array
          items:
            type: string
          nullable: true
        fieldValueBoost:
          $ref: '#/components/schemas/FieldValueBoost'
        minimumMatchPercents:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        phraseSlop:
          type: integer
          format: int32
        personalizationExperience:
          type: string
          nullable: true
        personalizationFactor:
          type: number
          format: double
          nullable: true
        searchChildProductsByDefault:
          type: boolean
      additionalProperties: false
    SearchSettings:
      type: object
      properties:
        settingsName:
          type: string
          nullable: true
        isDefault:
          type: boolean
        siteSearchSettings:
          $ref: '#/components/schemas/SiteSearchSettings'
        productSuggestSettings:
          $ref: '#/components/schemas/ProductSuggestSettings'
        categorySuggestSettings:
          $ref: '#/components/schemas/SuggestSettings'
        listingSettings:
          $ref: '#/components/schemas/ListingSettings'
        auditInfo:
          $ref: '#/components/schemas/AuditInfo'
      additionalProperties: false
      description: Settings to control product search and indexing behavior
    SearchSettingsCollection:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchSettings'
          nullable: true
      additionalProperties: false
security:
  - bearerAuth: []
    clientOauth2: []
